''' 
    Filename:   Unsupervised.py    
    Version:    1.4
    Since:      2013-05-04
    Author: 
        Jimmy Lin (u5223173) - u5223173@uds.anu.edu.au
        
    Edited by MacVim
    Documentation auto-generated by Snippet 
'''

import argparse
import numpy as np
import EM
import Gaussian as gau
from time import sleep
import matplotlib.pyplot as plt 
def classMapping(flowerName):
    '''
     map the string-valued target variable to be
    numerical representation
    '''
#{{{
    if flowerName == "Iris-setosa":
        return 0
    elif flowerName == "Iris-versicolor":
        return 1
    elif flowerName == "Iris-virginica":
        return 2
    else :
        print "Flower Name Exception: unknown flower"
        return -1
#}}}

def readMatrix(filePath):
#{{{
    ## Exception handling for file opening
    try:
        IrisFile = open(filePath)
    except:
        print "Iris Data IO error, please check your input path"
    
    ## read in raw string, and store in temporary matrix (string only)
    tempList = []
    for tempStr in IrisFile: # read each line of IrisData
        tempStr = tempStr.replace("\n","")
        tempList.append( tempStr.split(",") )

    ## now convert string to numeric value and store in another matrix IrisData
    Data = []
    for row in range(0,len(tempList)):
        temp = []
        if len(tempList[row]) < 5: ## encounter empty line
            break
        ## 0-3 features need direct conversion
        for col in range(0,4): 
            temp.append( float( tempList[row][col] ) )
        ## 4th feature need particular mapping
        temp.append( classMapping( tempList[row][4] ) )
        Data.append( temp )
    try:
        IrisFile.close()
    except:
        pass
#}}}
    return np.asarray(Data)

def main(infile, numOfFeatures, numOfComponents, threshold, repetition):
    ## Data import to memory
    IrisDataFile = infile
    IrisData = readMatrix( IrisDataFile)
    IrisData = np.asarray(IrisData)
    
    rep = 0
    while rep < repetition:
        try: ## exception handling
            print "This is " + str(rep) + "repetition:"
            patterns = IrisData[:, 0:numOfFeatures]
            gaussians = EM.factoryMixtureGaussians(numOfComponents, numOfFeatures)
            piList = EM.randomInitialise(patterns, gaussians)
            for tempGaussian in gaussians:
                print "Initilisation of parameters:"
                tempGaussian.showMuInTex()
                tempGaussian.showSigmaInTex()
            print piList
            previousCriteria = None
            currentCriteria = None
            convergenceThreshold = threshold
            loglikelihoodList = []
            expectedLoglikelihoodList = []
            times = 1
            while True:
                ## E-step
                responsibilities = EM.expectation(patterns, gaussians, piList)
                currentCriteria, expectedLoglikelihood = EM.getCriteria( patterns, gaussians, piList, responsibilities)
                loglikelihoodList.append(currentCriteria)
                expectedLoglikelihoodList.append(expectedLoglikelihood)

                ## M-step
                gaussians, piList = EM.maximisation(patterns, responsibilities, gaussians)
                currentCriteria, expectedLoglikelihood = EM.getCriteria( patterns, gaussians, piList, responsibilities)
                loglikelihoodList.append(currentCriteria)
                expectedLoglikelihoodList.append(expectedLoglikelihood)

                ## result demonstration
                if previousCriteria is None:
                    print "Current Criteria: " + str(currentCriteria)
                    previousCriteria = currentCriteria
                    times = times + 1
                    continue
                else:
                    print "Criteria: previous - > current " + str(previousCriteria) + \
                        " -> " + str(currentCriteria)
                    if abs((currentCriteria - previousCriteria) / previousCriteria) < convergenceThreshold:
                        ## termination condition satisfied.
                        print "Convergence Threshold reached.."
                        print "Iteration Quantity: " + str(times)
                        print "Parameters of resulted Guassians:"
                        for tempGaussian in gaussians:
                            tempGaussian.showMuInTex()
                            tempGaussian.showSigmaInTex()
                            print
                        print "Resulted Mixture Coefficient (pi):"
                        print piList
                        break
                    else:
                        previousCriteria = currentCriteria
                        print "Continues..."
                        times = times + 1
                        continue
            ## check result
            lengthOfList = len(loglikelihoodList)
            assert lengthOfList == len(expectedLoglikelihoodList)
            iterationTimes = lengthOfList / 2
            iteration = range(0, lengthOfList) 
            iteration = np.divide(iteration, 2) ## one combo of E and M step called one step
            ## draw graph
            plt.figure(rep)
            plt.xlim([-2, iterationTimes + 2])  ## specify the display scope of figure
            plt.plot(iteration, loglikelihoodList, "b-", linewidth = 3, label="Loglikelihood")
            plt.plot(iteration, expectedLoglikelihoodList, "r-", linewidth = 3, label="expectedLoglikelihood")
            plt.plot([],[], "b.", label="Threshold = "+ str(convergenceThreshold))
            plt.xlabel("Iteration:"+ str(iterationTimes) )
            plt.ylabel("Loglikelihood and ExpectedLoglikelihood")
            plt.legend(loc = 4)
            rep = rep + 1
        except:
            continue
    plt.show()


if __name__ == "__main__":
    DESCRIPTION = "Unsupervised learning on IrisData by using EM algorithm."
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('-i', metavar='infile', action='store', type=str, dest='infile', \
                        default='./Iris.txt' ,help='Path of input data file. Default: ./Iris.txt')
    parser.add_argument('-f', metavar='numOfFeatures', type=int, dest='numOfFeatures',\
                        default=4, help='Number of features in each data object. Default: 4')
    parser.add_argument('-c', metavar='numOfComponents', type=int, dest='numOfComponents',\
                        default=3, help='Number of Gaussian Components. Default: 3')
    parser.add_argument('-t', metavar='Threshold', type=float, nargs='?', dest='threshold',\
                        default=1e-5, help='Threshold for Convergence Evaluation. Default: 1e-5')
    parser.add_argument('-r', metavar='Repetition', type=int, nargs='?', dest='repetition',\
                        default=5, help='Times for repeated learning. default: 5')

    args = parser.parse_args()
    infile = args.infile
    numOfFeatures = args.numOfFeatures
    numOfComponents = args.numOfComponents
    threshold = args.threshold
    repetition = args.repetition
    main(infile, numOfFeatures, numOfComponents, threshold, repetition)
