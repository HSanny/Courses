package types.paths;
import elements.SvgElement;
import types.Path;
import visitors.*;
import java.awt.geom.Path2D;
/** 
* @module CubicCurveTo.java
* @version 1.0 
* @since 2013-04-22
* @author Jimmy Lin (u5223173) - u5223173@uds.anu.edu.au
* 
* Edited by MacVim
* Class Info auto-generated by Snippet 
*/
public class CubicCurveTo extends Path {
    static final int SIZE_CcCOMMAND = 6;

    private Point2D controlPointA;
    private Point2D controlPointB;
    private Point2D endPoint;
    public Point2D getControlPointA() { return this.controlPointA; };
    public Point2D getControlPointB() { return this.controlPointB; };
    public Point2D getEndPoint() { return this.endPoint; };
    

    // constructor for normal curve to command
    public CubicCurveTo (SvgElement e, String command, double[] points) {
        super(e);
        this.command = command;
        if (this.command.matches("[Cc]")) {
            if (points.length >= SIZE_CcCOMMAND) {
                this.controlPointA = new Point2D (points[0], points[1]);
                this.controlPointB = new Point2D (points[2], points[3]);
                this.endPoint = new Point2D (points[4], points[5]);
            }
            if (points.length > SIZE_CcCOMMAND) {
                double [] newPoints = new double [points.length - SIZE_CcCOMMAND];
                for (int i = 0; i < newPoints.length ; i ++) {
                    newPoints[i] = points[i + SIZE_CcCOMMAND];
                }
                this.next = new CubicCurveTo (e, command, newPoints);
            }

        } 
    }
    // visitor pattern implementation
    public void acceptPV (PathVisitor visitor) {
        visitor.visitCubicCurveTo(this);
    }

    public String toString () {
        String str = "Cubic Curve To: ";
        str += "\t Mode:" + this.command ;
        return str;
    }

}
