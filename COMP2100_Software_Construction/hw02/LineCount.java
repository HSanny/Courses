// import library
import java.io.IOException;//{{{
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.BufferedReader;//}}}

/**
 * This Record structure is to store information of each one java code file.
 * Every time we invoke the examineFile method, one record would be returned..
 * The purpose of writing this class is to better keep track of the examination of code files..
 *
 * */
class Record{
    /** Field */
    int lineOfComments = 0;//{{{
    int lineOfBlanks = 0;
    int lineOfCodes = 0;
    int lineOfBraceOnly = 0;
    int lineOfTotal = 0;
    String filename;//}}}
    
    /** constructor */
    public Record(String filename) { 
        this.filename = filename;
    }

    /**Format the String according to requirment of homework 02*/
    public String toString_hm02(){
        // right-justfied and width is four as specified in the requirement
        String str = String.format("%4d %s",this.lineOfCodes,this.filename);
        return str;
    }
    public String toString(){
        String str;//{{{
        str = "The file [" +this.filename+"] has "+ this.lineOfTotal + " lines, precisely:\n";
        str += "\t" + this.lineOfCodes + " Code Lines...\n";
        str += "\t" + this.lineOfComments + " Comment Lines... \n";
        str += "\t" + this.lineOfBlanks + " Blank Lines... \n";
        str += "\t" + this.lineOfBraceOnly + " Brace-Only Lines...\n";
        str += "\t" + (this.lineOfComments+this.lineOfBlanks +this.lineOfBraceOnly +this.lineOfCodes) + " recognized Lines...\n"; //}}}
        return str;
    }
}

enum LineType {
    COMMENT, BLANK, CODE, BRACE, UNKNOWN
}

/** 
* @module LineCount.java
* @version 1.2 
* @since 2013-02-28
* @author Jimmy Lin (u5223173) - u5223173@uds.anu.edu.au
* 
* Edited by MacVim
* Class Info auto-generated by Snippet 
*/
public class LineCount  { 
    /**
     * @param a string containing information of one line .
     * @return the type of this line in the form of LineType enumeration.
     * */
    public static LineType getClassification(String CurrentLine){
        // preprocessing for this line of string//{{{
        String NoSpaceStr = CurrentLine.replace(" ","");
        String NoTabStr = NoSpaceStr.replace("\t","");
        
        /** Assign value to the string to be examined */
        String ProcessedStr = NoTabStr; 
        /** Test statement */
        // System.out.println("["+ProcessedStr.length()+"]"+ProcessedStr);
        /** Start Examination */
        if (ProcessedStr.length() == 0)
            return LineType.BLANK;
        else if (ProcessedStr.charAt(0) == '/' || ProcessedStr.charAt(0) == '*')
            return LineType.COMMENT;
        else if ((ProcessedStr.charAt(0) == '{' || ProcessedStr.charAt(0) == '}' ) &&  ProcessedStr.length() == 1)
        {
            // remove { and }, see what is the leftover 
            ProcessedStr = ProcessedStr.replace("{","");
            ProcessedStr = ProcessedStr.replace("}","");
            LineType temp;
            temp = getClassification(ProcessedStr);
            if (temp == LineType.CODE)
                // if the leftover is acutally code, we should regard this line as code line
                return LineType.CODE;
            else if (temp == LineType.COMMENT)
                // if the leftover character is comment, we just view this line as comment line instead of brace
                return LineType.COMMENT;
            else return LineType.BRACE;
        }
        else 
            return LineType.CODE;//}}}
    }

    /**
     * @param filename - the name of java code file whose lines are to be examined (path included) 
     * @return - a Record structure that records the information of opened file.
     * */
    public static Record examineFile(String filename) throws IOException{
        Record currentFile = new Record(filename);//{{{
        BufferedReader br ;
        try{
             br = new BufferedReader(new FileReader(filename));
        } catch (IOException e){
            /** exception handling for failure to open */
            System.out.println("    ERROR: cannot open "+ filename);
            return null;
        }

        LineType temp;
        String currentLine; 
        currentLine = br.readLine() ;
        while (currentLine != null){
            temp =  getClassification(currentLine);
            currentFile.lineOfTotal += 1;
            if ( temp == LineType.COMMENT ) 
                currentFile.lineOfComments += 1;
            else if ( temp == LineType.CODE ) 
                currentFile.lineOfCodes += 1;
            else if ( temp == LineType.BLANK ) 
                currentFile.lineOfBlanks += 1;
            else if ( temp == LineType.BRACE )
                currentFile.lineOfBraceOnly += 1;
            currentLine = br.readLine();
        }
        br.close(); // close the BufferedReader object//}}}
        return currentFile;
    }
    
    /**
     * */
    public static void main (String [] args) throws IOException {
        int numOfFiles = 0 ;//{{{
        int numOfCodeLines = 0 ;
        Record tempRecord ;
        String summary = "";
        for ( int i = 0 ; i < args.length ; i++ ) {
            // System.out.println(i +":"+args[i]);
            /** give disregard to those files that are not .java */
            if (args[i].indexOf(".java") < 0){ 
                System.out.println("    ERROR: cannot open "+args[i]);
                continue;
            }

            /** invoke the method of opening java source file */
            tempRecord = examineFile(args[i]); 
            if (tempRecord == null) continue;

            /** file open succeed... */
            System.out.println(tempRecord.toString());
            summary += tempRecord.toString_hm02() + "\n";
            numOfFiles += 1;
            numOfCodeLines += tempRecord.lineOfCodes;
            }
        System.out.println(summary);
        System.out.println("Summary: " + numOfFiles + " java files, " + numOfCodeLines + " lines of code");//}}}
        }
}
