/** 
* @module SortnCount.java
* @version 1.0 
* @since 2013-03-26
* @author Jimmy Lin (u5223173) - u5223173@uds.anu.edu.au
* 
* Edited by MacVim
* Class Info auto-generated by Snippet 
*/
import java.util.Scanner;

public class SortnCount {
    public static void main (String [] args) {
        BST bst = new BST ();
        Scanner input = new Scanner (System.in);
        while (true) {
            String temp = input.nextLine();
            if (temp.compareTo("") == 0) break;
            int pInteger;
            try {
                pInteger = Integer.parseInt(temp);
            } catch (Exception e) {
                System.out.println("Unexpected input.. Try again..");
                continue;
            }
            bst.insert(new number (pInteger));
        }
        System.out.println("Ascending order:");
        System.out.println(bst.toString(1));
        System.out.println("Descending order:");
        System.out.println(bst.toString(0));
    }
}
class BST {
    number current;
    BST left;
    BST right;
    
    BST () {}
    BST (number operand) {
        this.current = operand;
        this.left = null;
        this.right = null;
    }

    void insert (number operand) {
        if (this.current == null) {
            this.current = operand;
        } else if (this.current.compareTo(operand) == 0) {
            this.current.addOne();
        } else if (this.current.compareTo(operand) > 0) {
            if (this.left == null) {
                this.left = new BST (operand);
            } else {
                this.left.insert(operand);
            }
        } else if (this.current.compareTo(operand) < 0) {
            if (this.right == null) {
                this.right = new BST (operand);
            } else {
                this.right.insert(operand);
            }
        }
        return ;
    }

    /** toString function 
     * Return a string that represent the required info of this nodes and its subnodes
     *     ascend = 1 for increasing order 
     *     otherwise, the order is decreasing. 
     *  */
    public String toString (int ascend) {
        String str = "";
        if (this.current == null) return "";
        if (ascend == 1) {
            str = (this.left!=null?this.left.toString(1):"") 
                + this.current.toString() + "\n" + (this.right!=null?this.right.toString(1):"") ; 
        } else {
            str = (this.right!=null? this.right.toString(0):"")  +
                this.current.toString() + "\n" + (this.left!=null?this.left.toString(0):"") ; 
        }
        return str; 
    }
}
class number {
    private int value;
    private int times;
    
    number (int val) {
        this.value = val;
        this.times = 1;
    }

    public int getValue () { return this.value; }
    public int getTimes () { return this.times; }
    
    int compareTo (number operand) {
        int op1 = this.value;
        int op2 = operand.getValue();
        return op1 - op2;
    }

    public void addOne () { this.times ++; }

    public String toString () {
        return (""+ this.getValue() + " " + this.getTimes());
    }
}
