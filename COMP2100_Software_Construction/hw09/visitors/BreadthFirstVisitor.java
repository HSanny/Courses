package visitors;
import types.*;
import java.util.concurrent.ArrayBlockingQueue;
/** 
* @module BreadthFirstVisitor.java
* @version 1.0 
* @since 2013-04-30
* @author Jimmy Lin (u5223173) - u5223173@uds.anu.edu.au
* 
* Edited by MacVim
* Class Info auto-generated by Snippet 
*/
public class BreadthFirstVisitor implements Visitor {

    private String result = "";
    public String getResult() { return this.result; }

    // generic usage for queue. 
    public ArrayBlockingQueue<Expression> queue = new ArrayBlockingQueue<Expression> (300);

    // empty constructor
    public BreadthFirstVisitor () {}

    public void visitConstant (Constant constant) {
        // display its identification on the result
        this.result += " " + constant.toString() + " ";
        
        // for constant, since it has no further expansion
        // queue shall give no offer to its subnode becasue
        // it do not have subnode..

        // directly poll the head expression in the queue
        // and visit it.
        Expression temp = this.queue.poll();
        if (temp != null) {
            temp.accept(this);
        }
    }

    public void visitMultiplication (Multiplication mult) {
        // display its identification on the result
        this.result += " * ";

        // breadth first search: queue should give offer
        // to subnode of currently visiting node.. And
        // after visiting this level of node, then visit
        // all those "subnodes".
        this.queue.offer(mult.getLeft());
        this.queue.offer(mult.getRight());

        // poll the next head expression in the queue and
        // visit it.
        Expression temp = this.queue.poll();
        if (temp != null) { 
            temp.accept(this);
        }
    }

    public void visitAddition (Addition add) {
        // display its identification on the result
        this.result += " + ";

        // give offer to expand the queue
        this.queue.offer(add.getLeft());
        this.queue.offer(add.getRight());
        // poll the enxt head expression and visit it
        Expression temp = this.queue.poll();
        if (temp != null) {
            temp.accept(this);
        }
    }
}

