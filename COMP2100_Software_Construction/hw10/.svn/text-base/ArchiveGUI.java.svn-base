import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.filechooser.*;
/** 
* @module ArchiveGUI.java
* @version 1.0 
* @since 2013-05-07
* @author Jimmy Lin (u5223173) - u5223173@uds.anu.edu.au
* 
* Edited by MacVim
* Class Info auto-generated by Snippet 
*/
class ArchiveGUI {

    public static void main (String [] args) {
        frameDisplay();
    }

    public static void frameDisplay() {
        // initialise the frame
        final JFrame frame = new JFrame ("ArchiveGUI");
        frame.setLocation(500,300);
        frame.setSize(new Dimension(600,450));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        Container contentPane = frame.getContentPane();
        // define for panel
        final JPanel mainPanel = new JPanel ();
        mainPanel.setVisible(true);
        mainPanel.setLayout(null);

        // Menu definition
        JMenuBar menubar = new JMenuBar ();
        JMenu archive = new JMenu ("Archive");
        JMenuItem create = new JMenuItem ("Create");
        JMenu extract = new JMenu ("Extract");
        JMenuItem withoutToC = new JMenuItem ("withoutToC");
        JMenuItem withToC = new JMenuItem ("withToC");
        JMenuItem tableOfContentOnly = new JMenuItem ("tableOfContentOnly");
        JMenuItem exit = new JMenuItem ("Exit");
        // Menu hierarchy
        extract.add(withToC);
        extract.add(withoutToC);
        archive.add(create);
        archive.add(extract);
        archive.add(tableOfContentOnly);
        archive.add(exit);
        menubar.add(archive);

        // verbose selective option
        final JCheckBox verboseOption = new JCheckBox("Verbose");
        verboseOption.setBounds(50,25,100,50);
        verboseOption.setMnemonic(KeyEvent.VK_C); 
        verboseOption.setSelected(false);

        // text area for output display
        final JTextArea toCTextArea = new JTextArea (1000,70);
        toCTextArea.setEditable(false);
        // scroll pane for the text area
        final JScrollPane toCTextScrollPane = new JScrollPane(toCTextArea);
        toCTextScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        toCTextScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        toCTextScrollPane.setVisible(true);
        toCTextScrollPane.setBounds(300,30, 250, 340);

        archive arc = new archive();

        // definition for all kinds of action response
        class CreateAction implements ActionListener {
            public void actionPerformed (ActionEvent event) {
                archive arc = new archive();
                String resultedArchive = chooseDirectory() + "/ArchiveResult.txt";
                String [] filename = chooseMultipleFile();
                String [] args = new String [filename.length + 2];
                args[0] = "-c";
                args[1] = resultedArchive;
                for (int i = 0 ; i < filename.length ; i ++ ){
                    args[i+2] = filename[i];
                }
                arc.main(args);
                toCTextArea.setText(arc.displayedStr);
                showErrorDialog(arc);
            }
        }
        // action when extract without to C is chosen
        class ExtractWithoutToCAction implements ActionListener {
            public void actionPerformed (ActionEvent event) {
                archive arc = new archive();
                String filename = chooseSingleFile();
                if (verboseOption.isSelected()) {
                    // extract and verbose
                    String [] args = new String [3] ;
                    args[0] = "-x"; // extract
                    args[1] = filename;
                    args[2] = "-v"; // verbose
                    arc.main(args);
                } else { // extract only
                    String [] args = new String [2] ;
                    args[0] = "-x"; // extract
                    args[1] = filename;
                    arc.main(args);
                }
                showErrorDialog(arc);
                arc.errorStr = null;
            }
        }
        // action when extract with to C is chosen
        class ExtractWithToCAction implements ActionListener {
            public void actionPerformed (ActionEvent event) {
                archive arc = new archive();
                String filename = chooseSingleFile();
                if (verboseOption.isSelected()) {
                    String [] args = new String [4] ;
                    args[0] = "-x"; // extract
                    args[1] = filename;
                    args[2] = "-v"; // verbose
                    args[3] = "-t"; // to see
                    arc.main(args);
                    toCTextArea.setText(arc.displayedStr);
                    showInformationDialog(arc);
                } else {
                    String [] args = new String [3] ;
                    args[0] = "-x"; // extract
                    args[1] = filename;
                    args[2] = "-t"; // to see
                    arc.main(args);
                    toCTextArea.setText(arc.displayedStr);
                }
                showErrorDialog(arc);
                arc.errorStr = null;
                arc.displayedStr = "";
            }
        }
        // table of content display 
        class TableOfContentDisplayAction implements ActionListener {
            public void actionPerformed (ActionEvent event) {
                archive arc = new archive();
                String filename = chooseSingleFile();
                // if verbose button is pressed.
                if (verboseOption.isSelected()) {
                    String [] args = new String [3] ;
                    args[0] = filename;
                    args[1] = "-v"; // verbose
                    args[2] = "-t"; // to see
                    arc.main(args);
                    toCTextArea.setText(arc.displayedStr);
                    showInformationDialog(arc);
                } else { // if not verbose 
                    String [] args = new String [2] ;
                    args[0] = filename;
                    args[1] = "-t"; // to see
                    arc.main(args);
                    toCTextArea.setText(arc.displayedStr);
                }
                showErrorDialog(arc);
                arc.errorStr = null;
                arc.displayedStr = "";
            }
        }
        // exit the program.
        class ExitProgram implements ActionListener {
            public void actionPerformed (ActionEvent event){
                frame.dispose();
                System.exit(0);
            }
        }
        // add action listener to each button
        create.addActionListener(new CreateAction());
        withoutToC.addActionListener(new ExtractWithoutToCAction());
        withToC.addActionListener(new ExtractWithToCAction());
        tableOfContentOnly.addActionListener(new TableOfContentDisplayAction());
        exit.addActionListener(new ExitProgram());
        // add to main panel
        mainPanel.add(verboseOption);
        //mainPanel.add(toCTextArea);
        mainPanel.add(toCTextScrollPane);
        contentPane.add(mainPanel);
        frame.setJMenuBar(menubar);
        frame.setResizable(false);
        frame.setVisible(true);
    }

    // function to choose directory for creating a new achieve
    public static String chooseDirectory() {
        JFileChooser chooser = new JFileChooser(new File ("../"));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle("Choose directory to place the resulted archive");
        String dirPath = null;
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File chosenFile = chooser.getSelectedFile();
            dirPath = chosenFile.getPath();
            System.out.println("You chose to open this directory: " + dirPath);
        }
        else if (returnVal == JFileChooser.CANCEL_OPTION) {
            System.out.println("Empty input.. Please choose a file next time..");

        } else if (returnVal == JFileChooser.ERROR_OPTION) {
            System.out.println("File Selection Error.. Please select again..");
        }
        return dirPath;
    }
    // choose a single file for creating or others.
    public static String chooseSingleFile() {
        String filename = "";
        JFileChooser chooser = new JFileChooser(
                new File ("../")); // set default directory
        chooser.setDialogTitle("Open a local archive file");
        chooser.setMultiSelectionEnabled(false);
        for (boolean error = true; error ; ) {
            int returnVal = chooser.showOpenDialog(null);
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                File chosenFile = chooser.getSelectedFile();
                filename = chosenFile.getPath();
                System.out.println("You chose to open this file: " + filename);
                error = false;
            }
            else if (returnVal == JFileChooser.CANCEL_OPTION) {
                System.out.println("Empty input.. Please choose a file next time..");
                error = false;

            } else if (returnVal == JFileChooser.ERROR_OPTION) {
                error = true;
                System.out.println("File Selection Error.. Please select again..");
            }
        }

        return filename;
    }

    // choose multiple files for creating command
    public static String [] chooseMultipleFile() {
        String [] filename = new String [0];
        JFileChooser chooser = new JFileChooser("../"); // set default directory
        chooser.setDialogTitle("Choose multiple trunks file");
        chooser.setMultiSelectionEnabled(true);
        for (boolean error = true; error ; ) {
            int returnVal = chooser.showOpenDialog(null);
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                File [] chosenFile = chooser.getSelectedFiles();
                int numOfFiles = chosenFile.length;
                filename = new String [numOfFiles];
                for (int i = 0; i < numOfFiles; i ++){
                    filename[i] = chosenFile[i].getPath();
                    System.out.println("You chose to open this file: " + filename[i]);
                } 
                error = false;
            }
            else if (returnVal == JFileChooser.CANCEL_OPTION) {
                System.out.println("Empty input.. Please choose a file next time..");
                error = false;

            } else if (returnVal == JFileChooser.ERROR_OPTION) {
                error = true;
                System.out.println("File Selection Error.. Please select again..");
            }
        }
        return filename;
    }

    public static void showInformationDialog(archive arc) {
        if (arc.displayedStr == null) return;
        else {
            JOptionPane.showMessageDialog(null, arc.displayedStr,
                    "Result", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    public static void showErrorDialog(archive arc) {
        if (arc.errorStr == null) return ;
        else {
            JOptionPane.showMessageDialog(null, arc.errorStr,
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }
}
