''' 
    Filename:   EM.py    
    Version:    1.0
    Since:      2013-04-23
    Author: 
        Jimmy Lin (u5223173) - u5223173@uds.anu.edu.au
        
    Edited by MacVim
    Documentation auto-generated by Snippet 
'''
import pylab as pl;
#Gaussian function
def gauss_function(x, mean, sigma):
    ## mean must input as array numpy.ndarray
    assert type(mean) = pl.ndarray
    dimension = mean.shape()[0]
    assert sigma.shape()[0] == dimension
    assert sigma.shape()[1] == dimension
    return (2*pl.pi)**(-dimension) * pl.exp(-(x-mean)**2/(2*sigma**2))

class SupervisedLearning():

    def __init__(self):
        return 
    
class ExpecationMaximization():
    def __init__(self):
        return

def classMapping(flowerName):
    '''
     map the string-valued target variable to be
    numerical representation
    '''
#{{{
    if flowerName == "Iris-setosa":
        return 0
    elif flowerName == "Iris-versicolor":
        return 1
    elif flowerName == "Iris-virginica":
        return 2
    else :
        print "Flower Name Exception: unknown flower"
        return -1
#}}}

def readMatrix(filePath):
#{{{
    ## Exception handling for file opening
    try:
        IrisFile = open(filePath)
    except:
        print "Iris Data IO error, please check your input path"
    
    ## read in raw string, and store in temporary matrix (string only)
    tempList = []
    for tempStr in IrisFile: # read each line of IrisData
        tempStr = tempStr.replace("\n","")
        tempList.append( tempStr.split(",") )

    ## now convert string to numeric value and store in another matrix IrisData
    Data = []
    for row in range(0,len(tempList)):
        temp = []
        if len(tempList[row]) < 5: ## encounter empty line
            break
        ## 0-3 features need direct conversion
        for col in range(0,4): 
            temp.append( float( tempList[row][col] ) )
        ## 4th feature need particular mapping
        temp.append( classMapping( tempList[row][4] ) )
        Data.append( temp )
#}}}
    return pl.asarray(Data)

def main():
    ## Data import to memory
    IrisDataFile = "./bezdekIris.data.txt"
    IrisData = readMatrix( IrisDataFile)
    
    print type(IrisData)


main()
