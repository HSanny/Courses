''' 
    Filename:   Gaussian.py    
    Version:    1.4
    Since:      2013-05-02
    Author: 
        Jimmy Lin (u5223173) - u5223173@uds.anu.edu.au
        
    Edited by MacVim
    Documentation auto-generated by Snippet 
'''
import numpy as np
import math
import random
class Gaussian():
    def __init__(self, label, dimensions):
        '''
        parameter:
            - mu, mean vector of gaussian 
            - sigma, covariance matrix of gaussian
        '''
        self.dimensions = dimensions
        self.mu = np.zeros((dimensions,1))
        self.sigma = np.zeros((dimensions, dimensions))
        self.label = label
        self.MU_FORMAT = "{0:.8f}"
        self.SIGMA_FORMAT = "{0:.8f}"

    def setIdentifiers(self, label):
        ## class label, used for markup
        self.label = label
        return

    def getLabel(self):
        return self.label 

    def initialise(self, MAXmu = None, MINmu = None):
        '''
        Randomly set the parameter of gaussian distribution 
        '''
        if MAXmu is None:
            MAXmu = np.ones((self.dimensions, 1))
        if MINmu is None:
            MINmu = np.zeros((self.dimensions, 1))
        scale = np.subtract(MAXmu, MINmu)
        self.mu = np.add( np.multiply( np.random.rand(self.dimensions), scale), MINmu)
        self.mu = self.mu.reshape((self.dimensions, 1))
        self.sigma = np.dot(2*random.random(), np.identity(self.dimensions))

        return 

    def evaluate(self, x):
        '''
        Given the argument x, return the result of gaussian function taken this input
        '''
        assert x.shape == self.mu.shape
        sqrt2PiPower = math.pow(2*math.pi, self.dimensions / 2.0) 
        sqrtDetSigma = math.pow(np.linalg.det(self.sigma), 0.5)
        if (sqrt2PiPower * sqrtDetSigma) == 0:
            coefficient = 1.0 / 1e-10
        else :
            coefficient = 1.0 / (sqrt2PiPower * sqrtDetSigma)
        diffXMu = np.subtract(x, self.mu)
        diffXMu = diffXMu.reshape(x.shape[0], 1) ## convert it to be 1-d matrix 
        quadratic = np.dot( np.dot(np.transpose(diffXMu), np.linalg.inv(self.sigma)), diffXMu)[0,0]
        exponent = np.exp(-0.5 * quadratic)
        result = coefficient * exponent
        '''
        print "diff:" + str(diffXMu)
        print "sigma: " + str(np.linalg.det(self.sigma))
        print self.sigma
        print "sqrt2PiPower: " + str(sqrt2PiPower)
        print "sqrtDetSigma: " + str(sqrtDetSigma)
        print "coefficient: " + str(coefficient)
        print "quadratic: " + str(quadratic) 
        print "exponent: " + str(exponent)
        print "result: " + str(result)
        assert exponent <= 1
        assert result <= 1.0
        '''
        return float(result)

    def fitParameters(self, data):
        #print data
        patterns = data[:,0:self.dimensions]
        self.mu = np.mean(patterns, axis = 0)
        self.sigma = np.cov(np.transpose(patterns))
        return

    def showMuInTex(self):
        string = "\\begin{align} \\bs{\\mu}_{" + str(int(self.getLabel())) + "}"
        string += " = \\begin{pmatrix} \n"
        sizeOfMu = self.mu.shape[0]
        if len(self.mu.shape) == 1:
            self.mu = np.reshape(self.mu, (self.dimensions, 1))
        print self.mu
        for i in range(0, sizeOfMu):
            string += str.format(self.MU_FORMAT, self.mu[i,0])
            if i < sizeOfMu - 1:
                string +=  " & "
            else:
                string += " \n " 
        string += "\\end{pmatrix}  \\end{align} "
        print string

    def showSigmaInTex(self):
        string = "\\begin{align} \\bs{\\Sigma}_{" + str(int(self.getLabel())) + "}"
        string += "\\begin{pmatrix} \n"
        numOfRows = self.sigma.shape[0]
        numOfColumns = self.sigma.shape[1]
        for i in range(0, numOfRows):
            for j in range(0, numOfColumns):
                string += str.format(self.SIGMA_FORMAT, self.sigma[i,j])
                if j < numOfColumns - 1:
                    string +=  " & "
                else:
                    string +=  " \\\\ \n"
        string += "\\end{pmatrix} \\end{align}"
        print string
