''' 
    Filename:   Supervised.py    
    Version:    1.3
    Since:      2013-04-26
    Author: 
        Jimmy Lin (u5223173) - u5223173@uds.anu.edu.au
        
    Edited by MacVim
    Documentation auto-generated by Snippet 
'''
import argparse
import numpy as np
import math
import sys, getopt
## self-defined modules
import Gaussian as gau 
import CrossValidation as crvd
def classMapping(flowerName):
    '''
     map the string-valued target variable to be
    numerical representation
    '''
#{{{
    if flowerName == "Iris-setosa":
        return 0
    elif flowerName == "Iris-versicolor":
        return 1
    elif flowerName == "Iris-virginica":
        return 2
    else :
        print "Flower Name Exception: unknown flower"
        return -1
#}}}

def readMatrix(filePath):
#{{{
    ## Exception handling for file opening
    try:
        IrisFile = open(filePath)
    except:
        print "Iris Data IO error, please check your input path"
    
    ## read in raw string, and store in temporary matrix (string only)
    tempList = []
    for tempStr in IrisFile: # read each line of IrisData
        tempStr = tempStr.replace("\n","")
        tempList.append( tempStr.split(",") )
    #printMatrix(tempList)

    ## now convert string to numeric value and store in another matrix IrisData
    Data = []
    for row in range(0,len(tempList)):
        temp = []
        if len(tempList[row]) < 5: ## encounter empty line
            break
        ## 0-3 features need direct conversion
        for col in range(0,4): 
            temp.append( float( tempList[row][col] ) )
        ## 4th feature need particular mapping
        temp.append( classMapping( tempList[row][4] ) )
        Data.append( temp )
    #printMatrix(IrisData)
    IrisFile.close()
#}}}
    return Data

def getSolution_5_a_1(IrisData, fold, patternDimension, labelIndex, FlowerDict):
    ## 10-fold cross validation
    errorRateList, gaussianMatrix = crvd.crossValidate(IrisData, fold, patternDimension, labelIndex)
    sizeOfErrorList = len(errorRateList)
    numOfGroup = len(gaussianMatrix)
    numOfGaussianEachGroup = len(gaussianMatrix[0])
    assert sizeOfErrorList == numOfGroup

    ## first print overall error
    averageErrorRate = sum(errorRateList) / len(errorRateList)
    string = str.format("errorRate: {0:.4f}%", averageErrorRate*100)
    string += "\n ["
    ## now print parameters of each data
    for i in range(0, numOfGroup):
        print
        print "Cross Validation Set " + str(i + 1) + ": \\\\" 
        print "\htab Error of this Testing Set: " + str.format("${0:.2f}\%$ \n", errorRateList[i]*100)
        gaussians = gaussianMatrix[i]
        for j in range(0, numOfGaussianEachGroup):
            tempGaussian = gaussians[j]
            print "\\textbf{For class " + FlowerDict.get(tempGaussian.getLabel()) + "}:"
            tempGaussian.showMuInTex()
            print "\\vspace{-1cm}"
            tempGaussian.showSigmaInTex()
            print
        if (i+1) % 2 == 0 :
            print "\\newpage"
    ## overall summary for error
    for i in range(0, numOfGroup):
        tempError = errorRateList[i]
        string += " " + str.format("{0:.3f}%", tempError*100) + ","
    string += "] \n"
    print string

def main():
    DESCRIPTION = "Supervised Learning for three 4-D gaussian distribution."
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('-i', metavar='infile', action='store', type=str, dest='infile', \
                        default='./Iris.txt' ,help='Path of input data file. Default: ./Iris.txt')
    parser.add_argument('-f', metavar='numOfFeatures', type=int, dest='numOfFeatures',\
                        default=4, help='Number of features in each data object. Default: 4')
    parser.add_argument('-c', metavar='CV fold', type=int, dest='numOfFolds',\
                        default=10, help='Fold Number of Cross Validation. Default: 10')
    parser.add_argument('-l', metavar='Col Index of Labels', type=int, nargs='?', dest='labelIndex',\
                        default=-1, help='Column Index of labels in the input data. default: -1')
    ## parse arguments
    args = parser.parse_args()
    infile = args.infile
    numOfFeatures = args.numOfFeatures
    numOfFolds = args.numOfFolds
    labelIndex = args.labelIndex

    ## Data import to memory
    IrisData = readMatrix(infile)
    IrisData = np.asarray(IrisData)
    ## refine the generability
    patterns = IrisData[:,0:4]
    labels = IrisData[:,-1]

    FlowerDict = {0:"Iris-setosa", 1:"Iris-versicolor", 2:"Iris-virginica"}
    getSolution_5_a_1(IrisData, numOfFolds, numOfFeatures, -1, FlowerDict)

if __name__ == "__main__":
    main()
