#!/usr/bin/python2.7
''' 
    Filename:   lab01.py    
    Version:    1.0
    Since:      2013-02-28
    Author: 
        Jimmy Lin (u5223173) - u5223173@uds.anu.edu.au
        
    Edited by MacVim
    Documentation auto-generated by Snippet 
'''

import math
import numpy as np
import random
def frobenius_norm(A):
    x = np.matrix([[1,2],[3,4]])
    if type(A) == type(x):
        pass
    else:
        print "Input error, not array.."
        return
    matrix = A.T * A 
    tr = np.trace(matrix)
    return math.sqrt(tr)

def examine_diagonal(Mat, row, col):
    '''
        Mat is the matrix gonna be examined 
        row is required number of rows
        col is required number of cols
    '''
    if Mat.shape[0] == row and Mat.shape[1] == col:
        pass
    else:
        return False
    
    for i in range(0,row):
        for j in range(j,col):
            if j == i: 
                if Mat[i,j] != 0:
                    continue
                else:
                    return False
            elif j != i:
                if Mat[i,j] == 0:
                    continue
                else:
                    return False
    return True


def cost_function_in_matrix(X,mu=1,C=None,N=None):
    ## C should be symmetric
    if C is None:
        C = np.identity(X.T.shape[1])
    else:
        examine_symmetry(C,C.T.shape[0],C.T.shape[1])
    print C
    ## N should be diagonal and entries are non-negative
    if N is None:
        N = np.identity(X.T.shape[0])
        for i in range(0,N.shape[0]):
            N[i,i] = 10* random.random()
    else:
        examine_diagonal(N, N.shape[0],N.shape[1])
    print "N"
    print N
    prod = np.trace(X.T * C * X * N) + 0.25*mu*frobenius_norm(N - X.T * X)**2 
    return prod

if __name__ == "__main__":
    A = np.matrix(" 1 2; 3 4 ")
    fn = frobenius_norm(A)
    print fn
    X = np.matrix(" 1 2 3 5 6; 4 5 6 7 8; 7 8 9 1 2; 15 14 10 11 12 ; -1 -2 -3 -4 -5")
    costfunc = cost_function_in_matrix(X)
    print costfunc
