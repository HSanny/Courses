Name: Jeremy Bouzigard
EID: jdb2999
CS Login: jeremy
Email: jbouzigard@gmail.com

CS361 Questions Week 1

Lecture 1
1. "Security" is relevant to my everday life, particularly personal security such as in the controlled access gates of my apartment or the passwords I use to protect information online. I'm impacted by other types of security as well, like walking through metal detectors at airports.
2. In all of these cases, there are some kinds of assets being protected against some sorts of threats.
3. Yes! Several years ago, I left an iPod in an unlocked car and it was stolen.
4. I think it is probably at average risk. I decided this because I'm generally careful about the places I visit, but don't employ any anti-virus software.
5. As stated above, I don't use any anti-virus software. I do keep my computer up-to-date and try to be wary of my activities online.
6. I think they provide some, but not total protection. There are other measures I could take to lower my risk, but there are also types of threats I can do little to defend against.
7. I do not think the risk is overstated because of how interconnected many regional and national systems are as well as how many people are dependent on them. An interuption in the energy grid of just one major city, for example, would directly affect millions and incite fear in hundreds of millions elsewhere. In another case, unauthorized access and use of military assets would create an entirely different, but equally dangerous type of threat.
8. Learning about computer security is important because computer systems are everywhere and almost all connected. The dangers of computer security breaches can affect not just computer scientists or corporations, but anyone. One recent example of this is the massive breach in customer data at Target.

Lecture 2
1. One example of an additional factor is limited resources. Depending on the product, a company or organization may dedicate the majority of their resources to developing the software's main features, leaving those in charge of security with less time, staff, and money. A second additional factor may be the need to keep software updated. With every software update, there is the risk of new and unexpected vulnerabilities being introduced.
2. It is possible to systematically approach the risk of security threats, but there is no way to systematically enumerate all "bad things" because, as the quote in the lecture says, the best threats are the ones the developers never thought of. It is difficult to enumerate the countless ways that an individual may interact with any given software.
3. The attacker needs to find only one exploit, but the defender must protect against all possible exploits. Basically, the defender has to do the same amount of work as an infinite number of attackers.
4. I agree because the idea of anything being perfectly secure is unrealistic. There is no way to account for every single possible threat and still end up with a useable piece of software.
5. The idea is that there must be a balance between useability and security. In order to achieve perfect security, a program would have to be so restrictive as to lose all useability, defeating the purpose of its existence. The trick is to find a balance between the two.

Lecture 3
1. In the context of computer security, risk is the possibility that a particular threat will adversely impact an information system by exploiting a particular vulnerability. More generally, it is this possibility that a particular threat will adversely impact something.
2. Yes. Because perfect security is impossible, any program is necessarily accepting risk. The idea, then, is to manage risks such that the likelihood of your program being adversely impacted is minimized.
3. A risk you accept is eating tasty, but unhealthy food at the cost of possible health problems. You choose to avoid the risk of lung cancer by choosing not to smoke cigarettes. You mitigate the risk of health problems by regularly exercising. You transfer the risk of financial debt if you do get sick by purchasing health insurance.
4. I think it is a good risk management tool because it takes into consideration both the cost and the frequency of a risk. The unintuitive results suggests it may be unwise to adhere strictly to ALE and nothing else, but I think it does a good job of putting risks into perspective.
5. Some factors include the frequency that something bad happens, the cost that something bad happens, the cost of preventing something bad from happening, and the cost of mitigating or repairing something bad that happened.

Lecture 4
1. The list on slide 2 are aspects of computer security, goals for a system to achieve. The list on slide 3 are common tools and mechanisms used to achieve those aspects.
2. I think integrity is most important to my life. As a student, I may not want someone else seeing the work I do on a computer, but what is much more worrisome is the possibility of someone being able to maliciously modify work that must be turned in.
3. To "group and categorize" data is a lot like evaluating risk. Because resources are always limited, it is helpful to group and categorize data to determine where resources are best spent and where they are perhaps less necessary.
4. Authorizations might change over time because teams, workforces, customers, and users of any kind are all dynamic. It may be important for someone to have access to data today but unecessary for them to have access tomorrow.For instance, it may be important for an acting general to have access to the war plans, but maintaining this access after he is retired creates an unecessary channel that may be exploited.
5. Availability depends upon reliability. A system cannot achieve availability unless the mechanisms by which availability is achieved are themselves reliable. 
6. One example online retailers. In terms of authorization, it is important that they verify a customer is who he/she claims to be so a product is not charged or shipped to the wrong person. Similarly, non-repudiation is important to the customer so that the retailer cannot claim to have not received payment for after that customer has already paid.

Lecture 5
1. Availability is important to a cell phone network, so the metapolicy may be something like: "Ensure the network is always available for customers." Confidentiality is important for a military database, so the metapolicy may be something like: "Protect the confidentiality of data in the database."
2. The metapolicy may be too general or subjective, so a policy is necessary for consistent implementation of the metapolicy.
3. 1) A student's academic record can only be acced by a student if the student logs in with the correct username/password, 2) A student's academic transcript can only be released if the student signs a request in person, 3) All university monitors displaying a student's academic record must not face a window
4. Yes. In the example of a student's grades, the student may actually want to change their own grades, but the university wants to make sure the student cannot change their grades.
5. A likely metapolicy: Protect the confidentiality of all student Social Security numbers.
6. The idea is that policies exist only to implement the metapolicy, so if you do not understand the metapolicy then it is difficult to abstractly appreciate the policies because they seemingly have no reason.

Lecture 6
1. Military security is mainly about confidentiality because a military's inherent purpose is to "combat a country's threats." Thus, it is important that those threats not be able to predict the country's offensive tactics to or undermine the country's defenses. However, there are still aspects of integrity and availability. For instance, it's important that the integrity not be violated and the war plans changed maliciously or corrupted. With regard to availability, it's important that those plans are available when the time comes to act on them.
2. The major threat is the threat that confidentiality will be violated and someone who should not have access to a piece of information will manage to gain access.
3. The proviso is there because MLS is used to implement confidentiality only, meaning it does not concern itself with integrity or availability even if the policy results in a clear breach of either.
4. There is a hierarchical component saying that people must be trusted to a given sensitivity level to gain access to the information, and a "need-to-know" categorical component that stipulates only individuals with access to all categories of the document are able to gain access to the information.
5. How the labels get there is beyond the scope of protecting the confidentiality of the documents.
6.
  1) The cafeteria is serving chopped beef on toast today. / The base softball team has a game tomorrow at 3pm.
  2) Col. Jones just got a raise / Col. Smith didn't get a raise.
  3) The British have broken the German Enigma codes.
  4) The Normandy invasion is scheduled for June 6.
7. 
  Unclassified: The cafeteria is serving chopped beef on toast today. / The base softball team has a game tomorrow at 3pm.
  Confidential, {Personnel}: Col. Jones just got a raise. / Col. Smith didn't get a raise.
  Secret, {Crypto}:  The British have broken the German Enigma codes.
  Top Secret, {War Plans}: The Normandy invasion is scheduled for June 6.
8. The hierarchical component is obvious and refers to how sensitive and how well-trusted an individual must be to access a document. The "need-to-know" component is important because it restricts the flow of information to the absolute minimum, minimizing the risk of a security breach.

Lecture 7
1. Labels may be affixed to humans by an ID card, by passwords, or other means.
2. The label for a document refers to the sensitivity of the information it contains and the category to which the information belongs. The label for humans refers to the level of sensitivity an individual is trusted with and what categories of information the individual needs-to-know to perform their job.
3. File folders are analogous to documents and usernames/user IDs/logins are analagous to humans.
4. The idea makes sense because it minimizes the risk of security leaks. There is nothing gained if any subject has access to more information than is necessary to do their job, so it creates an unecessary risk/channel by which information may be leaked.
5. 1) Makes sense because subject trusted with secret information is also trusted with confidential information and the subjected is designated as needing to know Crypto information, which is all the document contains, 2) Makes sense because a subject trusted with secret information is not trusted with top secret information, 3) Makes sense because everyone has access to unclassified information

Lecture 8
1. The vocabulary was introduced to be able to think of the system more abstractly, beyond the small thought experiment.
2. Dominates is reflexive because a label dominates any other label that is exactly the same as itself. It is antisymmetric because if label x dominates label y, then label y cannot dominate label x. It is transitive because if a label x dominates y and label y dominates label z, then then every path through label z also first goes through label x and label y.
3. Dominates is not total order because there are security labels A and B such that either A dominates B nor B dominates A. For instance, Secret: {Crypto} and Secret {Nuclear} -- neither dominates the other.
4. The two labels must also be equal to each other.
5. The Simple Security property says that a subject must dominate an object, meaning the subject's hierarchical level is greater than or equal to the object's and the subject's categories are a superset of the object's categories, to gain read access.
6. It's "only if" and not "if and only if" because Simple Security is necessary to gain read access, but not always sufficient. There may be other barriers preventing a subject from gaining read access to an object.

Lecture 9
1. Simple Security is not enough to ensure confidentiality because Simple Security alone does not restrain a subject from writing information at the subject's clearance level down to object's below that level.
2. Constraints on write access are necessary to prevent a subject from writing an object's information down to levels below the object's level.
3. Because the subject is not restricted to just the human, whom we trust, but all the processes (possibly malicious) that are running on the human's behalf.
4. The *-Property says that a subject may only write to objects of greater or equal level as the human's own level. In other words, a subject can only write to objects that the subject is dominated by.
5. The subject and the object must be at the same level.
6. It may be possible to solve this problem by introducing a policy to change an object's label.
7. It is possible to maintain the *-Property and achieve this goal by adding another barrier/policy to write access.

Lecture 10
1. In light of weak tranquility, changing a subject's level up or down must not violate the "spirit" of Simple Security and the *-Property. This means that a subjects level should only be changed if doing so does not cause information that "should" be restricted to certain level from flowing to a lower one. One way to achieve this is by introducing a special downgraded trusted subject, who can review an object's contents before it is downgraded.
2. Because this reintroduces/does not address the earlier problem wherein a general cannot send orders to his soldiers.
3. Lowering the level of an object may be dangerous because information that was previously only available to a subjects of a certain level of sensitivity is now available to subjects of a lower one.
4. A downgrade is secure only if the object's contents are in some way reviewed to ensure that inapropriate information is not leaked.

Lecture 11
1. You could create an access control policy that implements BLP with strong tranquility. All subjects (readers) are assigned a level above (that is, they dominate) all objects (books). In this way, every reader can read all books but write to none of them.
2. Because the matrix would likely be very large, creating a lot of work for something that can easily be calculated for any subject-object combination by applying Simple Security and the *-Property.

Lecture 12
1.

   (H, {A})
   ^      ^
   |      |
   |      |
   |     (H, {})
   |      ^
   |      |
(L, {A})  |
   ^      |
   |      |
   |      |
    (L, {})

* Does not include reflexive or transitive arrows
2. Given any two labels, the LUB is the label that dominates the other and the GLB is the label that is dominated by other.
3. Upward flow in the lattice is the metapolicy for BLP because its a mechanism for achieving confidentiality. By constraining the flow of information such that it only moves upward, a subject can never access information from a higher level/label.

Lecture 13
1. In the example on slide 1, Simple Security ensures that L cannot read from H and by the *-Property H cannot write to L. Together, these systems implement the mtapolicy of BLP that information can only flow upward in a system.
2. The READ operation satisfies BLP because it satisfies the Simple Security restraint on read operations. In other words, subjects can only read objects at their level or lower. 
The WRITE operation satisfies BLP because it satisfies the *-Property restraint on write operations. In other words, a subject can only write to an object of their own level or higher.
3. The CREATE operation satisfies BLP because it maintains the upward-only flow of information. That is, a subject can only create (write) an object at its own level, which satisfies the *-Property.
The DESTROY operation satisfies BLP because it maintains the upward-only flow of information. That is, a subject can only destroy (write) an object at its own level or higher, which satisfies the *-Property.
4. SL must always do the same thing in both columns because the trick is to repeat and check for varing results depending on the varying actions by SH. Likewise, SH's actions must vary.
5. The DESTROY statement is there because SL cannot learn anything without acting on the same state. So if SL did create F0, it needs to destroy it so the process can start from the same point on the next pass.
6. The contents are the same in both paths.
7. SL does the same thing in both cases because the trick is to repeat and check for varing results depending on the varying actions by SH. Yes, SL must do the same thing both times.
8. SH does different things because variance in its actions affects the information that SL receives. Yes, SH must vary its actions otherwise for SH to get different information.
9. The metapolicy of BLP is that information can only flow upwards. However, as the example demonstrates, SL is able to pull down information about the state above its own level. Because information flows down in this system, the system is in violation of the metapolicy.

Lecture 14
1. This is not a covert channel because by definition the flow of information of a covert channel is between subjects within the system. "Two people talking over coffee" is outside the system.
2. No, because because the flow of information here is being sent directly from the object F0. This is in violation of the policy (and metapolicy), but not a covert channel.
3. The bit of information transmitted "resides" in storage channel (storage of system state). 
4. The information transmitted "resides" in a timing channel, the amount of time a computation takes.
5. The information transmitted "resides" in elements of both timing and storage channels. This is because information is transmitted about both information within the system state and timing because it depends on the amount of time a computation takes.
6. This is an implicit channel because information flows through the control structure of the program.
7. This channel might have low bandwidth because the information flowing through it is inherently binary -- either the computation terminated or it did not computation.
8. The low level process must be able to sense the amount of power consumed and the amount of power consumed must be affected by the high level process.
9. Smartcards, or other instances in which energy is supplied by a host computer.

Lecture 15
1.Even though they have low bandwidth, covert channels on real processors operate at thousands of bits per second with no appreciable impact on system processing.
2. There are several reasons why it is infeasible to eliminate every potential covert channel. Eliminating the channel might result in the loss of functionality, the channel may be hardware-related and difficult to remove, eliminating one may 
likely create another, or many other reasons.
3. If detected, one should identify the characteristics of a channel, including its bandwidth and how noisy it is. This information can then be used to decide whether to eliminate channel, reduce bandwidth, or monitor the channel.
4. A lower level process is not able to see if a higher level process created, modified, or destroyed a file, but is able to see the change in available disk space as a result of the higher level's actions.
5. The sender is able to modify the attribute (disk space) by, for instance, creating files of arbitrary size, and the receiver is able to monitor the change in available disk space. The two can communicate with each other by creating files of differing size at their respective levels.

Lecture 16
1. Because even though you know something about the system state after the "create" operation, the system did not tell you this. So a low-level process cannot use CREATE to get the information needed to carry out its part of a covert channel.
2. Because this says that for that attribute, there is a mechanism by which that attribute can be modified and a mechanism by which someone can reference the attribute.
3. No, because the R and the M in this case are referring to different attributes.
4. Because it gives a systematic way to search for covert channels, which otherwise would be very difficult to identify.
