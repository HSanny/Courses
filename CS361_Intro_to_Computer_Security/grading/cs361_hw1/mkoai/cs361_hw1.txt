Name: Mallory Koai
EID: MJK567
CS Login: mkoai
Email: mkoai@utexas.edu

Lecture 1

1. Some uses of the term “security” that are relevant to my everyday life are personal security, network security, and computer security.

2. Each instance of security has to do with protecting either my identity or assets against malicious attacks.

3. At one point, I did accumulate an embarrassingly high number of malwares on my laptop because I failed to install/activate the preventative software immediately after purchase. 

4. At present, it is probably not infected. I recently ran a scan and have been using my laptop sparingly since.

5. I installed Malwarebytes and am careful of what I download and which sites I browse.

6. Safe practice while browsing the internet is an effective preventative measure so long as I am always careful. Even then, new threats will slip through the cracks. Malwarebytes isn’t really as effective for prevention since it simply removes existing malware.

7. Leaking confidential, top-secret information (i.e. war plans, national secrets) to cyber-adversaries can severely cripple a nation’s reputation, thereby hurting foreign relations and the economy. This is a rather dire consequence, so I would say that the FBI official is not overstating the case.

8.  More people are connected to and have access to the internet, and more assets are being converted to digital data. Learning about computer security becomes a priority as we move further into the information age.

Lecture 2

1. Even if you’ve thought of every possible attack scenario, attackers are pondering new, more inventive ones every day. As technology advances, new tools also become available. It’s hard enough to account for every  possible vulnerability at a given point in time, but the possibility of new threats being formulated soon after deployment is very likely.

2. I don’t think there is a systematic way to enumerate the “bad things” that might happen to a program because there are too many possibilities.

3. The defender has to consider every possible vulnerability, whereas the attacker only needs to find and exploit one.

4. At this point, I’m inclined to agree with Morris and Chang. It’s near impossible to find and eliminate all exploitable vulnerabilities, and any determined attacker will find some way to breach security.

5. Implementing protective measures involves a tradeoff with other project goals such as functionality, usability, efficiency, and simplicity. This means that in order to practice precautionary methods, quality is sacrificed in another realm. For example, to ensure authentication of a user, a website such as www.amazon.com may ask the user to periodically provide their password. This may annoy the user somewhat, but it’s ultimately for the sake of security.

Lecture 3

1. According to the lecture slides, risk is “the possibility that a particular threat will adversely impact an information system by exploiting a particular vulnerability”.

2. I do think software security is ultimately about managing risk. It is impossible to consider and address every single vulnerability, so sometimes the best course of action is to cope with and mitigate the consequences.

3. 
Risk acceptance: I risk getting clawed to death by my cat, but I’d hazard that just for his company. 
Risk avoidance: I avoid staying out too late because buses eventually stop running, and I don’t have a car.
Risk mitigation: I occasionally leave my belongings unattended in the computer lab, but I always take my wallet and phone with me. If my things happen to get stolen, at least it’s just my dingy backpack and some poorly-written notes.
Risk transfer: Robberies are not prevalent in my neighborhood, but by living on the third (top) floor, I feel like I at least transfer some risk to neighbors who live on the lower levels.

4. Annualized loss expectancy (ALE) lists possible losses, their likelihood, and the potential cost for an average year. While it helps to funnel security efforts into an event with higher ALE, it is also worth looking at events that incur a significant amount of loss, despite a low incidence rate. Overall, the ALE provides a good overview.

5. Technical, economic, and psychological factors should also be considered when assessing risk.

Lecture 4

1. The list on slide 3 (cryptography, firewalls, passwords, etc) is comprised of mechanisms that are utilized in order to accomplish the higher-level security goals listed on slide 2 (confidentiality, integrity, availability, etc).

2. I lurk in the darkest corners of the internet and would prefer things such as my identity and browser history to remain known only to me. I also make online purchases frequently, divulging my credit card information in the process. Therefore, confidentiality is probably the most important security goal to me.

3. Grouping and categorizing data refers to sorting data by their permissions since not all data are equally sensitive. For example, a highly classified piece of information will probably want to be placed in a group with stricter permissions, separate from a group with more lax clearance.

4. If someone is promoted to a higher rank in their line of work, they may gain access to more sensitive information. Conversely, if someone is demoted, they may lose access. 

5. Availability refers to whether a resource is available when you need it, and reliability refers to a resource’s capacity to be available and its ability to withstand and recover from potential DoS attacks. Reliability is necessary to achieve availability.

6. Authentication can be important when transferring large sums of money: both parties want to ensure that the transaction is carried out between the right individuals (i.e. there is no middle man trying to impersonate either party). 

Non-repudiation would be important in a scenario where a purchase is made: the buyer could deny that he ever got an item and request a refund when he in fact did receive the item. Conversely, a seller could deny ever receiving payment and get paid twice.

Lecture 5

1. A possible metapolicy for a cell phone network is the users’ conversations and information should be kept private. A metapolicy for a military database would ensure that certain information is available only to parties with the proper authorization.

2. A policy is the set of rules necessary to actually implementing the overarching security goal stated by the metapolicy.

3. If the metapolicy concerning a student’s academic records is making sure the grades are visible only to the student and possibly the university (confidentiality) and cannot be altered by external parties, including the student (integrity), three possible rules might include:
    - restricting what a specific user can see depending on permissions
    - any modifications require first a password then a crosscheck with permissions
    - printed copies of a student’s records (e.g. transcript) must be authorized and concealed
    in an envelope with the university’s official seal to discourage tampering

4. If potential employers also want access to a student’s academic records electronically, then we might have to tweak the policy to allow for some means of channeling them to specific, legitimate parties.

5. For the example given involving student SSNs, ensuring confidentiality (i.e. authorized access to SSNs) is the likely metapolicy. 

6. It is important to understand the metapolicy because the subsequent policy is formulated/designed around the metapolicy. If the goal is unclear, it is difficult to choose the appropriate mechanisms to implement it.

Lecture 6

1. Military security involves information at different sensitivity levels and individuals with different levels of trustworthiness. Therefore, the primary objective in multi-level security is making sure certain information is only available to individuals with the proper clearance (confidentiality).
 
Integrity might be involved if we don’t want someone with lower permissions to modify top secret information. Availability becomes an issue if the information we are trying to access is not available.

2. The major threat in our MLS thought experiment is having an individual gain access to information that he or she is not authorized to view.

3. The proviso is in place because the policy we formulate protects confidentiality but would raise serious integrity issues if modification of information was also allowed.  

4. The object sensitivity labels are comprised of two parts: a hierarchical component from a linearly ordered set indicating sensitivity level (Unclassified, Confidential, Secret, Top Secret) and then a list of “need-to-know” categories expressing membership within some interest group (e.g. crypto, nuclear, etc). An example of a label might be: (Secret: {Nuclear, Crypto})

5. Our thought experiment’s purpose is to understand confidentiality via multi-level security. As long as the labels get onto the folders, this is sufficient for our thought experiment. HOW they get there is irrelevant.

6. 
a. Unclassified: The base softball team has a game tomorrow at 3pm.
b. Unclassified: The cafeteria is serving chopped beef on toast today.
c. Confidential: Col. Jones just got a raise.
d. Confidential: Col. Smith didn’t get a raise.
e. Secret: The British have broken the German Enigma codes.
f. Top Secret: The Normandy invasion is scheduled for June 6.

7.
a. (Unclassified: {Softball}) - The base softball team has a game tomorrow at 3pm.
b. (Unclassified: {Dining Hall}) - The cafeteria is serving chopped beef on toast today.
c. (Confidential: {Personnel}) - Col. Jones just got a raise.
d. (Confidential: {Personnel}) - Col. Smith didn’t get a raise.
e. (Secret: {Crypto}) - The British have broken the German Enigma codes.
f. (Top Secret: {War Plan}) - The Normandy invasion is scheduled for June 6.

8. If a document contains both Unclassified and Secret information, only an individual cleared for the highest appropriate level (i.e. Secret) may view the document. If someone is cleared up to Secret, by default, they have access to anything below it as well. Conversely, if someone cleared for only Unclassified is allowed to view a document with both Unclassified and Secret information, there would be an illegal read-up.

Lecture 7

1. Individuals might wear official badges that indicate rank or authorization level. 

2. Labeling documents indicates the type of information it contains, while labeling humans indicates level of trustworthiness. 

3. In computers, the analogues of documents might be files, folders, directories, etc. The humans would be the user with different access permissions (e.g. root versus regular account).

4. The Principle of Least Privilege makes sense because divulging superfluous information not only serves no purpose for the task at hand but also exposes more information to the risk of being leaked.

5. 
Clearance: (Secret: {Crypto})    , Sensitivity: (Confidential: {Crypto}), Access: Yes
- This makes sense because Secret is higher in the hierarchy than Confidential, and the list of need-to-know categories are obviously supersets/subsets of each other.

Clearance: (Secret: {Crypto, Nuclear}), Sensitivity: (Top Secret: {Crypto}), Access: No
- “No” makes sense because the sensitivity level of the document is higher than the individual’s authorization  level. Thus, the individual is not cleared to view the document, regardless of what the need-to-know categories are. 

Clearance: (Secret: {Nuclear}), Sensitivity: (Unclassified: {}), Access: Yes
- “Yes” makes sense because Secret is higher than Unclassified in the hierarchy, and the empty is clearly a subset of {Nuclear}.

Lecture 8

1. We introduce new vocabulary terms, objects, subjects, and actions, in order to allow for scenarios in a variety of contexts. In our thought experiment, the folders are objects, and the subjects are the humans trying to gain access to them (action). Objects don’t have to be folders; they could be files, directories, or databases. Subjects can be users or processes on a computer, and actions can be read, write, or execute.

2. (L1, S1) dominates (L2, S2) iff L1 >= L2 in the ordering on levels, and S2 is a subset of S1. 

Given a label (L, S), L is >= L, and S is a subset of S. Therefore, (L,S) dominates itself and is reflexive.

We are given the following labels (L1, S1), (L2, S2), and (L3, S3), where (L1, S1) dominates (L2, S2) and (L2, S2) dominates (L3, S3). If L2 >= L3 and L1 >= L2, L1 >= L3. Furthermore, if S3 is a subset of S2 and S2 is a subset of S1, then S3 is a subset of S1. Therefore, (L1, S1) also dominates (L3, S3). This demonstrates transitivity.

We are given the labels (L1, S1) and (L2, S2), where both labels dominate each other. If (L1, S1) <= (L2, S2) and (L2, S2) <= (L1, S1), L1 = L2 and S1 = S2 (antisymmetric).

3. Dominates is a partial order, not a total order, because there are security labels A and B such that neither A >= B nor B >= A. For example, {Top Secret: Crypto} does not dominate {Top Secret: Nuclear}. 

4. For two labels to dominate each other, their hierarchical and need-to-know components need to be exactly the same.   

5. The Simple Security property says that you can read objects at your level or below. Otherwise, the subject’s clearance level is the same as or higher than the object’s sensitivity level.

6. It’s “only if” and not “if and only if” because it is a necessary condition, but it’s not sufficient to grant clearance because there may be other security constraints in place.

Lecture 9

1. Simple Security is not enough to ensure confidentiality because it does not take write access into consideration. Otherwise, information can be leaked inadvertently if someone decides to write it down on a piece of paper.

2. Writing Top Secret information into an Unclassified folder is clearly violating confidentiality. Therefore, we also need constraints on write access to prevent writing information downwards in the hierarchy.

3. Computers require not only the clearance of the user but also of the programs that the user is running. Otherwise, the user may be trusted, but the programs running on a user’s behalf are sometimes compromised by malware (e.g., Trojans).

4. The *-Property says you can only write at your level or above. In other words, the subject’s clearance level is the same as or lower than the object’s sensitivity level.

5. For a subject to have both read and write access to an object, the object must be at the same level as the subject and have the same need-to-know categories.

6. The General cannot write orders down to the private since the *-Property prohibits writing down. It states that a subject can only write at your level or above. For the General to send orders to the private, it could create a separate Unclassified account to be used specifically as a channel for issuing orders.

7. A corporal could potentially overwrite the war plan. One way of dealing with this problem is not committing changes made by subjects with lower clearance levels until they are approved by someone at the higher clearance level.

Lecture 10

1. Raising a subject’s level arbitrarily is undesirable behavior because a subject can simply raise their level to view higher level information. Unless additional restrictions are made, this will not satisfy the weak tranquility property because upgrading a subject’s labels in this way violates confidentiality.

Lowering the level of a subject can go either way. If the subjects are stateless and carry no residual content, then downgrading may be acceptable in light of the weak tranquility property. On the other hand, a problem arises if a subject has any high-level residual information that it can carry with it down to the lower level.

2. Strong tranquility does not allow for any flexibility, and realistically, subjects and objects do upgrade and downgrade (e.g. military promotions).

3. Lowering the level of an object may be dangerous because once highly sensitive information will have now gained more visibility and a greater risk of being leaked, thereby breaching confidentiality. For example, if a Top Secret war plan is suddenly downgraded to Unclassified, it is now exposed to more individuals who are not meant to see it. 

4. In order for a downgrade to be secure, the object’s content must be assessed to make sure no high-level information is carried down. Otherwise, its sensitivity has decreased.

Lecture 11

1. Let H and L indicate hierarchical levels, where H > L. In a system where all of the subjects have read access to all of the files (objects), but write access to none of them, the subjects would be designated H, the objects L. The Simple Security property ensures that a subject with higher clearance (H) can only read down (L) while the *-property prohibits the H-level subjects from writing down.

2. An access control matrix for a BLP system may have thousands of subjects and thousands of objects. It would therefore be HUGE for most realistic BLP systems. Furthermore, access permissions can be calculated on the fly by consulting the Simple Security and *-property for any given subject-object pair.

Lecture 12

1. (L, {}) → (L, {A}) | (H, {}) → (H, {A})

2. To find any two labels’ LUB, take the highest of the hierarchical component and the union of the need-to-know categories. For the GLB, take the lower if the hierarchical component and the empty set.

3. Upward flow in the lattice really is the metapolicy for BLP because the rules (or policy) beneath its implementation all suggest a pushing or pulling up of information. For example, the Simple Security Property states that information can only be read down, which is essentially pulling lower level information up. The *-Property says information can only be written up, which is pushing information up.

Lecture 13

1. The Simple Security Property and *-Property both promote an upward flow of information, from L to H. Simple Security dictates a high-level subject can pull lower level information up. The *-Property states that information can be written at the same level or above. Otherwise, low level information is pushed up.

2. A READ operation is only allowed if the level of the subject is greater than the level of the object. This follows the definition of the Simple Security Property of BLP: “Subject S with clearance (Ls, Cs) may be granted read access to object O with classification (Lo, Co) only if (Ls, Cs) >= (Lo, Co).”

A WRITE operation is permitted only if the level of the object being written to is higher than the level of the subject. This satisfies BLP’s *-Property, which states that “Subject S with clearance (Ls, Cs) may be granted write access to object O with classification (Lo, Co) only if (Ls, Cs) <= (Lo, Cc).” 

3. The CREATE operation creates a new object O at the subject’s level if no object with the name O exists anywhere on the system. Since this doesn’t involve any downward flow of information, it adheres to BLP’s metapolicy.

The DESTROY operation destroys an object only if its level is higher than the subject’s. If the *-Property permits write access (i.e., modification) to objects at higher levels, then it follows that destroying higher level objects is also allowed.

4. For the covert channel on slide 5 to work, the programs must perform the exact same operations, excluding the initial behavior of the high level subject. 

5. If the object is destroyed, it can be created again (e.g., through a loop). Given enough time, an arbitrary amount of information can be transferred over this covert channel.

6. No, the contents in F0 of both paths contain the same value: 1. The only difference is one object has the label H, and the other is L.

7. SL has to do the same thing in both cases because it does not know what the message is. Depending on SH’s behavior, the same of SL operations should be able to yield varying bits of information that reflect the change.

8. SH does different things in order to signal different bits of information. It does not have to vary its behavior, but then it would not be utilizing the covert channel if it repeatedly sent the same bit of information.

9. If SL sees varying results based on the behavior of SH, that qualifies as a downward flow of information (in this case, information concerning the state of the information SL is attempting to read). This violates the metapolicy, which permits only an upward flow of information.

Lecture 14

1. By definition, a covert channel is a flow of information between subjects within a system. Otherwise, a high level subject manipulates some system resource that the low level subject can sense. Two humans conversing over coffee is not a covert channel because it is a direct channel between two subjects. 

2. Assuming F0 is at the same level as SH or higher, SH writes a value of 0 to F0 in the first path. SL attempts to read it, but does not have read access to SH according to the Simple Security Property. The attempted read therefore returns a 0. 

Under the same assumption above, SH writes a value of 1 to F0 in the second path. SL still cannot read it because the object is at a higher level. The read operation in this path also returns a  0. 

The write operation performed by SH will always not be accessible to the SL attempting to read it. The result will always be 0, so I do not think this is a covert channel.

3. In Covert Channel #1, the bit of information resides within the system state. 

4.  In Covert Channel #2, the bit of information is recorded in the sequencing or timing of events in the system. Otherwise, someone could reference the clock.

5. In Covert Channel #3, the bit of information might be recorded in the read head’s position or in the timing.

6. In Covert Channel #4, the bit of information is embedded within the code of the program.

7. A termination channel might have low bandwidth because a computation could take a long time to terminate.

8. To implement a power channel, there should be a way to access the level of power consumption.

9. Any electronic device that has battery life can utilize a power channel.

Lecture 15

1. In realistic scenarios, covert channels can actually send hundreds or thousands of bits of information. Covert channels on real processors operate at thousands of bits per second.

2. It would be impossible to eliminate every potential covert channel because covert channels are plenty and can exist anywhere. Any given system could have a plethora of subjects and attributes to utilize.

3. Once a covert channel is detected, one could attempt to:
- eliminate it by modifying the system implementation,
- reduce the bandwidth by introducing noise into the channel, or
- monitor it for suspicious patterns of usage.

4. Lecture 14 describes a covert storage channel where a high-level resources sends an error message upon attempted read access by a low-level resource. It can send one of two error messages: Resource not found or Access denied. The sender is the high-level resource and the receiver is the low-level resource. The error message is stored in the system state which is the shared object. The sender can dictate which message to send, and the receiver can view it in the system state. 

5. The receiver can attempt to access a resource which then yields an error message reading Access denied. If the resource is destroyed and the receiver attempts to access again, it will receive the other error message Resource not found. The receiver can then be created again, and the whole process repeats.

Lecture 16

1. The CREATE operation wouldn’t have an R in the SRMM for the “file existence” attribute because performing the operation itself doesn’t tell us whether the file of the same name already existed or we successfully created the file.

2. An R and M in the same row of an SRMM table indicate a potential covert channel because the table shows that two subjects (e.g., the system calls) can modify or reference an attribute of a shared object (e.g., file information).

3. If R and M are in the same column, this does not necessarily suggest a covert channel. It simply indicates that one process can both reference and modify an attribute. A covert channel, however, requires two separate entities: a sender that can modify an attribute and a receiver that can view or reference it.

4. Covert channels can be exploited by attackers, so it’s best to eliminate as many of them as possible. Creating an SRMM table to hone in on potential covert channels is the first step.

