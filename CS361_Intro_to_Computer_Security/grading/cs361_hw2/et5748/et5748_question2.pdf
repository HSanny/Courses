Eric Tang
et5748

Assignment 2


Lecture 17

1.	No; BLP (confidentiality) and NI (integrity) have different sets of 		policies.

2.	B can read A; A can write to B (read up/write down).

3.	Yes, same problems as BLP (except opposite direction).

4.	A high, B low (not transitive)


Lecture 18

1.	There are no specific rules (policies) about objects or actions.

2.	l1, l2, l3, ..., lk

3. 	Interference common in real systems; most involve low-level attributes,
	many interferences benign.


Lecture 19

1.	News, bank, etc. - don't want lower/less trust subjects to 
	taint higher up subjects.

2.	Commercial software might hve higher integrity than free one -
	less bugs, security issues, etc.

3.	Duty - multiple different subjects to perform function.
	Function - single subject cannot complete complementaryroles of process

4.	To recover and to see who's "fault" for violation.

5.	Users cannot write own programs +
	programmers develope and test on nonproduction systems +
	moving application to production needs special process +
	process must be audited +
	managers and auditors must haev access to system state and logs.

6.	Commercial world


Lecture 20

1.	High rel + little sensitivity = weather forecast
	less rel + high sense = threat warnings

2.	L1 dom L2
	No dom
	L1 dom L2

3.	simple int = to read, subject must be of lower or equal standing
	* prop = to write subjects must be higher or equal standing

4.	The must be treated seperately


Lecture 21

1.	Same rules (opposite definitions)

2.	No dominance

3.	No


Lecture 22

1.	Subjects will auto lower their level if bad read.

2.	No - could drop at any moment

3.	Yes - auto filter tainted/lower info

4.	Yes


Lecture 23

1.	Yes

2.	Move from development to production

3.	No, no dominance for integrity

4.	Weak


Lecture 24

1.	Consistency among various components of system.

2.	Invoice

3.	Work shifts

4.	Cert - deals with subjects
	Enforce - deals with actions

5.	(clerk, SELL, {cashier})


Lecture 25

1.	Can leak AA info to UA

2.	Yes

3.	GM + Microsoft + Banks

4.	Acess control sensitive to history of past accesses.


Lecture 26

1.	More flexible + more appropriate for organization

2.	Auth - roles an individual allowed to fill at various times.
	Active - roles an individual currently occupies.

3.	Role - active role must be also and authorized role
	transaction - subject can execute transaction only if authorized for
		one of the subjects active roles.

4.	Harder to administer + permission granting + various functions for
	subject + subjects to have many roles without changing ID.


Lecture 27

1.	Too big + too repetitive + where to store?

2.	Access control list, capability-based system, set of rules.


Lecture 28

1.	Sender and receiver have shared knowledge (encoding scheme)

2.	To calculate the least amount of bits to use to save bandwidth

3.	Otherwise the message cannot be decoded and interpreted

4.	Wasted bandwidth, larger message, longer read/interpretation.

5.	0, it already knows the answer. 


Lecture 29

1.	n bits
	up to 4 bits
	up to 7 bits
	depends on encoding (as do all the previous ones)

2.	Because it matters how many messages COULD be sent, not the 
	the messages that are sent.

3.	4 bits, 2^4 = 16

4.	log2(256) = 8

5.	Depends on receiver's level of uncertainty


Lecture 30

1.	binary digit (0 or 1, discrete)
	quantity of information (continuous)

2.	000, 001, 010, ..., 111

3.	message 10 is sent 99.5% of the time and the rest 0.5% of the time
	1000(99.5)(1) + 1000(0.5)(5)

4.	Sends less bits for the more popular messages (optimization)

5.	1111, 11110, 111110, 1111110

6.	Know some probibility of the messages


Lecture 31

1.	246824

2.	1, 0, 10, 101, 1010, 10101

3.	To not confuse messages

4.	Message are already minimal, lost info might be vital.

5.	Not prefix free.


Lecture 32

1.	-(log2(1/8)/8) + 8 = 3

2.	-((log2(1/5))/5 + (log2(4/5))/5) = 0.53

3.	Average bit per symbol
	Cannot find encoding that uses less bits per symbol than entropy
	Encoding = entropy is optimal


Lecture 33

1.	Heads is three times more likely to roll than tail. Also, only
	sending messages per 2 flips.
	HH = 3x3	9/16
	HT = 3x1	3/16
	TH = 1x3	3/16
	TT = 1x1	1/16

2.	9x1bit + 3x2bits + 3x3bits + 1x3bits = 27bits

3.	000, 001, 010, 011, 100, 101

4.	-((log2(1/20))/20 + (log2(1/20))/20 + (log2(3/20))/20 + (log2(3/20))/20 		+ (log2(6/20))/20 + (log2(6/20))/20 ) = 0.88

5.	1 - 00
	2 - 01
	3 - 100
	4 - 101
	5 - 110
	6 - 111

6.	The most sent message has lower bit than the naive encoding.