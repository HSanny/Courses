Jesse Isleib (jsi234)


﻿LECTURE 17


1) Yes, the system can be portrayed as a non-interference policy by showing all relations of “dominance,” or allowed information flow.


2)     ( A )      ( B )
Neither dominates the other, so there is no specified information flow.


3) Yes. If you have subjects L and H, and the policy does allow L to see everything possible (any changes H can make to system state, clock, etc), then there are potential covert channels.


4) A high, B high;   A low, B low;   A low, B high




LECTURE 18


1) The design of the metapolicy is left to be constructed, as long as it follows the policy that there are binary relations regarding interference between all subjects.


2) L1, L2, L3… LK  (given that the policy states that L->H).


3) All the requirements for a complete NI system have so many channels and on such a low level that it is very hard to prove completely. And at that, many interferences aren’t malicious, so realistic specifications are more important.




LECTURE 19


1) One ex. is the private overriding the general’s documents. Another would be if Amazon can change your shipping address without your confirmation. Another would be a student changing their grades via the registrar.


2) The idea is the subject writing the material is more credible.


3) Duty is about carrying out a process using multiple resources to ensure quality. Function would be who changes something and who checks if it was correctly changed; if the same person does both, then bad changes can occur undetected (potentially)


4) If Separation of Function is not wisely implemented, then through auditing we can potentially roll the information back if somewhere along the line something got messed up (or find out where it happened).


5) Separation of Duty and Function, and auditing (basically). No one group makes and uses the same thing (duty), the way the programmers test their program is with information to check for errors that they did not make up (function), and ensuring that the program works and is sent to the tellers without any tampering is auditing.


6) Grades at schools, or bank account information. If someone finds out your grades, that’s bad, but it’s not as bad as being able to change them to whatever you want. If someone sees your balance, that is also bad (but necessary sometimes), however changing it maliciously is very bad.




LECTURE 20


1) High reliability & low sensitivity: a physics professor tells you that the acceleration of gravity is roughly 9.8 m/s^2.
Low reliability & high sensitivity: a student tells you that they need your social security number to input information into a database.


2) 1: the expert in ph can write information (teach) the student in physics about physics.
2: the novice cannot teach the professor about physics, but the teacher cannot teach the student about art.
3: the student of art can teach the novice about art.


3) A -> B   implies that B dominates A in integrity, and so B can write down to A, and A can read up from B.


4) They are separate; just because a general is very high ranking in read access does not mean he should be allowed to write at the same level (he may be really stupid or something). However, they both are systems of categorizing people.




LECTURE 21


1) There is a simple integrity property, *-integrity property, respectfully meaning that you can only read from your level and above, or write your level and below.


2) Because neither of the sets {A, B} and {B, C} are supersets of the other.


3) No








LECTURE 22


1) That the subjects are reading possibly invalid information, so the ability to write down such information is taken away (by lowering the integrity of the subject)


2) No


3) This fixes the problem of the LWP, assuming that the information should/must be able to be read at all levels and written back down again (no lowering of integrity level)


4) Yes




LECTURE 23


1) Yes, if a user has SD under their confidential categories and ID (and matches the label level required to access the object/program), then the user should be able to read and write to it.
-If they don’t have integrity category “ID,” then they can only read (use) the program.


2) No, there’s no way to change the label of the system (unless weak tranquility comes into account; e.g. the LWP)


3) Yes


4) Weak tranquility




LECTURE 24


1) To implement a more relevant-to-commercial-industries way to maintain integrity.


2) Bank balances, SSN…


3) Things that don’t need to be audited, like “who picked up a pamphlet”.


4) certifications are criteria that are checked when doing something. Enforcement allows or disallows something from happening based on criteria.


5) Amazon is allowed to read the necessary banking/credit card information of customers and retailers.






LECTURE 25


1) He may have information that he can put out into the public that compares the two.


2) Yes, because it is not moving within the same conflict class.


3) Any in the same datasets of these two companies (or any other datasets he has permission to access, as long as they aren’t in a data set for a company in the same conflict class as objects it has already read)


4) To address conflicts of interest between companies or entities that own datasets. It is sensitive to what has happened in the past.




LECTURE 26


1) Addresses what can be done by a role, not by a subject (group subjects into a role). It lets subjects take on multiple roles, this time grouping roles into a subject. By effect it lets a subject take on multiple roles without having to change permissions (active roles must be authorized).


2) The active roles defines what transactions can be done by the subject. The authorized roles defines what active roles a subject can take on.


3) The active roles the subj is taking on must be a subset of the authorized roles (role authorization)
The transactions of the subject must be a subset of the authorized transactions of all of its active roles.


4) It’s more flexible (you don’t have to manage every single identity)




LECTURE 27


1) Very time consuming and inefficiently large (and access between two things may not even exist)


2) -Making a set of rules that allow us to compute it “on the fly”
-Store permissions within objects
-Store permissions within subjects








LECTURE 28


1) It must know if a yes/no exists in the sender, a set amount of information is sent to definitely resolve the question (e.g. for this, a bit, 0 or 1) so that the receiver can interpret it.


2) Efficiency and assurance.’


3) That way communication occurs FOR SURE


4) It may mud up the information (make it non interpretable)


5) 1 bit, it should be a 0 for no or a 1 for yes. 1 bit can only mean yes or no encoding, and it’s a set amount of data, this satisfies the rules from question #1.




LECTURE 29


1)-“n” bits.
-4 bits to encode #s 0-9 (3.5?)
-7 bits
-Depends on the encoding of the characters’ amount of information per character * number of characters


2) Because the bit is an encoded response that the receiver decodes. If there are 4 possible strings to send, then you only need to send 2 bits.


3) 4 bits. No better can be done because there is no leeway in the number of messages.


4) discretely: the actual bit representation of the message
continuous: the amount of information contained in the message decoded from the discrete


5) It depends on the size of each message.




LECTURE 30


1) One is the actual bit representation, the other is the amount of information conveyed by the bits (information content)


2) 000 through 111


3) Because a 0 alone is “message 10”. If a 1 is read, the next 4 bits determines which of the other messages it is.


4) you can help create a more efficient encoding 


5) 000-111, with the 4 messages being encoded into 4 of the strings of bits possible (using too many bits)


6) It will reduce bandwidth consumption, making messages get sent faster.




LECTURE 31


1) “2468”


2) bin -> die #
0 -> 1
1 -> 2
00 -> 3
01 -> 4
10 -> 5
11 -> 6


3) Otherwise the uncertainty of the receiver is not entirely resolved.


4) Otherwise we will be decoding things to get wrong messages from the sender.


5) Morse code is not prefix free.




LECTURE 32


1) 3
2) .72
3) It tells you the ideal average number of bits that must be used to encode the language.




LECTURE 33


1) Because if the average number of flips expected for them are 9/16, 3/16, 3/16, and 1/16, in 16 flips we expect them to occur 9, 3, 3, and 1 time respectively.


2) Since the number of bits used is lower for the process that occurs most (due to our logic and encoding), we will save a bit per 2flip that occurs for the pair that has probability 9/16. (entropy)


3) The naive encoding would be 000-101 representing rolls 1-6


4) 2.295


5) encoding:
00
01
10
110
1110
1111


6) It has an expected number of bits per roll of 2.35, which is closer to the naive encoding’s 3 expected bits per roll.
