CS 361 Week 2 Questions

Name: Joey Caudill
EID: JJC2828
CS Login: JJC2828
Email: jjc2011@gmail.com

Lecture 17

1.	No, because a system can comply with BLP model and still have a covert channel which does not comply with non-interference.

2.	They would not be able to communicate with one another because they are in seperate categories 

3.	No, because for it to be a NI policy there must never be anything that SH can do that has effects visible to SL.

4.	A and B both high, A and B both low, or A is low and B is high.

Lecture 18

1.	Instead of giving rules about who can do what, it just says that L -> H, which is general like the confidentiality metapolicy.

2.	l1, l2, l3, ... lk

3.	It is difficult to prove what all L could ever observe within its view. Interferences are very common in real systems. Most involve low-level system attributes. Many “interferences” are benign.

Lecture 19

1.	Without looking into integrity those without the trustworthiness necessary to modify information may change your information in a harmful way.

2.	Because the integrity of that software is better, you trust it more. Less likely to have information stolen or changed.

3.	SoD there is multiple people involved in one function, while in SoF there is one person on each function within an entire process.

4.	You cant be an auditor and a bank teller, then you could steal money and then cover it up as the auditor.

5.	You must always have seperation and checks and balances within your company to avoid integrity problems.

6.	In a bank or commercial setting.

Lecture 20

1.	Hospital, want to make sure allegries and stuff are not changed because the consequences could cost someones life.
	Credit card information, want to keep it secret but its not a big deal if it is changed.

2.	1. The expert has more credibility than the student
	2. The novice has less credibility in physics than the expert in physics
	3. The student has more credibility than the novice

3.	H -> L 

4.	They are seperate.

Lecture 21

1.	Its the same thing except we change the direction of the arrows, opposite order.

2.	Because neither dominates the other.

3.	No, because it has to pass the BLP rules and Biba rules.

Lecture 22

1.	The subjects will be tainted by the information they get from lower objects

2.	No

3.	The subject can filter out bad inforamtion.

4.	Yes

Lecture 23

1.	No, they are seperate

2.	So you can move objects from development to production

3.	Yes

4.	Weak tranquility property

Lecture 24

1.	To identify things you care about in commercial security, integrity-wise

2.	Checks, bank balances

3.	Candy on the counter at bank

4.	Certification rules are ones that check before the process, enforcement rules are ones that make sure you are doing the process right

5.	(Subject, action and object) / (Bank teller, account lookup, data) 

Lecture 25

1.	Because the consultant might bring confidential information between 2 competitors

2.	Yes

3.	Bank of America, Wells Fargo, or Citicorp, and also GM and Microsoft

4.	Conflicts of interest between multiple companies taken care of in Chinese Wall, also the Chinese Wall policy is sensitive to what you've done in the past.

Lecture 26

1.	Its easier to keep track of several roles than a huge number of subjects/employees

2.	Authorized roles are all the roles they may take, active roles are the authorized roles they are currently occupying.

3.	Role auth. means that a subjects active roles must be an authorized role, and Trans. auth. means that a subject is limited to doing only the things that it can under its active roles.

4.	Standard access control policies are much harder to administer for large organizations, harder to change identities rather than just transition between roles, doesn't recognize that subects have various functions within the organization

Lecture 27

1.	For an organization with thousands of subjects and objects the ACM would become huge, and for the most part most subjects dont have access to most objects

2.	Objects: Access control list
	Subjects: Capabilities
	Fly: Store the set of implicit rules of how to compute on the fly

Lecture 28

1.	The receiver must have some shared knowledge with the sender

2.	It allows us to see what it is affecting. Be it all communication, hardware design, protocol design, cryptography, fault-tolerance, etc

3.	Need to know if a 0 represents yes or no

4.	Want to be as efficient as possible, harder to detect

5.	1, just have the bit be 0 or 1 for yes or no

Lecture 29

1.	4 bits of information, 16 possibilities, 2 digit decimal number

2.	If it was between dawn or dusk, then its just one bit, but if it was uncertain on the day or time of day it would be more bits of information.

3.	4 bits, 2^4 = 16

4.	8 bits, 2^8 = 256

5.	In an ideal situation you know the amount of possible messages that could be sent, which you dont in most realistic situations

Lecture 30

1.	One is actual binary digit and the other is just a term used to measure the quantity of information

2.	M0: 000
	M1: 001
	M2: 010
	M3: 011
	M4: 100
	M5: 101
	M6: 110
	M7: 111
 
3.	It takes 5 bits for the 5 other messages, 5*5 bits, and 1 bit for the 995 of message 10

4.	You could give the message with the highest probablity just a single bit, so it is more efficient than looking at all the bits over and over for the same message

5.	M0: 0000000
	M1: 1000000
	M2: 0111111
	M3: 1111111

6.	You would almost have to know what the message is thats coming to you, so you dont take up any bits of information.

Lecture 31

1.	“425146261435261...”

2.	1 0
	2 1
	3 10
	4 1010
	5 101010
	6 10101010

3.	If it isn't then you dont know if you are one encoding or another, could decode incorrectly

4.	Otherwise we could have lost information

5.	It is not streaming, there are breaks in between

Lecture 32

1.	-( 8 *(1/8 * log 1/8)) = -log(1/8) = 3

2.	-(4/5 * log(4/5) + 1/5 * log(1/5)) = .722

3.	Entropy measures the average information content of symbols in the language, average amount of bits you will need to represent a symbol

Lecture 33

1.	Each flip is independent of the other flip which we have already figured out the probability of

2.	HH requires 1 bit, so 9*1. HT requires 2 bits, so 3*2. TH requires 3 bits, so 3*3. TT requires 3 bits, so 1*3. Then adding all the bits up we get 27.

3.	1: 000
	2: 001
	3: 010
	4: 011
	5: 100
	6: 101

4.	-(2 * 6/20 * log(6/20) + 2 * 3/20 * log(3/20) + 2 * 1/20 * log(1/20)) = 2.295

5.	1: 0
	2: 1
	3: 10
	4: 11
	5: 110
	6: 111

6.	It only requires 1 bit for 1's and 2's and 2 bits for 3's and 4's, unlike the naive encoding which requires 3 for all.
