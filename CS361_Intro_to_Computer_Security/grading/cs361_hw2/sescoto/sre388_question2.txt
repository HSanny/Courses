Name: Sergio Escoto
EID: sre388
CS Login: sescoto
Email: ses110@gmail.com

Week 2

Lecture 17

1-Yes, we can take any MLS policy (in this case the BLP model) and turn it into a non-interference policy, but not the other way around since NI is very general.
2-They would not be related/connected
3-No, information strictly flows from a lower level to a higher security level, not vice versa.
4-A can only be of low level, while B can be high or low.

Lecture 18
1-Because NI simply states a general rule on how information should flow, not on how the system should behave to implement that policy.
2-l_1, l_2 ... l_k -> What L sees after a sequence of interleaved actions with high level users is only its own set of actions.
3-(*)
Â 
Lecture 19
1-(*) Integrity is important in 
2-Because a company can trust the integrity of the company of the commercial software while the integrity of the freely available product cannot be trusted; anyone could have developed the free product and inserted malicious code in it.
3-With separation of duty, different subjects must be involved to complete a critical function, while with separation of duty, a single subject cannot complete complementary roles within a critical process.
4-Auditing involves having access to the system's state and logs as a way of forming an audit trail.
5-
    -Trusting others who supply your software, 
    -Trusting programmers' developmenting/testing on nonproduction systems
    -Moving applications from development to production
    -Auditing/Audit trails which need access to system state and logs.
6-(*)Scenario where integrity is more important than confidentiality

Lecture 20
1-Highly reliable with little sensitivity:      Gathering information about the weather from different sources
  Not highly reliable with greater sensitivity: Customer data for a purchase transaction
2-  Row1: Label 1 dominates label 2 since "Expert" is higher than "student"
    Row2: Label 2 dominates label 1 since Label 2 is "expert" vs label 1's novice level
    Row3: Label 1 dominates label 2 since student is greater than novice level
3-The NI policy for integrity is that information should not flow up.
4-This means that they are complete opposites: e.g. The requirements for confidentiality are the opposite for integrity where a higher level subject should write down and we should only read up.

Lecture 21
1-They are polar opposites for the same set of policies determining how information should flow on read/write operations
2-Because for that entry, while the levels match for subject & object, the labels are not subsets of each other.
3-Yes, if it satisfies the confidentiality requirements this means it has access to read it, but fails integrity requirements means it cannot write to it.

Lecture 22
1-The assumption is that if the subject accesses anything of low integrity, its integrity level will lower to its level.
2-Yes, in these models we consider subjects to be trustworthy, but for the low-watermark policy, the subject might become "corrupted", while with the Ring Policy - a more generous policy - we leave the judging of content to the subject's discretion.
3-The ring policy is more trustworthy; it assumes the subject has enough judgment to accept high/low integrity data.
4-Yes, for the most part the subjects are given more trust than the strict integrity policy.

Lecture 23
1-The categories SD for confidentiality and ID for integrity are related for program development, but they are separate for confidentiality and integrity
2-This is a special process needed to move applications from dev to production, since there is no obvious way to allow this with BLP or Biba.
3-No, System controllers can only read dev code/test data
4-The weak form tranquility (as long as the label change does not violate the "spirit" of the policy)

Lecture 24
1-Authentication: to ensure authorized users can access and modify certain data, Audit: to record actions that any user performed on what object, Well-formed transactions: Users can only read/write Objects in constrained ways , and Separation of Duty -> Each user is given specific access to avoid unauthorized access or modification.
2-In bank systems: some user's bank account information, their login account, credit card info, etc.
3-An user changing their name, or personal settings, etc.
4-Certification rules check that any action users do is valid according to policies, enforcement rules are what constrain users' actions to follow policies.
5-An example permission would only allow super-users to install software in the machine.

Lecture 25
1-This could potentially put American Airlines at a disadvantage by allowing the possibility for the consultant to leak sensitive information to UA.
2-Yes, as long as a user does not access other objects from another company within a conflict class, then it is fine.
3-A subject is granted access to an object only if object is in same company datasets as objects already accessed by the subject, or it belongs to an entirely different conflict of interest class.
4-The Chinese Wall Policy addresses a very specific need: to avoid conflicts of interests by consultants/contractors. Access also depends on previous access history of the user.

Lecture 26
1-It is more flexible to administer: add new users, change their roles, etc.
2-Authorized roles are the set of roles an individual is allowed to fill at various times; active roles are those which it currently occupies.
3-Role authorization: making sure that the user is authorized to take that role and perform the actions allowed for that role while the Transaction authorizations are those actions that only those roles are allowed to perform.
4-Standard ACPs are less flexible when assigning permissions to users; with RBAC you simply assign a role to a new user.

Lecture 27
1-Building an explicit ACM would be too inefficient and expensive storage-wise.
2-Permission with Objects
Permission with Subjects
Compute permissions on-the-fly

Lecture 28
1-The receiver must know which possible answers it will receive from the sender
2-To know more about transmission loss, speed, etc. during transmission
3-They must agree on what will be transmitted, what can be transmitted, and how to interpret each transmission
4-To minimize data loss during transmission; the more is sent, the more likely it could become corrupted, etc.
5-Then it does not need to know what the content of the message is, just to determine when it is received

Lecture 29
1-"n" bits, 10 possible outcomes, 100 outcomes
2-Because what the receiver knows will determine how much information the sender must send the message with the minimal uncertainty
3-4 bits are required, since a bit can indicate 2 possible outcomes, then we need 4 bits to indicate 16 outcomes
4-8 bits
5-Because ideal situations have an agree upon set of messages, but it is more common to not know what messages might be received

Lecture 30
1-The first definition is for a binary digit: meaning a 0 or a 1. The other definition is for measuring the content of a message, measuring a continuous quantity.
2-The naive encoding for 8 messages would be:
    1   000
    2   001
    3   010
    4   011
    5   100
    6   101
    7   110
    8   111   
3-Because we know that on average, 995 of the messages will be message 10, and 5 will be any of the other messages.
4-Because we can take advantage of the likeliness of certain messages to create a more efficient encoding where fewer bits will be needed to send the more probably messages
5-Use an encoding with more bits than needed: eg. 3 bits
6-Some outcomes are more probable than others so we take advantange of that in our encoding scheme

Lecture 31
1-Language: {0,2,4,6,8}. Example string: "0204684"
2-Non-prefix-free encoding:
    1  0
    2  01
    3  010
    4  011
    5  100
    6  101
3- If it is uniquely decodable then it would make it easy to recover any message that could have not been completely transmitted since there is no ambiguity whether it is one message or the other.
4-A lossless encoding scheme would mean that we could recover parts of a message and knowing what it decodes to.
5-Because there are ambiguous encodings for two symbols that may be a repetition of the first, or an encoding for the other.

Lecture 32
1- h = - (log_2 (1/8))) = 3
2- h = - ((1/5)*log_2(1/5) + (4/5)*log_2(4/5)) = ~ 0.72
3- To calculate the most efficient encoding

Lecture 33
1-Because when we change the event to two flips, we calculate the probability by multiplying the probabilities by themselves twice. 
2-Because the encoding from slide 3 for each result needs a certain minimum amount of bits, then we multiply the frequency of the event by the number of bits needed to encode the event.
3-Naive encoding:
    Result |  Prob. |  Naive encoding
    -------+--------+-----------------
        6  |  1/20  |   101
        5  |  1/20  |   100
        4  |  3/20  |   011
        3  |  3/20  |   010
        2  |  6/20  |   001
        1  |  6/20  |   000

4- h = - ((1/20)*log_2(1/20)+...+(6/20)*log_2(6/20)) = ~ 2.295
 
5-  Result |  Prob. |  Efficient encoding
    -------+--------+--------------------
        6  |  1/20  |   11111
        5  |  1/20  |   11110
        4  |  3/20  |   1110
        3  |  3/20  |   110
        2  |  6/20  |   10
        1  |  6/20  |   0
6- Because it is prefix-free and only transmits as many bits as necessary