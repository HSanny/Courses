CS 361 Week 3 Questions

Name: Joey Caudill
EID: JJC2828
CS Login: JJC2828
Email: jjc2011@gmail.com

Lecture 34

1.	The best encoding you can do is h, and the most the channel can trasmit is C, so at most, perfect scenario, you can send C/h symbols per second

2.	If there is noise, you may have to repeat your message a couple times in order for the receiver to actual get the full message.

Lecture 35

1.	-(log 1/10)
	
2.	All natural languages contain significant redundancy and they require very complex models to solve for the entropy

3.	Zero-order: all letters have the same likelihood
	First-order: all letters are independent of each other, but take their frequency
	Second-order: use of digrams to take into account that some letters follow others more frequently
	Third-order: use of trigrams for letters following one aother

Lecture 36

1.	Sometimes its impossible to know what all everyone in the system knows

2.	The more the listener knows the less information you need to convey

3.	Entropy can be used to measure the amount of redundancy in an encoding. If the information content of a message is equal in length to that of the encoding, there is no redundancy.

Lecture 37

1.	The underlying language is probably English, it looks like they just replaced letters with numbers and symbols, probably not very complicated

2.	You can just run it through some algorithm, maybe hashing, with no need for a key

3.	It should be preserved

4.	You can use them to get leverage on the decryption process, like if there were more e's and there were more 3's in the encryption you may think that e -> 3

Lecture 38

1.	P	

2.	D(E(C,Ke),Kd)

3.	Find weaknesses in their implementation through these patterns, so they can fix them

4.	Frequency of symbols in a language, in order to see where people can look for patterns

Lecture 39

1.	You can break an encryption algorithm given enough time and data, but not feasible to do so, cause it could take hundreds of years to do so.

2.	There are 2^n possibilities, and you find it on average of halfway into it, so 2^n-1

3.	They are simple, but if you use them over and over again it becomes complicated and hard to break

4.	Confusion is causing it to be hard to extract information, but Diffusion is to spread the information over the region

5.	Both are good especially together, using substitution for confusion and trasposition for diffusion.

Lecture 40

1.	Monoalphabetic is done uniformly for a symbol, while polyalphabetic depends on where in the plaintext the symbol occurs
	
2.	The key is just a table from one alphabet to another
	
3.	Because for say A there are k mappings for it, then for B there are k-1 mappings for it, since we already included A <-> B, and so on.
	
4.	The number of positions you shift
	
5.	26
	
6.	No
	
7.	Take the ciphertext, look in the row for the matching letter in key, then find the letter in the cipher text in this row, and follow up to the column to find the plaintext letter.
	
Lecture 41
	
1.	There are 26 possiblities for each of the 3 letters, so 26^3 = 17576
	
2.	Because the x and y correspond to different letters and the 2 y's will go to the same symbol
	
3.	Yes, as long as the person doesn't know what the key is they can't generate the plaintext from the ciphertext
	
Lecture 42	
	
1.	Even if they know the algorithm and know the ciphertext, they still don't know which key was used and therefore don't know what the plaintext was.
	
2.	This way whoever gets ahold of the ciphertext doesn't know which key was used and therefore can't figure out the plaintext.
	
3.	Both the sender and receiver have to know the key, but since its random they would have to send it to each other.
	
Lecture 43	
	
1.	Trasposition doesn't change characters, so you know the characters that were in the plaintext message. So for the cipher to be strong it should be used with substitution.
	
Lecture 44	
	
1.	Symmetric
	
2.	Management means how to you figure out which key to use, Distribution means how to move keys to each other
	
3.	No, because you decrypt with a private key that they don't have.
		
4.	Trade-off, symmetric keys are easy but not as strong and public keys are expensive but more strong
	
Lecture 45	
	
1.	Because stream ciphers are much easier to break. Block ciphers are non-malleable
	
2.	If your encryption algorithm is malleable then the meaning of your message can be changed
	
3.	You can analyze and work with ciphertext just like you would be able to with the plaintext
	
Lecture 46	
	
1.	subBytes, replaces byte with another based off lookup table
	
2.	shiftRows, shift 1st row 0 bytes, 2nd 1 byte, ...
	
3.	You have to multiply each column by a 4x4 fixed array, but one that is much harder to do the multiplication for
	
4.	Done a block at a time and done in rounds over and over a certain number of times, amount for each depends 
		
5.	Make it more secure and harder to break
	
Lecture 47	
	
1.	Identical blocks in the plaintext yield identical blocks in the ciphertext
	
2.	You must do something to “randomize” blocks before they’re encrypted.
	
3.	Observed changes and content leak
	
4.	Key stream generation modes use encryption algorithms to generate random appearing streams of bits in reproducible fashion
	
Lecture 48	
	
1.	A private key used for decryption
	
2.	Because it is hard to decrypt to go back, decrypt, without one of the primes, private key, but if you have it it is easy
	
3.	Now you can give the public key, and it doesnt matter if someone gets it
	
4.	{P}K-1
	
5.	A public key encryptionmay take 10,000 times as long to perform as a symmetric encryption, much less efficient.
	
Lecture 49	
	
1.	Yes, the way they are used in a symmetric fashion
	
2.	Prime numbers are used to make the keys for RSA
	
3.	Yes
	
4.	They don't have A's private key used for decryption
	
5.	Because anyone might have A's public key
	
6.	Because no one besides B has its private key
	
7.	Because anyone can have B's public key and can decrypt it
	
8.	You need 2 sets of keys one for authenticity and one for privacy
	
Lecture 50
	
1.	You want to be able to uniformly and quickly solve the hash for any message
	
2.	Weak collision resitance means that its hard to find another message that has the same hash value as your given message, but strong collision resistance is if its hard to find any messages with the same hash values
	
3.	Preimage is if its hard to find a message given a hash value, second preimage is if it hard 2 find a message that has the same hash value as your other message
	
4.	You have to look at 1.25*(2^64) before you find a collision on average
	
5.	You have to look at 1.25*(2^80) before you find a collision on average
	
6.	Because they are used for integrity purposes, very good at detecting if there were any changes to a file
	
7.	A cryptographic hash function binds the bytes of a ?le together in a way that makes any alterations to the ?le apparent.
	
8.	You use 2 keys like in RSA to provide confidentiality and you use a hash to provide integrity
	
Lecture 51	
	
1.	No, S doesn't have KR-1 which is R's private key
	
2.	Yes, then R applies S's public key follwed by its private key, which only it has, to get the message
	
3.	No, because if you sent the first one, R could not decrypt it, unlike the second
	
4.	Key exchange requires 2 keys, the sender's private key and receiver's public key, because you need to do both to get both con?dentiality and authentication
	
Lecture 52	
	
1.	Nothing, as long as it doesn't know b
	
2.	If it got ahole of g^b mod p then it could find the shared secret
	
3.	If it got ahole of g^a mod p then it could find the shared secret
