Name: Jung Yoon
EID: jey283
CS Login: jungyoon
Email: jungyoon@utexas.edu

***** LECTURE 34:
1. Why is it impossible to transmit a signal over a channel at an average rate greater than C/h?
→According to the Fundamental Theorem of the Noiseless Channel, It is impossible to transmit at an average rate greater than C/h, assuming that a language has entropy h (bits per symbol) and a channel can transmit C bits per second. 

2. How can increasing the redundancy of the coding scheme increase the reliability of transmitting a message over a noisy channel?
→According to the Fundamental Theorem of a Noisy Channel, covert channels in the system cannot be dismissed with the argument that they are noisy and hence useless because you can always get the message through by ﬁnding a more redundant encoding. That is, if there is any bandwidth at all, you can eventually find an encoding to get your message across the channel, though you will have to add some redundancy.  


***** LECTURE 35:
1. If we want to transmit a sequence of the digits 0-9. According to the zeroorder model, what is the entropy of the language?
→Assume that all digits are equally likely so the entropy of the language would be –(log(1/10)). 

2. What are reasons why computing the entropy of a natural language is difficult?
→No one actually knows what the exact entropy of any given natural language is (i.e. English) because there are so many possibilities and factors. Computing the entropy of a natural language requires very complex models so you can only really get an estimate. 

3. Explain the difference between zero, first, second and third-order models.
→In zero-order, All characters are assumed to be equally likely. In first-order, we assume that all symbols are independent of one another but follow the given probabilities. In second-order, we assume that all symbols are dependent on one another (i.e. likelihood of digrams, trigrams, etc.) and calculate the entropy.


***** LECTURE 36:
1. Why are prior probabilities sometimes impossible to compute?
→Knowing exactly what the exact entropy is happens to be for any observer is some complicated likelihood of some events and we can't really compute that because a lot of prior probabilities depend on too many factors. 

2. Why is the information content of a message relative to the state of knowledge of an observer?
→ Entropy is relative to a particular observer because information content of a message depends on the state of knowledge of the receiver. 

3. Explain the relationship between entropy and redundancy.
→Entropy can be used to measure the amount of “redundancy” in the encoding. If the information content of a message is equal to the length of the encoded message, there is no redundancy.


***** LECTURE 37:
1. List your observations along with their relevance to cryptography about Captain Kidd’s encrypted message.
→You should ask yourself what the underlying language is in the first place. Is it English? Are there any clues? One clue might be that there's a goat head on the paper, which is a pun to Captain Kidd's name. This pun only works in English so we know that the source language is English. →It's probably a simple substitution text algorithm; it's not modern ecryption. 

2. Explain why a key may be optional for the processes of encryption or decryption.
→Keyless ciphers do not use keys. An example in which you might not need a key would be in a keyless transposition cipher where positions held by untils in the plaintext are simply shifted so there is no key necessary. Sometimes, the cipher isn't complex enough to require a key.

3. What effect does encrypting a file have on its information content?
→The information content should be preserved. Encrypting should preserve the information content so that the receiver could get the information but to hide it. There should be no change to the file's information content.

4. How can redundancy in the source give clues to the decoding process?
→Redundancy is the enemy of secure encryption because it provides leverage to the attacker in that they can use redundancy to figure out what the key is or what the original message was. We want ecryption to obscure the meaning of text. 


***** LECTURE 38:
1. Rewrite the following in its simplest form: D(E(D(E(P)))).
→D(E(D(E(P)))) = D(E(P)) = P

2. Rewrite the following in its simplest form: D(E(E(P,KE),KE),KD).
→ D(E(E(P,KE),KE),KD) = D(E(C,KE),KD).

3. Why might a cryptanalyst want to recognize patterns in encrypted messages?
→Recognizing patterns may lead to the cryptanalyst finding out the key. There is something called traffic analysis (i.e. a particular entity sends more entity when a crisis is going on). You might infer the traffic without knowing anything about the content which might give you some clues about the scenario.

4. How might properties of language be of use to a cryptanalyst?
→For example the frequency of certain symbols in a specifc language would possibily allow you to use zero, first, second and third-order models.


***** LECTURE 39:
1. Explain why an encryption algorithm, while breakable, may not be feasible to break?
→ Most encryption algorithms are breakable since the analyst can try all keys systematically. However, it isn't very feasible to have an analyst try all the keys; an exhaustive search is generally very naïve.

2. Why, given a small number of plaintext/ciphertext pairs encrypted under key K, can K be recovered by exhausteive search in an expected time on the
order of 2n−1 operations?
→ Many ciphers use a n -bit string as key. Given a small number of plaintext/ciphertext pairs encrypted under key K, you can use brute force efficiently (expected on time on the order of 2^(n-1)). You're just doing a linear search on that so on average, you find the correct one halfway there so that's where 2^(n-1) comes from.  

3. Explain why substution and transposition are both important in ciphers.
→ Substitution and transportion are the simplest building blocks of encryption. It might seem that these are too naive to be eﬀective. But almost all modern commercial symmetric ciphers use some combinati on of substitution and transposition for encryption.

4. Explain the difference between confusion and diffusion.
→Confusion is transforming information in plaintext so that an interceptor cannot readily extract it whereas difficusion is spreading the information from a region of plaintext widely over the ciphertext.

5. Is confusion or diffusion better for encryption?
→ Substitution tends to be good at confusion; transposition t ends to be good at diﬀusion. Almost all modern commercial symmetric ciphers use some combinati on of substitution and transposition for encryption so rather than think of either of them as better than the other, they should be used together. 


***** LECTURE 40:
1. What is the difference between monoalphabetic and polyalphabetic substitution?
→They are both tyes of substitution ciphers. However, if this is done uniformly this is called a monoalphabetic cipher or simple substitution cipher and if diﬀerent substitutions are made depending on where in the plaintext the symbol occurs, this is called a polyalphabetic substitution.

2. What is the key in a simple substitution cipher?
→It is however you specify the mapping so it might be a table that tells you the mappings. 

3. Why are there k! mappings from plaintext to ciphertext alphabets in simple substitution?
→It's an injection (1-1 mapping) of the alphabet itself into itself or another alphabet so it has to have k! mappings. 

4. What is the key in the Caesar Cipher example?
→It's how many positions you shift. 

5. What is the size of the keyspace in the Caesar Cipher example?
→English has 26 letters so it's 26, or 25 depending on how you look at it.

6. Is the Caesar Cipher algorithm strong?
→No. It's not a particuarlly weak algorithm but you don't have to try all the keys before you get the right one. 

7. What is the corresponding decryption algorithm to the Vigenere ciphertext example?
→The Vigenere example uses a symmetric-key algorithm using a block, stream cipher. It is also an example of a polyalphabetic substitution.


***** LECTURE 41:
1. Why are there 17576 possible decryptions for the “xyy” encoding on slide 3?
→You have 3 symbols/letters and there are 26 letters in the English alphabet so there are 26*26*26 decryptions possible. Thus, 26^3 = 17576. 

2. Why is the search space for question 2 on slide 3 reduced by a factor of 27?
→We know that there are two Y's so using simple substitution cipher, we know that there are 26*25 possibilities, thus reducing the search by a factor of 27.

3. Do you think a perfect cipher is possible? Why or why not?
→ A perfect cipher would be one in which no reduction of the search space is possible, even given access to the ciphertex t and algorithm. Given the defitnion, yes, a perfect cipher is possible. We know that a perfect cipher is possible by the one-pad. 


***** LECTURE 42:
1. Explain why the one-time pad offers perfect encryption.
→ Every possible plaintext could be the pre-image of that ciphertext under a plausible key. Therefore, no reduction of the search space is possible.

2. Why is it important that the key in a one-time pad be random?
→You have to know absolutely nothing about the key other than that it is random, otherwise it wouldn't be a perfect ecryption. If for example you knew that the key had even parity, then you could work backwards and eliminate half of the plaintext. Again, you must know nothing about the key other than that it was generated randomly. 

3. Explain the key distribution problem.
→The sender and the receiver both need a key but how do you get it to each other securely? If sender and receiver already have a secure channel, why do they need the key and If they don’t, how do they distribute the key securely? It's a problem.


***** LECTURE 43:
1. What is a downside to using encryption by transposition?
→ A disadvantage is that such ciphers are considerably more laborious and error prone than simpler ciphers. Also, they are regarded as a building block for encryption. Transposition ecryptions aren’t very strong so most commercial algortihsm use combinations, though a bombination is not necessarily stronger than either cipher individually; it may even be weaker. 


***** LECTURE 44:
1. Is a one-time pad a symmetric or asymmetric algorithm?
→A one-time pad is a symmetric algorithm. 

2. Describe the difference between key distribution and key management.
→Key distribution is how do we convey keys to those who need them to establish secure communication whereas key management is given a large number of keys, how do we preserve their safety and make them available as needed.

3. If someone gets a hold of Ks, can he or she decrypt S’s encrypted messages? Why or why not?
→Each subject has a pubically disclosed key Ks. Anyone can use it to encrypt but it can't be used to decrypt because it is asymmetric encryption, meaning that the user would need another key to use separately for decryption. 

4. Are symmetric encryption systems or public key systems better?
→Symmetric key algorithms are much faster computationally than asymmetric algorithms as the encryption process is less complicated. Symmetric key systems are less expensive as well so if one had to be chosen, a symmetric ecryption system would technically be "better" on a general level. Symmetric encryption remains the work horse of commercial cryptography, with asymmetric encryption playing some imp ortant special functions 


***** LECTURE 45:
1. Why do you suppose most modern symmetric encryption algorithms are block ciphers?
→Block ciphers have high difficusion (information from one plaintext symbol is diﬀused into several ciphertext symbols) and immunity to tampering (diﬃcult to insert symbols without detection). 

2. What is the significance of malleability?
→It's a bad thing for an encryption algorithm and you don't want it. It means that it allows transformations on the ciphertext produce meaningful changes in the plaintext. Given that your attacker makes a change, you're not even going to notice that there was any change but when you decode it, the message might have changed completely. If you change even one bit in a file, it is liable to change the whole result of the decryption of the block.

3. What is the significance of homomorphic encryption?
→ Homomorphic encryption is a form of encryption where a specific algebraic operation performed on the plaintext is equivalent to another (possibly different) algebraic operation performed on the ciphertext. The signifigance is that homomorphic encryption schemes are malleable by design. For example, the homomorphic property of various cryptosystems can be used to create secure voting systems, collision-resistant hash functions, and private information retrieval schemes.


***** LECTURE 46:
1. Which of the 4 steps in AES uses confusion and how is it done?
→ Confusion means that the key does not relate in a simple way to the ciphertext. In particular, each character of the ciphertext should depend on several parts of the key. addRoundKey uses confusion because it doesn't just relate in a simle way to the key. It does this: XOR the state with a 128-bit round key derived from the original key K by a recursive process.

2. Which of the 4 steps in AES uses diffusion and how is it done?
→ Diffusion means that if we change a character of the plaintext, then several characters of the ciphertext should change, and similarly, if we change a character of the ciphertext, then several characters of the plaintext should change. The mixColumns step uses diffusion. What it does is for each column of the state, it replaces the column by its value multiplied by a ﬁxed square matrix of integers. 

3. Why does decryption in AES take longer than encryption?
→ Inverting the MixColumns step requires multiplying each co lumn by a fixed array so for that reason, decryption typically takes longer than encryption.

4. Describe the use of blocks and rounds in AES.
→AES uses blocks to take input in fixed size blocks. A 128-bit block is arranged as a 4 × 4 array of bytes called the “state,” which is modiﬁed in place in each round. The key is also arranged as a 4 × n array of bytes, and is initially expanded in a recursive process into r + 1 128-bit keys, where r is the number of rounds. AES uses 10, 12, or 14 rounds for keys of 128, 192, and 256 bits, respectively. Each round consists of four steps: subBytes, shiftRows, mixColumns, and addRoundKey.

5. Why would one want to increase the total number of Rounds in AES?
→ More rounds means more security against cryptanalysis, simply, since there is more confusion and diffusion


***** LECTURE 47:
1. What is a disadvantage in using ECB mode?
→ A naive use of encryption as in Electronic Code Book leaves too much regularity in the ciphertext. That is, the problem with ECB is that identical blocks in the plaintext will yield identical blocks in the ciphertext. This is a problem for plaintext with frequent repeats, such as internet packet traffic.

2. How can this flaw be fixed?
→ To solve the problem of EBC, do something to “randomize” bloc ks before they’re encrypted. That is, you need to use CBC (Cipher Block Chaining).

3. What are potential weaknesses of CBC?
→ Observed changes (an attacker able to observe changes to ciphertext over time will be able to spot the ﬁrst block that changed) and content leak (If an attacker can ﬁnd two identical ciphertext blocks, he can derive information about two plaintext blocks). 

4. How is key stream generation different from standard block encryption modes?
→ In block encryption modes (like ECB and CBC), the point is to generate ciphertext that stores the message in encrypted but recoverable form. However, in key stream generation modes the cipher is used more as a pseudorandom number generator. The result is a key stream that can be used for encryption by XORing with a message stream. Decryption uses the same key stream.


***** LECTURE 48:
1. For public key systems, what must be kept secret in order to ensure secrecy?
→The decryption key (aka the private key). The idea behind publick key systems is to use a publicly disclosed key to encrypt and a secret key to decrypt. This drastically reduces the number of keys that have to be protected.

2. Why are one-way functions critical to public key systems?
→ The basis of any public key system is the identification of a function that is easily computed, but difficult to invert without additional information. This is called a one-way function. This is critical to public key systems because the system allows anyone with the public key (so basically everyone) can encrypt but only you can decrypt with the private key. 

3. How do public key systems largely solve the key distribution problem?
→Public key systems largely solve the key distribution problem because they remove the need for the receiver and the sender to agree on a joint key, thereby removing the need to share a key securely with each other. 

4. Simplify the following according to RSA rules: {{{P}K−1}K}K−1.
→{{{P}K−1}K}K−1 = {P}K−1. So it's the decryption of P.

5. Compare the efficiency of asymmetric algorithms and symmetric algorithms.
→ Asymmetric algorithms are generally much less eﬃcient than symmetric algorithms. Asymmetric algorithms generally cost more as well. 


***** LECTURE 49:
1. If one generated new RSA keys and switched the public and private keys, would the algorithm still work? Why or why not?
→Yes, you can use either for encryption and decryption just because it's the way it is symmetrically designed. RSA is symmetric in the use of keys.

2. Explain the role of prime numbers in RSA.
→ In RSA, this asymmetry is based on the practical difficulty of factoring the product of two large prime numbers, the factoring problem.

3. Is RSA breakable?
→ The algorithm is theoretically very secure, but has practic al weaknesses. Thus, it is definitely breakable.

4. Why can no one intercepting {M}Ka read the message?
→Only A has the key which will allow the decryption so we get privacy. Encryption with the public key is a privacy transformation, but not an authenticity transformation.

5. Why can’t A be sure {M}Ka came from B?
→You can't get authentication because anyone could have sent the message; it didn't have to be from B. Encryption with the public key is a privacy transformation, but not an authenticity transformation.

6. Why is A sure {M}K−1 b originated with B?
→Because no one but b has that private key that b has so we get authentication. Encryption with the private key is an authenticity transformation, not a privacy transformation.

7. How can someone intercepting {M}K−1b read the message?
→It might be the case that anybody has B's key. Encryption with the private key is an authenticity transformation, not a privacy transformation.

8. How can B ensure authentication as well as confidentiality when sending a message to A?
→ A public key encryption can be used for authenticity or for privacy but not both at once. However, in other public key systems, you typically need two pairs of k eys: one pair for privacy and the other pair for “signing” (authen ticity).


***** LECTURE 50:
1. Why is it necessary for a hash function to be easy to compute for any given data?
→ In order for it to be efficient, it must be easy to compute so that it works very fast. It's HASH by name to begin with so it's desired effect is that it's fast and easy to handle. 

2. What is the key difference between strong and weak collision resistance of a hash function.
→A function f is weak collision resistant if, given an input m1 , it is hard to ﬁnd m2 != m1 such that f(m1) = f(m2). Differently, a function f is (strong) collision resistant if it is hard to ﬁnd two messages m1 and m2 such that f(m1) = f(m2).

3. What is the difference between preimage resistance and second preimage resistance?
→A function f is preimage resistant if, given h , it is hard to ﬁnd any m such that h = f(m) whereas a function f is second preimage resistant if, given an input m1 , it is hard to ﬁnd m2 != m1 such that f(m1) = f(m2).

4. What are the implications of the birthday attack on a 128 bit hash value?
→It's almost certain that there's always going to be at least two individuals with birthdays on the same day. This means that you'll have to look at 1.25*(2^64) values before you get a collisions. 

5. What are the implications of the birthday attack on a 160 bit hash value?
→ This means that you'll have to look at 1.25*(2^80) values before you get a collisions.

6. Why aren’t cryptographic hash functions used for confidentiality?
→ It's usually used for integrity. we usually use encryption to conceal the contents of an object, i.e., to protect confidentiality. However, in some cases integrity is the desired result. In a secure communications system, the correct transmission of messages may override confidentiality concerns.

7. What attribute of cryptographic hash functions ensures that message M is bound to H(M), and therefore tamper-resistant?
→ A cryptographic hash function “binds” the bytes of a ﬁle toget her in a way that makes any alterations to the ﬁle apparent. We say that we seal the ﬁle to make it tamper-proof (actually tamper-resistant).

8. Using RSA and a cryptographic hash function, how can B securely send a message to A and guarantee both confidentiality and integrity?
→ We can use hash functions for integrity and use RSA for confidentiality using the symmetric encryption. I would append the hash to the end of the plaintext and encrypt that. So yes, I think you have the right logic.


***** LECTURE 51:
1. For key exchange, if S wants to send key K to R, can S send the following message: {{K}KS−1}K−1R ? Why or why not?
→ No, any eavesdropper can intercept the message and decrypt it using S ’s public key to retrieve K.

2. In the third attempt at key exchange on slide 5, could S have done the encryptions in the other order? Why or why not?
→ Yes. In slide 5, you encrypted then decrypted but that's commutative. It's the same as doing it the toher way around. 

3. Is {{{K}KS−1}KR}KS equivalent to {{K}K−1
S}KR?
→ No, it's not equivalent. 

4. What are the requirements of key exchange and why?
→Key exchange requires both conﬁdentiality and authentication because you're both suspicious (mutual suspicion). 


***** LECTURE 52:
1. What would happen if g, p and gamodp were known by an eavesdropper listening in on a Diffie-Hellman exchange?
→ An eavesdropper cannot discover this value even if she knows p and g and can obtain each of the messages.

2. What would happen if a were discovered by an eavesdropper listening in on a Diffie-Hellman exchange?
→ Nothing happens because you need to know both a and b in order to be able to figure out the key and thus decrypt messages

3. What would happen if b were discovered by an eavesdropper listening in on a Diffie-Hellman exchange?
→ This is the same as the last question. Nothing happens because you need to know both a and b in order to be able to figure out the key and thus decrypt messages







