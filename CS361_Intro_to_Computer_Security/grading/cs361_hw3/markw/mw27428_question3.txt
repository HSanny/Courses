---------------------------
Week 3 Question Responses
---------------------------
CS361, Summer 2014, Bill Young

:Author: Mark Watts
:csid: markw
:eid: mw27428
:email: mark.watts@utexas.edu

Lecture 34
==========
1. The capacity is fixed. To transmit at a rate greater than C/h would imply an invalid encoding of the language because it the bits per symbol would be less than the entropy of the language.
2. In the example of repeated transmissions, the value on a position in the message body will average out to the correct value over several transmissions when the errors are distributed uniformly over the message body on each transmission.

Lecture 35
==========
1. According to the zero order model, the entropy is log_2(10) bits/symbol
2. It is difficult or impossible to find a representative sample of the language for the computation of frequencies for higher-order models.
3.  - Zero-order assumes no knowledge of character frequencies
    - First-order uses occurrences of 1-character sequences
    - second-order uses occurrences of 2-character sequences
    - third-order uses occurrences of 3-character sequences

Lecture 36
==========
1. Different observers have different priors.
2. Each observer has different knowledge about the likelihoods of particular messages.
3. Entropy and redundancy are inversely related.

Lecture 37
==========
1. The message is probably in English. The encryption is probably a substitution cipher.
2. Encryption may be based entirely on shared contextual information between sender and receiver, removing the need for an explicit key. Example: Encryption by translation into a dead language
3. The information content shouldn't change in an encryption.
4. Redundancy characterizes the message or the language which the attacker can use to reduce his uncertainty about the message contents.

Lecture 38
==========
1. P
2. Assuming the correct key is used, E(P, KE)
3. Patterns give information about the sender without needing to decode the messages themselves.
4. Character frequencies (known plaintext), larger patterns of messages.

Lecture 39
==========
1. It may so long to break that by the time it's broken, the message has been declassified or simply made irrelevant.
2. Taking n to be the number of bits in the key there are 2^n possible keys. The attacker can try decrypting a plaintext to its known ciphertext with each of the 2^n possible keys and eventually, it should work.
3. These operations underly all major encryption schemes.
4. Confusion is about changing a symbol's representation whereas diffusion is about changing the position of a particular symbol in the ciphertext.
5. Both are important for a good encryption scheme. Without diffusion, the attacker's task is reduced to decoding symbols on the order of the message size. Without confusion, the attacker still has n! (n the size of the message) ways to rearrange the ciphertext to get the message, but the correspondences to the message text could allow for character-frequency analysis to gain information about the message.

Lecture 40
==========
1. The substitution depends on the character position as well as value in a polyalphabetic cipher whereas the monoaplhabetic uses only the character value.
2. The key is a permutation of the alphabet.
3. There are k! keys for a k-member alphabet because the key is the size of the alphabet.
4. The Caesar cipher has the alphabet's shift distance for the key.
5. For a k-member alphabet, there are (k-1) possible keys
6. The Caesar cipher is not strong.
7. Given the key k and ciphertext c of equal length n, tableau t, and array m of length n::

       for each character k[i] in k:
           // t[k[i]] is the column of t corresponding to this key character
           find x such that t[k[i]][x] = c[i]
           set m[i] = x
       return m

Lecture 41
==========
1. The encryption scheme is unknown, so we must assume that a random key, three randomly chosen alphabetic characters, encode the message.
2. Using a simple substitution, both occurrences of y must encode the same character.
3. Yes. A random key with the same size as the message, as assumed in problem 1, for which each character is added to the key value, modulo the size of the alphabet, gives perfect security. Every character in the ciphertext has random offset to the message character, so there is nothing to be gleaned from the ciphertext.

Lecture 42
==========
1. Let M = {0,1}^n be the message space and C = {0,1}^n be the ciphertext space. Let m be an element of M and c be the encyption with one-time-pad. 
   For each bit c[i] in c, the probability that the corresponding bit m[i] is 0 is 1/2 and the probability that it is 1 is 1/2. The distribution on each bit is independent of all the others thanks to how the key is drawn. If an attacker were to guess each bit, he could do no better than chance.
2. Coming from the argument above, the assumption is that each bit for the key is sampled from a uniform distribution on {0,1}. If there were some bias or dependencies between the bits in the ciphertext, then the attacker could do better than chance by exploiting bias.
3. For the one-time pad (and other symmetric key protocols) it is necessary to give the key to both of the communicating parties before sending encrypting messages. However, sharing the key must be done securely in the first place. The key distribution problem asks how we can do this initial sharing.

Lecture 43
==========
1. Transposition preserves first order frequencies, reducing the size of the possible image of a given ciphertext.

Lecture 44
==========
1. OTP is symmetric.
2. Key distribution is about giving keys to other parties. Key management is about keeping track of keys for various uses. Management is more of a personal computing issue.
3. Yes. That's the whole point of having a public key in an authentication scheme. If you can decrypt some message with K_S, then it's highly likely that it came from S.
4. Neither is better, they just have different uses. They may be used together: the asymmetric system is used to share some secret for setting up the key for symmetric encryption.

Lecture 45
==========
1. Although block ciphers are slower, they provide more protection against tampering by providing some integrity checking: bad messages should look like garbage because of the high-diffusion of symbols into the block.
2. Malleability in a ciphertext allows for tampering without necessarily decoding the ciphertext (breaking the scheme). This can be bad for data integrity.
3. Homomorphic encryption can be useful for situations where a series of generic operations need to be performed on a data object without revealing the objects contents. Example: secure voting.

Lecture 46
==========
1. confusion: subBytes
2. diffusion: shiftRows
3. The same operations are performed, but the mixColumnns step uses the inverse of the encrypt matrix which doesn't have nice optimizations for multiplication in modern processors.
4. *Blocks* are n-bit sections of the message which on which operations are performed in iterations or *rounds* feeding the previous round into the next.
5. You would increase the number of rounds if you increased your key size.

Lecture 47
==========
1. Regularities on the order of block sizes create visible patterns in the ciphertext.
2. Remove the regularities by XOR-ing each block with a source of randomness which can be decoded.
3. - Information about which block changed first sequentially in a message can be determined from viewing ciphertexts before and after the change.
   - Some regularities (identical blocks) can still give information about the message.

4. Key stream generation is a way to create a key for encryption rather than a way to encrypt a message.

Lecture 48
==========
1. The private keys must be kept secret
2. For us to have public keys, generated by some function, we need to know that the shared secret used to generate the public and private keys can't be (easily) inverted even knowing the public key and method of encryption.
3. Given some public keys, we can share the private key to any of the public-key owners by encrypting to their public key.
4. {P}_K^(-1)
5. Symmetric encryption algorithms can be 10000 times faster because they can be computed with things like XOR operations rather than matrix multiplications and prime-number multiplication.

Lecture 49
==========
1. It would still work because the keys have the same mathematical properties in the RSA algorithms.
2. Factorization of large primes underlies the difficulty of the encryption scheme.
3. It isn't breakable if factorization of large primes remains a hard problem.
4. It can only be decrypted with the private key. The eavesdropper would need to recover the private key to read it, which should be as hard as factoring the primes used in key generation.
5. The encryption key is public -- any one could have used it to encrypt.
6. Only B should have B's private key.
7. They just use B's public key to decrypt.
8. For a message M, B will do: {{M}_Kb^(-1)}_Ka

Lecture 50
==========
1. Hash functions are employed for large volumes of arbitrary data.
2. In weak collision resistance, one of the messages must be chosen ahead of time. Strong collision resistance has no such constraint.
3. Pre-image resistance means that you can't find the thing that was hashed to some digest. Second pre-image resistance means that if you have one pair of message and digest, you can't find another pair where the digest is the same (i.e., where the digest has a second pre-image)
4. Approximately 1.25*sqrt(2^128) = 2.3E+19 digests must be searched. Don't hold your breath.
5. Approximately 1.25*sqrt(2^160) = 1.5E+24 digests must be searched. Forget about it.
6. CRHFs don't hide anything. They *could* be used for talking about shared objects over insecure channels, but the objects themselves need to be hidden to make these digests-as-names-for-objects useful.
7. Second pre-image resistance.
8. Hash the message M to get its digest D. Encrypt (M,D) as C = RSA((M,D), K_a). Send C to A.

Lecture 51
==========
1. He cannot send it because he doesn't have a R's secret key K_R^(-1).
2. If S did them in reverse order, he would lose authentication because anyone could decrypt his message with Ks, modify the internal message, and re-encrypt with some other key.
3. In general composition is not commutative for encryptions, so no.
4. Confidentiality and authentication.

Lecture 52
==========
1. An attacker with g, p and g^a mod p shouldn't be able to get anything: g and p are published in advance and g^a mod p is assumed to be sent over an unsecured channel. The attacker would have to break discrete log in a proper implementation to get at 'a'.
2. With 'a', an attacker can intercept messages from Bob and impersonate Alice.
3. With 'b', an attacker can intercept messages from Alice and impersonate Bob.
