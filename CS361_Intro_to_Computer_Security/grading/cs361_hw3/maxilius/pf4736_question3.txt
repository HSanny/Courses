CS 361 QUESTIONS WEEK 3
http://www.cs.utexas.edu/~byoung/cs361/questions-week3.pdf

Name: Perry Feng
EID: pf4736
CS Login: maxilius
Email: perry_feng@hotmail.com

Lecture 34
1. Why is it impossible to transmit a signal over a channel at an average rate greater than C/h?
Because that's how big the channel can hold. You can't fit any more signals in it if that's the top limit.

2. How can increasing the redundancy of the coding scheme increase the reliablity of transmitting a message over a noisy channel?
Increasing the redudancy of the coding scheme gives you the ability in the case that a signal is lost you can still capture the message because it was repeated multiple times.

Lecture 35
1. If we want to transmit a sequence of the digits 0-9. According to the zero-order model, what is the entropy of the language?
h = log2(1/10)

2. What are reasons why computing the entropy of a natural language is difficult?
Because there are so many factors that come into play that it's really hard to come up with the perfect (or close to perfect) encoding scheme. It requires very sophisticated models and eventually you're still might get an estimate.

3. Explain the difference between zero, first, second and third-order models.
Zero order model is where the probability for all symbols to appear is equally likely. The first order model is where the probability for the symbols differ in that some symbols occur more frequently than others. The second order model is like the first model but it takes into account the likelihood that a particular symbol will fall after another symbol. Unlike zero and first order model, the second model does not follow zero memory where one symbol is independent of another because for example in english if you see a letter like q you're more likely to see a u after. For a third order model, it's pretty much the second order model, but you add another symbol after that's most likely to follow the first two symbols.

Lecture 36
1. Why are prior probabilities sometimes impossible to compute?
Because it depends on what the knowledge of an observer knows. For example consider the entropy of the contents of an envelope marked "Best Picture" at the Academy Awards (assuming 5 nominees), if all were equally likely to win the entropy would be 2.322. For everyone who knows that the odds aren't even, it's less, though hard to compute and for the auditors who stuffed the envelope the entropy is 0 since they have no uncertainty. As a result, prior probability is impossible to compute because it's all relative.

2. Why is the information content of a message relative to the state of knowledge of an observer?
Because it depends on what the knowledge of an observer knows. For example consider the entropy of the contents of an envelope marked "Best Picture" at the Academy Awards (assuming 5 nominees), if all were equally likely to win the entropy would be 2.322. For everyone who knows that the odds aren't even, it's less, though hard to compute and for the auditors who stuffed the envelope the entropy is 0 since they have no uncertainty.

3. Explain the relationship between entropy and redundancy.
The entropy can be used to measure the amount of "redundancy" in the encoding. If the information content of a message is equal to the length of the encoded message, there is no redundancy.

Lecture 37
1. List your observations along with their relevance to cryptography about Captain Kidd's encrypted message.
The underlying language of the plaintext might be english. A pun (a kid a goats head which only works in english). If there are directions to treasure maybe there are south, northwest, 12 paces. if you can get clues to contents of a message it might be helpful to decrypt it. What characterstics of the source language and since it is english we know that some letters are more likely to show up than others. What is the likely nature/complexity of the encryption algorithm which is probably a simple substitution algorithm where symbols just replace letters in the text since it's some pirate who wrote it. Have any transformations/compressions have been applied prior to encryption so maybe they squeezed out spaces or left out some letters.

2. Explain why a key may be optional for the processes of encryption or decryption.
Because you don't necessarily need a key to encrypt and decrypt. It's just there to add another layer of protection or in other words another parameter there in order to do the encryption and decryption process. An algorithm that does not use a key is called a keyless cipher.

3. What effect does encrypting a file have on its information content?
The attempt is to hide the information content to be able to decrypted on the other side without anybody in the middle being able to understand it but not destroy it. Preserves the original meaning to the best of it's ability.

4. How can redundancy in the source give clues to the decoding process?
Redundancy in the encrypted message that is carried over from the plain text allows a decoder to have leverage in decrypting a message. Say letter e is very common in the language. If there is a lot of redundancy in other words a lot of e's in the text than the attack and substitute all the symbols, take Captain Kidd's encrypted message, with e's and try to guess the message.

Lecture 38
1. Rewrite the following in its simplest form. D(E(D(E(P)))).
P

2. Rewrite the following in its simplest form: D(E(E(P,Ke)Ke)Kd).
E(P,Ke) or {P}Ke

3. Why might a cryptoanalyst want to recognize patterns in encrypted messages?
A cryptoanalyst might want to recognize patterns in encrypted messages like traffic analysis where you might find when a crisis is going a particular entity is sending more messages so you can evaluate the traffic without knowing anything about the content so it gives you clue about the scenario.

4. How might properties of language be of use to a cryptanalyst?
Properties like the frequencies of symbols in english or any other language can definitely help. We talked about huffman coding which depends on us knowing things about the language and the frequency of symbols and we can get a pretty good encoding scheme if we know that.

Lecture 39
1. Explain why an encryption algorithm, while breakable, may not be feasible to break?
Because you can technically try out all the keys systematically. However, it will take hundreds of thousands of years and you'd be dead by then so technically it is not feasible to try out all the keys if you want to crack the encrypted text in a reasonable amount of time.

2. Why, given a small number of plaintext/ciphertext pairs encrypted under key K, can K be recovered by exhaustive search in an expected time on the order of 2^(n-1) operations?
Because there are 2^n possibilities and on average you find it half way there in a linear search so it's 2^n * 2^-1 which makes it 2^(n-1).

3. Explain why substitution and transposition are both important in ciphers.
Substitution is in which each symbol is exchanged for another (not necessarily uniformly). Transposition is in which the orders of symbols is rearranged. It's important because almost all modern commercial symmetric ciphers basically use combination of substitution and transposition for encryption algorithm.

4. Explain the difference between confusion and diffusion.
Confusion is transforming information in plaintext so that an interceptor cannot readily extract it. It aims to disrupt and confused the attacker. Substitution is very good at this. Diffusion is the spreading of information from a region of plaintext widely over the ciphertext. Transposition is very good at diffusion because it tends to move things/symbols around.

5. Is confusion or diffusion better for encryption?
Neither is better because both are complementary to the other of sorts. Most symmetric encryption algorithms use some sort of combination of substitution and transposition to accomplish both confusion and diffusion.

Lecture 40
1. What is the difference between monoalphabetic and polyalphabetic substitution?
If a symbol of the plaintext is exchanged for another symbol uniformly throughout the text it is called a monoalphabetic cipher. If different substitutions are made depending on where in the plaintext the symbol occurs, this is called a polyalphabetic substitution.

2. What is the key in a simple substitution cipher?
A table that says map a to this, map b to this and so on.

3. Why are there k! mappings from plaintext to ciphertext alphabets in simple substitution?
The cipher alphabet is a permutation of the base alphabet. For a set of k elements (alphabetical characters) there are k! permutations.
*********************************************************************

4. What is the key in the Caesar Cipher example?
It's how many positions you shift.

5. What is the size of the keyspace in the Caeser Cipher example?
Size of english alphabet is 26. or it could be 25 depending on how you look at it.

6. Is the Caesar Cipher algorithm strong?
No because you don't need to try all the possibilities until you get the right one.

7. What is the corresponding decryption algorithm to the Vigenere ciphertext example?
Well you have a key which is a group of letters that correlate with each letter in the plaintext. You grab that key letter and plaintext letter pair and you search for it in the Vigenere Tableau to get the cipher letter which eventually leads to a ciphertext.


Lecture 41
1. Why are there 17576 possible decryptions for the "xyy" encoding on slide 3?
because in the beginning we don't know if it is a simple substitution cipher or not. We only know that it's a substitution cipher and there are 26^3 possibilities because there are 26 letters in the english alphabet.

2. Why is the search space for question 2 on slide 3 reduced by a factor of 27?
Because we know that it is a simple substitution cipher so it is uniformally distributed meaning that both y's are the same letter so it's really 26 X 25 X 1 = 650 which has reduced the search space by a factor of 27.

3. Do you think a perfect cipher is possible? Why or why not?
A perfect cipher would be one for which no reduction of the search space is gained from knowing the encryption algorithm and the ciphertext. In this context, a one time pad is essentially a perfect cipher, assuming that the key is randomly generated.
************************************************

Leture 42
1. Explain why the one-time pad offers perfect encryption.
It offers perfect encryption/cipher because the key used has the same length as the plaintext. Plaintexts, ciphertexts, and keys are all the same length. In doing so, no matter even if you know the algorithm or what language it's in it doesn't decrease the search space because you still have to try out all the possible keys there is to decrypt the message.

2. Why is it important that the key in a one-time pad be random?
Because if you knew something about the key like if it was even parity meaning the key only can have even number of 1's, that allows you eliminate half of the overall possible plaintexts and doing so eliminates the idea of a perfect cipher.

3. Explain the key distribution problem.
It's where given the need to communicate securely where a sender and a receiver nee dto agree on a secret care so that they can use for the algorithm, if the sender and receive already have a secure channel, then why not just pass the plaintext through that channel and not have the key (because there is no point). And if they don't have a secure channel, how do they distribute the key securely? This is a problem.

Lecture 43
1. What is a downside to using encryption by transposition?
Since transposition reorders chracters, but doesn't replace them, the original characters still occur in the result. Letter frequencies are preserved and this can be used to a great advantage for an attacker given that the text has only be encrypted using transposition and nothing else.

Lecture 44
1. Is a one-time pad a symmetric or asymmetric algorithm?
One-time pad is a symmetric algorithm because it uses the same key for both encryption and decryption.

2. Describe the difference between key distribution and key management. 
Key management is where given a large number of keys, how do we preserve their safety and make them available as needed. Key distribution is how do we convey keys to those who need them to establish secure communication in a secure fashion. 

3. If someone gets a hold of Ks, can he or she decrypt S's encrypted messages? Why or why not?
No because you need the S's private keys in order to decrypt the S's encrypted messages. Ks is the public key. You can totally use Ks to encrypt whatever messages you want to encrypt, but for decrypting any message that you didn't encrypt but someone else did, then only S can read that message since she's the only one with the private keys.

4. Are symmetric encryption systems or public key systems better?
They can't be compared because they have very different approaches. Symmetric encryption uses randomly generated k bit strings, simple to generate and have no special properties. Public key system have a special structure like large primes and are usually very expensive to generate. 


Lecture 45
1. Why do you suppose most modern symmetric encryption algorithms are block ciphers?
Because stream ciphers have low diffusion while block ciphers have high diffusion or in othe words information of a plaintext symbol will be in the same(near) position as in the ciphertext. In block ciphers it's garbled and jumbled. Also, block ciphers are not susceptible to insertion/modifications because it's typically non-malleable while in stream encryption it is susceptible. In other words, block encryption is immune to tampering.

2. What is the significance of malleability?
If something is malleable, transformations on the ciphertext produces meaningful changes in the plaintext. This of course is not good because an attacker, if the algorithm is malleable, can remove some words and it won't affect the other plaintext and the original encrypter/reader wouldn't notice this change. Most modern cipher algorithms are non-malleable where a single bit change in the ciphertext will completely garble up the meaning in the plaintext. Block encryption normally have immunity to tampering.

3. What is the significance of homomorphic encryption?
Homomorphic encryption is the conversion of data into ciphertext that can be analyzed and worked with as if it were still in its original form. It allows complex mathematical operations to be performed on encrypted data without compromising the encryption. In mathematics, homomorphic describes the transformation of one data set into another while preserving relationships between elements in both sets.

Lecture 46
1. Which of the 4 steps in AES uses confusion and how is it done?
subBytes where for each byte in the array, use its value as an index into a 256-element lookup table, and replace byte by the value stored at that location in the table.

2. Which of the 4 steps in AES uses diffusion and how is it done?
shiftRows where like for example the first row gets shifted 0 bytes left, second row gets shifted 1 byte. third row 2 bytes etc.

3. Why does decryption in AES take longer than encryption?
Because when going backwards you need to multiply by using the inverse of the original matrix we used to multiple each column and in doing so it takes longer because the inverse has numbers which take longer to multiple (like 13 as oppose to 1 in the original matrix).

4. Describe the use of blocks and rounds in AES. 
So essentially you break up text into 4x4 blocks. Each blocks go through multiple rounds. Starts off with subBytes, shiftRows, mixColumns, and finally addRounds which is XOR the state with a 128 bit round key derived from the original key K by a recursive process. Essentially all 4 steps is one round. Do this multiple times to the same block like 10 for example and you have an encrypted ciphertext. Of course you need somewhere to store the subkeys as well as the inverted matrices in order to be able to decrypt the message.

5. Why would one want to increase the total number of Rounds in AES?
Increasing the total number of Rounds increases the number of subkeys, which in other words, makes the ciphertext much harder to decrypt.

Lecture 47
1. What is a disadvantage in using ECB mode?
Because you are encrypting each block with the same key in the plaintext, the encrypted message can be able to be decrypted/read if there are a lot of regularity and repetitive blocks in the plaintext which carries over into the ciphertext.

2. How can this flaw be fixed?
You can randomize blocks before they're encrypted by using CBC (Cipher Block Chaining) where you XOR each successive plaintext block with the previous ciphertext block and then encrypt. An initialization vector IV is used as a "seed" for the process.

3. What are potential weaknesses of CBC?
An attacker is able to observe changes to ciphertext over time will be able to spot the first block that changed. If an attacker can find two identitical ciphertext blocks, Ci and Cj, he can derive the following relation Ci-1 XOR Xj-1 = Pj XOR Pj and derive information about two plaintext blocks.

4. How is key stream generation different form standard block encryption modes?
Instead of encrypting text in blocks, it's essentially a pseudorandom number generator which generates a key that can be used in like a one time pad where the same key is used to encrypt and decrypt.

Lecture 48
1. For public key systems, what must be kept secret in order to ensure secrecy?
The private key must be kept secret.

2. Why are one-way functions critical to public key systems?
It must be easily to compute in one direction or in other words go from private keys to a public key (like in RSA) but not the other way around from a multiplication of two factors to their separate factors that you multiply to get that number.

3. How do public key systems largely solve the key distribution problem?
So it solves because anybody can see/hear/read the public key. A can give the public key to B to use for encryption. C over here can look at the public key but it doesn't matter because only A has the private key for the public key. So once B passes the messaged encrypted with A's public key, since only A has the private key for it, A can decrypt the message and only A can.

4. Simplify the following according to RSA rules: {{{P}k^-1}k}k^-1
{P}k^-1


5. Compare the efficiency of asymmetric algorithms and symmetric algorithms.
Public key encryption may take 10,000 times as long to perform as symmetric encryption because the computation depends on more complex operations, not on simple bit-wise operations.

Lecture 49
1. If one generated new RSA keys and switched the public and private keys, would the algorithm still work? Why or why not?
Yes the algorithm would still work because they are symmetric. If you encrypt it with private key you're able to decrypt it with public key and same vice versa.

2. Explain the role of prime numbers in RSA.
The thing about prime numbers in RSA is that when you multiply two really large prime numbers it's essentially a one way encryption so in other words, it's hard to go from public key to private key because you have to literally brute force all possible prime number, multiple them both together and see if it's the same as the public key and this will take a long time, therefore making it not feasible to break.

3. Is RSA breakable?
Not in a feasible/timely (in other words your lifetime, thousands of years+) fashion if the prime numbers (private keys) are large enough.

4. Why can no one intercepting {M}ka read the message?
Because only A has the private key to decrypt that message which is encrypted with A's public key.

5. Why can't A be sure {M}ka came from B?
Because anybody could've encrypted their message with A's public key and sent it to A. A doesn't know necessarily who encrypted that message.

6. Why is A sure {M}kb^-1 originated with B?
Because only B knows it's own private key.

7. How can someone intercepting {M}kb^-1 read the message?
If B is not careful enough and accidently leak his public key out and people know about it then they can intercept the message encrypted with B's private key and use B's public key to decrypt the message.

8. How can B ensure authentication as well as confidentiality when sending a message to A?
By typically using two sets of keys where one is used to authenticate the sender and the other to make sure privacy/confidentiality is maintained and that there is no eavesdropping.

Lecture 50
1. Why is it necessary for a hash function to be easy to compute for any given data?
So it can be easily stored somewhere and accessed efficiently and quickly.

2. What is the key difference between strong and weak collision resistance of a hash function?
The key difference is that weak collision resistance is bounded to a certain value or values in that there may be possible for collisions to happen but you know they won't for certain values. For strong collision resistance you know that no two messages hash to the same hash value for sure.

3. What is the difference between preimage resistance and second preimage resistance?
Preimage resistance is where given a hash value it is hard to find a message which hashes to the same hash value. Whereas second preimage resistance is where given an input message it is hard to find another message which hashes to the hash value as that message.

4. What are the implications of the birthday attack on a 128 bit hash value?
On average you'll need to look at 1.25 * 2 ^ 64 values before you find a collision.

5. What are the implications of the birthday attack on a 160 bit hash value?
On average you'll need to look at 1.25 * 2 ^ 80 values before you find a collision.

6. Why aren't cryptographic hash functions used for confidentiality?
They're mainly used for integrity. They do not provide protection on who can read what. They are there to see if a document has been altered or not. Cryptographic hash functions are byte binded to the file so any alteration to the file itself will alter the hash function itself and every time you access a file you compute the hash function and compare to the original value and if it's the same then it's most likely not been altered. 

7. What attribute of cryptographic hash functions ensures that message M is bound to H(M), and therefore tamper-resistant?
H(M) is computed based on the bytes of M. It's byte binded so in other words, if you change M, you will also indirectly change the hash function. It's tamper resistant because if anybody want to alter M, then H(M) will change and one will know by comparing the original hash function with the newly computed hash function.


8. Using RSA and cryptographic hash function, how can B securely send a message to A and guarantee both confidentiality and integrity?
*************************************************
So of course by default the default mechanisms of RSA provides confidentiality with only the public key visable being passed around. To provide integrity that the message hasn't been altered it will hash the file and store that somewhere before encrypting it with A's public key. Then it will hash it and send it to A which A would then decrypt it using it's own private key. And upon decrypting, it would actually hash it again and check with the hash previously calculated to see if they matched. If they matched, it means during the transfer of the message, the message has not been altered in any sort of way. For example, suppose you were using RSA in ECB mode. Some attacker could delete blocks from within the ciphertext and maybe not be noticed.

Lecture 51
1. For key exchanges, if S wants to send K to R, can S send the following message: {{K}ks^-1}kr^-1? Why or why not?
No. It should be encrypted with R's public key, not his private key. Encrypting it with R's private key and given people know R's public key, there would not be any confidentiality there since anybody can now decrypt it, not only just R.

2. In the third attempt at key exchange on slide 5, could S have done the encryptions in the other order? Why or why not?
No. Remember switching the order is essentially the same as encrypting it with the public key of R. And we know that encrypting it with just the public key of R does not guarantee authentication. If you want both authentication and confidentiality, then no they are not the same and thus it cannot be done in the other order.

3. Is {{{K}ks^-1}kr}ks equivalent to {{K}ks^-1}kr?
It's not equivalent because in the first expression, R wouldn't even be able to decrypt it. It's like S sending the message to himself which doesn't make much sense when S wants to send the message to R given. However of course that's not possible because it's encrypted with S's public key and only S has the private key to decrypt it.

4. What are the requirements of key exchange and why?
Key exchange requires both confidentiality and authentication. This is because you first one to make sure that if A wants to send a key to B, then only B can receive the key and no one else. Otherwise that would defeat the purpose of symmetric cipher algorithms. Also, you want to make sure that it was indeed A who sent B the key. You don't want some attacker spoofing A and sending you the key. That would allow the attacker access to the secret message and that of course would be very very bad.

DIFFIE-HELLMAN
Lecture 52
1. What would happen if g, p and g^amodp were known by an eavesdropper listening in on a Diffie-Hellman exchange?
Nothing would happen. The eavesdropper still wouldn't be able to calculate the secret key because he/she doesn't have b's secret number.

2. What would happen if a were discovered by an eavesdropper listening in on a Diffie-Hellman exchange?
Assuming the eavesdropper has caught the g, p, and g^bmodp which all can be caught in the unprotected channel and now knows a, he/she can then calculate the secret key.

3. What would happen if b were discovered by an eavesdropper listening in on a Diffie-Hellman exchange?
Same thing here like question 2. Assuming the eavesdropper has caught the g, p, and g^amodp which all can be caught in the unprotected channel and now knows b, he/she can then calculate the secret key.

