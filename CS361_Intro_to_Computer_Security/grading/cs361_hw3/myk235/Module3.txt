Name: Matt Kim
EID: myk235
CS Login: myk235
Email: matthewkim4u@gmail.com

Lecture 34
1. It is impossible because h is the most efficient encoding (smallest bits used on average), and to get a greater rate, you would need a better encoding
2. With more redundancy, there is more chance that even with noise, the same message will be sent anyways

Lecture 35
1. -(log(1/10)
2. Because certain symbols in the language appear more frequently than others, and because the ordering of letters means the frequency of letters is not independent
3. zero: all letters have same probabilities, first: all letters have their own probabilities (assuming independence), 2nd/3rd: letter di/trigrams are assigned their own probabilities

Lecture 36
1. they can be impossible because the entropy is dependent on knowledge which can be difficult to obtain
2. because the observer can have varying degrees of knowledge about the content itself (the sender will know all of the information, receiver may know it is 1 out of 5 possibilities)
3. If the length of a message is equal to the information content(entropy) then the message has 0 redundance

Lecture 37
1. The message could be in any language, it's possible that each encoded symbol can be translated to another symbol in the original language
2. A key may be optional if the method of encryption/decryption is known, and is easily executable without one.
3. Encryption hides the information content, but doesn't destroy it
4. Redundancy can tell an attacker the frequency of letters, which could be used to match up with frequently used letters in the source language

Lecture 38
1. P
2. C
3. patterns can help the cryptanalyst get closer to understanding the algorithm
4. properties of languages (ie frequencies of letters, digrams, etc) can help cryptanalysts find patterns in the encryption

Lecture 39
1. while it may be breakable by brute force, it might require a very long time to actually recover the plaintext by doing so (due to there being many different possibilities to search through by brute force)
2. there are 2^n different keys, on average it will take half that many tries to find the key, hence 2^(n-1)
3. both substitution and transposition are building blocks of encryption, and allow for complex ciphers that are difficult to analyze
4. confusion: transforms info in plaintext; diffusion spreads information from plaintext through a larger portion of ciphertext
5. depends?

Lecture 40
1. mono: 1 to 1 mapping between plaintext/ciphertext symbol, poly: different subs are made depending on the symbol's position in plaintext
2. the key is the map that shows relation between each cipher symbol and plaintext symbol
3. since each mapping is only used once, for a k-length alphabet, there are k possibilities for the first mapping, then k-1, then k-2, and so on. these probabilities are multiplied together, hence the factorial
4. the key is the 'distance' from the cipher letter to the plaintext letter
5. 26
6. Not strong
7. look up letter to decrypt in table, and line up with key letter

Lecture 41
1. Because each letter can be one of 26 possibilities, hence 26*26*26
2. If it's simple substitution, then both y's have the same cypher-symbol - there are only 26 * 25 different possiblities
3. It might be possible, if there is some other thing (authentification?) preventing easy access

Lecture 42
1. It is perfect because without knowing the key, it is possible for any plaintext to be converted to the known ciphertext; knowing the algorithm doesn't help
2. If the key is not random, eventually the key can be found and used for all intercepted ciphertexts using that key
3. The key must be sent securely, but if it's already insecure, how can you send the key securely? If it can be sent securely, why need a key?

Lecture 43
1. Transposition still keeps letter frequencies intact (but not digram), can be brute forced by trying different combinations of column/row length

Lecture 44
1. 1-time pad is symmetrical
2. distribution: how to give out keys to specific people, management: with large number of keys, how to keep them safe and available
3. No, Ks is only for encryption (public key)
4. public key systems are better distribution-wise (n keys for n people, as opposed to n squared for symmetrical)

Lecture 45
1. Most encrpytion is probably block ciphers because they are faster to use
2. an algorithm is malleable if changes in ciphertext make noticable differences in the decoded plaintext
3. homomorphic encryptions allow you to compute on ciphertext and make an encrypted result that matches results in plaintext

Lecture 46
1. subBytes: substitution
2. shiftRows: shifting rows
3. Inverting MixColumns requires multiplying each column by an array, so decoding takes longer
4. Blocks are modified 4 times each round, which helps increase the strength of cryptography
5. More rounds means more randomization/steps in creating the ciphertext

Lecture 47
1. Blocks that are identical in plaintext are identical in ciphertext; this ca nbe used to spot patterns
2. Can be fixed by randomizing blocks before they are encrypted
3. CBC lets attackers who can watch ciphertext changes spot the first changed block, and can derive information about two pliantext blocks if two identical ciphertext blocks are found
4. ith key stream generation, the cipher is used as a pseudo-random number generator - makes 1-time pad key stream

Lecture 48
1. private key must be kept secret
2. one-way functions allow for easy computation, but are very difficult to derive/invert keys by themselves
3. Because anyone can encrypt with the public key, only holders of private keys can decrypt; public keys can be freely distributed
4. {P)k-1
5. Asymmetric algorithms are much slower than symmetric ones (can be up to 10,000 times as long)

Lecture 49
1. It would still work, one factor can be used to find the other
2. Large prime numbers are used as factors, so that one can easily find the other factor given the product, but will be hard pressed to find factors without
3. RSA is breakable, but would take a very long time to break given today's technology
4. Only A has the private key, and can decode these messages
5. Because anyone can encrypt with A's public key
6. Nobody but b has that private key
7. They can use b's public key to read the message
8. Using 2 sets of keys: 1 for authenticity, and 1 for confidentiality

Lecture 50
1. Because it must be done efficiently and quickly for all types of data
2. strong: difficult to find 2 messages where f(m1) = f(m2), weak: see second preimage, below
3. preimage: if given h, hard to find m such that h = f(m), second preimage: hard to find m2 != m1 such that f(m1) = f(m2)
4. every 1.25*sqrt(128) bits will make an f(m2) equal to original f(m1)
5. every 1.25*sqrt(160) bits will make an f(m2) equal to original f(m1)
6. it can be more important to care about integrity instead in most cases
7. the has fucntion binds bytes of file together
8. Send 2 sets of keys for auth/conf, which are guarded by hashing

Lecture 51
1. No, it requires that S knows R's private key
2. Yes, S could have done so in the other order, as it would just be encrypting r with r's public key and encrypting it again with its own private key
3. No
4. Key exchange requires both confidentiality and authentification

Lecture 52 
1. Nothing. The eavesdropper needs to know a and b
2. The eavesdropper would be able to decode a's messages
3. The eavesdropper would be able to decdoe b's messages
