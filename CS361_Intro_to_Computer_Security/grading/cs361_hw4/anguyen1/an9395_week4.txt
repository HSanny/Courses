Andrew Nguyen
an9395
anguyen1
anguyen11@utexas.edu

Lecutre 53
1) So that it can't be reused for another message.

2) Public encryption is long. The message may be of arbitrary length, but
   the hash will be short.

3) R is assured that the message came from S, that S can't deny sending the
   message, that the message wasn't tampered with, and that the signiture
   cannot be reused.

Lecture 54
1) Certificate authorities vouch for the validity of a certificate.

2) To ensure that the hash came from X.

3) So that if either Y or Ky is changed, the hash will no longer be the
   same.

4) Then there is no guarantee from X that Y is who it claims to be.

Lecutre 55
1) At the root of a chain of trust is the initial user who vouched for 
   someone and created the first certificate.

2) So that certificates don't last forever and need to be renewed.

3) That something within the key, identity pair was altered.

Lecture 56
1) Some previously discussed protocols are Diffie-Helman Key Exchange and
   public key encryption.

2) If a step in a protocol is ignored, its results are no longer guaranteed.

3) The ciphers need to commute so that you can reach inside an encryption
   and undo your own encryption.

4) XOR message 2 and message 3 to obtain Ka. XOR Ka and message 1 to get M.

5) XOR message 2 and message 3 to obtain Ka.

6) XOR message 1 and message 2 to obtain Kb.

7) Cryptographic protocols are difficult to design and easy to get wrong,
   because they are an attempt to specify the steps to accomplish a broad
   task. Every step needs to take into consideration how an attacker might
   use anything at his disposal to compromise the message.

Lecture 57
1) Protocols are needed to establish how two parites communicate. Since the 
   internet is a series of connected networks, the need for communication 
   channels is paramount.

2) Anyone can impersonate anyone else on the internet. There needs to be a
   way to establish that someone is who they say they are. Thus, it is very
   important to have cryptographic protocols.

3) A and B have public and private keys. 

4) A and B establish a shared key.

5) No. There is a flaw that allows an attacker to find out the key by 
   intercepting the messages.

6) An attacker E grabs what A sends to B, and uses that as the "key" to send
   to B. It uses the fact that {{K}kb}kb-1 = K. So B breaks its own 
   encryption and sends back to the attacker {{K}ka-1}ke. E uses its private
   key and A's public key to gain access to K.

Lecture 58
1) Anything unnecessary potentially provides another vulnerability.

2) Encryption and decryption can be expensive operations. A protocol should
   only encrypt what it needs to.

Lecture 59
1) There are many different attributes and assumptions that must be 
   accounted for when trying to determine what constitutes an attack.

2) The parties may become confused if they start to see messages from the
   past that they were not expecting.

3) Yes. One example is an interleaving attack. The attacker may just be
   trying to disrupt normal processes.

4) It is assumed that the attacker can not generate any arbitrary message,
   i.e. a message encrypted with A's private key.

5) The system is distributed in nature, so protocols need to be designed in
   an asynchronous way. Parties need to know what step they are in a 
   protocol's process whenever they receive a message.

Lecture 60
1) Yes. The only problem is that there no more guarantee of freshness.

2) Step 1: A wants to tell S that it wants a key between A and B.
           S now knows the two parites and A's nonce.
   Step 2: S wants to tell A that there is now a key for A and B.
           A now knows that S recevied A's request and there is now a key.
   Step 3: A wants to tell B what the key is.
           B now knows what the key is.
   Step 4: B wants to tell A that it has received the key.
           A now knows B's nonce and that B has received the key.
   Step 5: A wants to tell B that it received B's acknowledgement.
           B now knows that A has looked at B's nonce.

Lecture 61
1) The attacker could use Kas to impersonate A and request another key from
   S.

2) Yes. You might assume that a key is not broken, but it would be wise to
   know what would happen if that key was compromised.

3) Include more nonces. Use certificates.

Lecture 62
1) Otway-Reese guarantees A and B that they will both receive a key so that
   they may communicate securely.

2) In Otway-Reese, there is a nonce associated with the communication
   betwen B and S. There is no such guarantee of freshness in Needham-
   Schroeder. Also, in Otway-Reese. there is no guarantee that A received
   they key from B.

3) Require the parties to use certificates.

Lecture 63
1) There are many different pitfalls for a protocol. Verification allows you
   to be as sure as possible that a protocol is safe.

2) A belief logic is a formal system for reasoning about beliefs.

3) Beliefs come in when a program trusts that someone is who they say they
   are, and that they know what they are talking about.

Lecture 64
1) Modal logic is a type of logic that allows for the expression of modality.

2) If A believes that it shares a key with B, and then it receives a message
   encoded with that key, it can infer that the message came from B, because
   only B has access to that key.

3) If A believes X is has only been said once and that B is the one who said
   it, then A believes that B believes X.

4) If A believes that B both controls X and believes in X, then A believes
   X, because B is the expert on X.

5) Idealization is the transformation of protocol steps to logical 
   inferences. It transforms the concrete statements of a program into a
   series of more abstract belief statements.

Lecture 65
1) Plaintext is omitted in a BAN idealization because all plaintext can be
   forged.

2) Because its role in the protocol is completed. If the rest of the 
   principals in the system carry out their roles within the protocol then
   something will be true. Thus there is a belief in something that happens
   later in the protocol

3) A BAN proof makes certain assumptions apparent. If these assumptions 
   cannot be guaranteed or appear surprising, then there might be a flaw in
   the protocol




