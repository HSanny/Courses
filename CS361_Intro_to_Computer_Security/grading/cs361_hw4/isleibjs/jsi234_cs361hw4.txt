Name: Jesse Isleib;
EID: jsi234;
CS Login: isleibjs;
Email: jesse.isleib@gmail.com;




Lecture 53


1) Otherwise authentication / non repudiation would be ruined
2) the hash may be a much shorter value
3) that S sent the message (because of the inside encoding- S’ private key), and only R can read it (outside encoding with R’s public key), thus S can’t deny sending it




Lecture 54


1) they bind a message encoded with a public key with an identity that sent it
2) to certify that Y is trustworthy and that Y sent it
3) to compare hashes presented by X and Y in this situation,
4) then X could have malicious intent. Examples: it confirms that you should trust Y, but in reality you shouldn’t, or maybe X has multiple sources, meaning anyone can use X to say that you should trust Y.



Lecture 55


1) “unimpeachable” authority must be there, certifying the “trusted source(s)” that hashes the values (“X” in the last few questions)--- everyone hopefully believes
2) it is an agreed upon time where the security of that certification (issuer’s key) is acceptably valid (changing the prime numbers used to generate keys/certificates, people finding that prime number..)
3) then either the “unimpeachable authority” is not so unimpeachable (which is less likely, as of their status), or the sender and/or “third partY” (X in the last scenario) has something bad going on with it.




Lecture 56


1) S encrypts K with it’s private key, THEN R’s public key. this protocol says that, once only R decrypts it like it can, it will see only S could have encrypted the file (and can decrypt it with the S public key)
2) authentication/non-repudiation ruined (S does not encrypt with its private key), confidentiality of message could be lost (S does not encrypt again with R’s public key)
3) if two parts (or more) of the encryption can be resolved, leaving something only one person would be able to decrypt.
4) The attacker stores all 3 messages. Once it has all of those, it can find the value of K_a by looking at the difference between the first ( M ) K_a, and the third ((( M ) K_a ) K_b ) K_a, find K_b by looking at the difference between K_a and K_b once it knows K_a, and then it can fully decrypt the file.
5) by having messages from (1) and (3)
6) by having messages (1) and (2)
7) they must be very secure, so they have to be smarter than attackers. if the steps you take in the protocol may somehow make a portion of the encryption useless, then it is somewhat ruined (information is not secure)




Lecture 57
1) controls how messages are distributed, interpreted, and that they occur at all
2) ensures that this communication is secure in the fundamental ways (unicity, integrity, confidentiality.. etc)
3) There’s a public key infrastructure being used, 
4) that B receives A’s message and then A receives B’s reply.
5) Not necessarily. other parties could be posing as B, and/or B’s public key may have become insecure
6) #5, among other possibilities; it’s not known for sure if a message was sent at the right time, if it was to be expected, if it’s just gibberish, that B is actually B receiving the message with B’s public key...




Lecture 58
1) to expect different times in sending/receiving between two parties
2) that way we can tell if the message needs decrypted, both clarifying instruction and probably helping throughput




Lecture 59 
1) There’s so many ways, each in a way that if you focus too much on one, another becomes a larger vulnerability (if you are 100% sure that A is A and B is B, then any interception of A’s messages can be resent to be at random times, and B will trust those messages as long as ceritificates / keys don’t change)
2) if you inserted random messages at random times, and those messages decoded to letters of the alphabet, all being legitimately sent from A to B, then you could basically make the final document of letters be random gibberish (attacker sends letters K, Y, L, Z, B randomly through the channel, with A’s identity. B can’t read the decoded message)
3) no
4) additional, unknown securities (more sources that the sender uses to create certificates, a certain signature or something that, if not recreated, the message is ignored upon receipt)
5) otherwise people would know how to predict and premeditate communication in a protocol






Lecture 60
1) No. If the numbers were used for more than one exchange of messages, attackers can find the number and expect it to be used later for anything they desire. Also they would have an indefinite amount of time to find the number.
2) 1. A tells S they want to communicate with B with nonce Na. S believes that A is really A.
    2. S gives A a key to communicate to B (integrity confirmed by resending the nonce), and gives a key for B with A’s label attached to it, encrypted so only B can see it. A believes that S is really S, and that it made an appropriate key between them.
    3.  A sends B the key shared between them, encrypted for B only. B assumes that they are using N-S encryption and that A is sending it to himself.
    4. B sends A a second nonce, encrypted with their shared key. A assumes that Kas nor Kab was intercepted.
    5. A sends B the nonce changed by subtracting one, encrypted again with their shared key. B assumes that A sent it, confirmed by the fact that the number changed (as it was only accessible through encryption by the two of them).




Lecture 61


1) By knowing the key shared between A and B, it can send messages as a middle man to find out secret information in later encryptions.
2) While we assume that the encryption is strong, we have to take into account if it is compromised. It’s only reasonable.
3) Changing the third step so that there was another shared nonce between them.




Lecture 62


1) That, as long as S stays secure, A and B can communicate with their respective secret keys with S.
2) The keys in N-S are more secure.
3) Authentication by a third party source.




Lecture 63
1) Otherwise the interpretation would be off, making the communication methods useless.
2) Belief logic is a proof-sort of logic that lets you assume what the subjects can expect, but potentially does not take into account other problems that attackers may employ.
3) Assuming that they reached the target safely, and that the program executes in full.




Lecture 64
1) it only shows the interaction between two things: subjects, subject & key.
2) If A shares a key with B, and a message is sent encrypted with that key, A can assume B sent the message.
3) if X is a fresh nonce, as believed by A, and B uses X, then A believes B believes X.
4) If B can create a new X, and B believes X, then A can believe X.
5) It helps to define the beliefs of the protocol’s users by taking out all non-general relationships.




Lecture 65
1) It can be changed easily, thus getting rid of a general belief system that can be applied to varios plaintexts.
2) Knowing what to expect later lets us make rules to define what we need to expect earlier in the protocol.
3) If A believes that B believes that A and B share a key, and the transverse, and they do share the key, then nobody needs to ASSUME that they can communicate with that key.