Name: Jung Yoon
EID: jey283
CS Login: jungyoon
Email: jungyoon@utexas.edu

***********************
********* HW4 *********
***********************

***** LECTURE 53 *****
1. Why is it important for a digital signature to be non reusable? 
→Should a digital signure be reusable, it would ruin three of the properties that it needs: unforgeable, authentic, and no repudiation. That is, if a digital signure was reusable, it would be easy for anyone to produce the signature, R wouldn't be able to verify that S signed the document, and S could deny producing the signature.  

2. Why is it the hash of the message typically signed, rather than the message itself? 
→It's because public key encryption is expensive to apply and the message might be arbitrailiy long but the hash will be a fixed, finite, short value. 

3. What assurance does R gain from the interchange on slide 4?
→It is unforgeable, authentic, no repudiation, tamperproof, and not reusable. It holds all the properties you would want from a digital signature.

***** LECTURE 54 *****
1. What is the importance of certiﬁcate authorities?
→We need some way of knowing that there's a binding between a public key and a user's identity. It's some party saying that you can trust the information given. 

2. In the example on slide 5, why does X sign the hash of the ﬁrst message with its private key?
→X is vouching for Y so X can't use its public key because that, in turn, would need to be vouched for by another certificiate. X is the certifying authority and as such, X must use its private key. 

3. Why is it necessary to have a hash of Y and Ky?
→We need to make sure that data items Y and K Y were not altered or corrupted. Plus, it's much less costly to use hashes. 

4. What would happen if Z had a public key for X, but it was not trustworthy?
→The entire system would be flawed because then you would need a certificiate for the vouching authority (i.e. X), to validiate X's trust. Then, there would be no point in having X vouche for Y. 

***** LECTURE 55 *****
1. What happens at the root of a chain of trust?
→Ideally, the chain is rooted at some unimpeachable authority. To be useful the chain must be rooted in a trusted author

2. Why does an X.509 certiﬁcate include a “validity interval”?
→The validity interval serves to measure the start and end times for validity. It tells you how long a certificate is valid for. If a certificiate is expired, there's no point in trusting it. 

3. What would it mean if the hash and the received value did not match?
→If the two are the same, it's pretty certain that the certificiate is correct. If the hash and the received value did not match, it would invalidiate the certificate and furthermore that the  data could have been altered. 

***** LECTURE 56 *****
1. What are some protocols previously discussed?
→A protocol is a structured dialogue. Some protocols we have previously discussed are public key encryption and covert channels. 

2. What may happen if one step of a protocol is ignored?
→There may be miscommunication and the message might be misinterpreted. Every step of the protocol should be considered because they are detailed. 

3. Why must the ciphers commute in order to accomplish the task in slide 4?
→We need to reach inside the outer encryption and take the inner encryption off but most algorithms don't allow this. We need it to commute (that is, do the encryption in any order) so that we can complete the steps.

4. Describe how an attacker can extract M from the protocol in slide 6.
→In step 3, the two applications of Ka “cancel out,” leaving ( M xor Kb ), which B can easily decrypt with his own key Kb. Also, an attacker who stores the three messages can XOR combinations of them to extract any of M, Ka , and Kb. To extract M, M XOR 0 is just M.

5. Describle how an attacker can extract Ka from the protocol in slide 6.
→You assume that the attacker has all of the messages that were sent. By XOR'ing them together, you can get any of M, Ka, or Kb. That's because if you XOR something with itself, gives 0. Ka XOR 0 is just Ka. 

6. Describle how an attacker can extract Kb from the protocol in slide 6.
→You assume that the attacker has all of the messages that were sent. By XOR'ing them together, you can get any of M, Ka, or Kb. That's because if you XOR something with itself, gives 0. Kb XOR 0 is just Kb.

7. Why are cryptographic protocols difﬁcult to design and easy to get wrong?
→It's difficult designing them to work so that they work robustly and efficiently yet have appropritate privacy due to the distributed nature of the environment. It's also difficult to define what constitutes an attack.

***** LECTURE 57 *****
1. Explain the importance of protocols in the context of the internet.
→Almost everything that occurs on the Internet occurs via a protocol. The internet itself needs communication between two or more parties to carry out functions. This applies to when you move a file, when you e-mail someone, etc. 

1. Explain the importance of cryptographic protocols in the context of the internet.
→A cryptographic protocol is a protocol using cryptographic mechanisms to accomplish some security related function. You want to have secure exchanges on the internet. You want to protect your assets so you need cryptographic prototcols. 

3. What are the assumptions of the protocol in slide 6?
→The assumptions are that there is a public key infastructure in place and the public keys are trustworthy. However, note that there is typically no guarantee that B receives the message, or is even expecting the message unless B replies. 

4. What are the goals of the protocol in slide 6?
→Unicity (secret shared by exactly two parties), integrity (message arrived unmodified), and non-repudiation both ways (sender/receiver can't deny sending/receiving). 

5. Are the goals of the protocol in slide 6 satisﬁed? Explain.
→Yes, and no. Yes, because, technically, A and B shared a secret. However, no, because we don't know if an attacker mixed up the messages. That is, This protocol is not secure. An attacker H might learn the secret M as follows.

6. How is the protocol in slide 6 ﬂawed?
→This protocol is not secure. An attacker H might learn the secret M as follows. Assume that H listens in and obtains from step 1 the message {{M}K −1 a }Kb that A sent to B. By initiating a new run of the protocol with B and using this message as if it were a new secret M, it is possible for H to discover the original secret.

***** LECTURE 58 *****
1. Why is it important to know if a protocol includes unnecessary steps or messages?
→Like with the other items in the set of protocol questions, you want to know your protocol's faults. As has been said before, protocols are extremely difficult to design and easy to get wrong. You want to know if a protocol includes unnecessary steps or messages because that could be a potential weakness for the protocol; that portion could be susceptible to an attack. 

2. Why is it important to know if a protocol encrypts items that could be sent in the clear?
→As like the first question, this one is important as well because it is an issue in protocol implementation that you should be aware of when designing one. The answer is the same as above. Like with the other items in the set of protocol questions, you want to know your protocol's faults. As has been said before, protocols are extremely difficult to design and easy to get wrong. You want to know if a protocol includes unnecessary steps or messages because that could be a potential weakness for the protocol; that portion could be susceptible to an attack. 

***** LECTURE 59 *****
1. Why might it be difficiult to answer what constitutes an attack on a crypto-graphic prototocol?
→It's difficult to give it a set definition. It has too many dependencies and it really does change on a case-by-case basis.  Just one of the many questions we need to ask ourselves is if it is possible to impersonate one or more of the parties. 

2. Describe potential dangers of a replay attack. 
→A replay attack is when the attacker records messages and replays them at a later time. A potential danger is that the attacker confuses the parties. Another potential danger is that the attacker could record confidential information from parties and use them in the future. 

3. Are there attacks where an attacker gains no secret information? Explain. 
→Yes, for example, there's the interleaving attack in which the attacker injects spurious messages into a protocol run to disrupt or subvert it. The attacker's goal isn’t to gain secrets but to disrupt/subvert the protocol. Some of the protocol attacks mess up the protocol, but don't reveal anything to the attacker.

4. What restrictions are imposed on the attacker?
→The designer of a protocol should assume that an attacker can access all of the traﬃc and interject his own messages into the ﬂow. However, there are limitations on what the attackers can accomplish and what reprecusions those attacks can cause. One restriction, for example, is assuming that the attacker can't write a message that's encrypted with a key he doesn't have. 
 
5. Why is it important that protocols are asynchronous?
→The protocol should be robust in the face of such a determined and resourceful attacker. Due to the distributed nature of the system, protocols must be highly asynchronous. And furthermore, the distributed nature of the system means that no-one but the initiator knows the protocol is running until they recei ve their ﬁrst message. 

***** LECTURE 60 *****
1. Would the Needham-Schroeder protocol work without nonces?
→The protocol would still work, technically, but it would be flawed without the gaurentee that the  messages are fresh and not a replay from an earlier exchange. It would also be unfair to call it a  Needham-Schroeder protocol still if the nonces were taken out because the nonces are a vital factor in the protocol. Note that without nonces, there is no way
for the receiver to know if the relation key it receives is fresh. An intruder has
unlimited time to crack an old session key and reuse it as if it were fresh. It wouldn't be a really good protocol at all. 

2. For each step of the NS protocol, answer the two questions on slide 5.
→Step1: 
(Sender's message) Hey, S! I’m A and I want to talk to B, so generate a new key for us. And by the way, here’s a nonce that you can use in subsequent messages so we’ll be sure that you’re responding to this request. (Receiver believes) A wants to talk to B, so I need to generate a new session key and get it to them. I should use Na in the response so that they’ll know it’s fresh.

Step2: 
(Sender's message) S generates an appropriate session key Kab for use by A and B and sends it to A in a message encrypted with their shared key Kas.
(Receiver believes) S has set up our shared key and it's valid and timely because of the nonce. Nice. 

Step3:
(Sender's message) A relays the new session key to B.
(Receiver believes) A send me the new session key and it's valid and timely because of the nonce. 

Step4: 
(Sender's message) B sends an acknowledgement to A.
(Receiver believes) B got my message so yay! And it's valid because B sent me a new nonce. Cool.

Step5: 
(Sender's message) A sends a followup to B, essentially making the nonce void.
(Receiver believes) A got my message so yay! And it's a valid reply because A sent me the nonce but it's void now. A new nonce has to be made for future correspondence but that's not my job, at least not for the moment. 

***** LECTURE 61 *****
1. As in slide 5, if A’s key were later changed, after having Kas compromised, how could A still be impersonated?
→The flaw is where Kas is stolen and someone could impersonate A and be A when communicating with S. Kas is just a key in a symmetric algorithm. Someone might brute force it, given enough time.

2. Is it fair to ask the question of a key being broken?
→No, because it is a presumption of any cryptographic protocol that the encryption is strong? It's good to think about protocols from every angle but we have to assume that the key is not broken if there is no reason to question it. 

3. How might you address these ﬂaws if you were the protocol designer?
→One way to address the first flaw (compromised A) would be to have it where Kas also has to be reset when A's keys are changed. That is, the system can't keep using the same Kas for the entire run. That way, we can ensure that A can't keep being compromised. One way to address the second flaw (possibility of key being broken), is to simply reset A's keys every so often. We wouldn't be questioning the key being broken but we would rather be preventing A from being impersonated. It would be killing two birds with one stone. 

***** LECTURE 62 *****
1. What guarantees does Otway-Rees seem to provide to A and B?
→It is decently sychronized in that both parties know that the exchange of keys will happen before hand pretty much, whereas in Needham Schroeder B receives a key out of nowhere.

2. Are there guarantees that Needham-Schroeder provides that Otway-Rees does not or vice versa?
→Needham Shroeder provides authentication back to A that B has already received the message, whereas in OR, B doesn't know that A has received the key or not. The point of view of idealization is the the protocol has run and now you're asking, in hindsight, what was the purpose of each step.

3. How could you ﬁx the ﬂawed protocol from slide 4?
→The trick is preventing the encryption and decryption steps from being right next to each other. You can change the protocol to prevent that in a number of ways.

***** LECTURE 63 *****
1. Why is the veriﬁcation of protocols important? 
→Protocols are crucial to the Internet; it would be great to ge t them right. Protocols can be notoriously diﬃcult to get correct. Flaws ha ve been discovered in protocols published many years before. It would be nice to be able to reason formally about protocol correctness, which is what verification is. You want to make sure that your protocol is as valid as possible, and formalize it at that. 

2. What is a belief logic? 
→A belief logic is a formal system for reasoning about beliefs . Any logic consists of a set of logical operators and rules of inference. Belief logics allow reasoning about what principals within the protocol should be able to infer from the messages they see. Allows abstract proofs, but may miss some important ﬂaws.

3. A protocol is a program; where do you think beliefs come in?
→Protocols are crucial to the Internet; it would be great to ge t them right. For this reason, we need to have reasoning behind protocols. In turn, reasoning rigorously about protocols requires some way of formalizing their behavior and properties. Belief logics is such an approach.

***** LECTURE 64 *****
1. What is a modal logic?
→ Modal logic is a type of formal logic that expresses modality using propositional and predicate logic. The BAN logic is a modal logic of belief. It has 10 primitive modal operators including (P believes X, A sees X, etc.). 

2. Explain the intuition behind the message meaning inference rule.
→If A believes (A share(K) B) and A sees { X } K then A believes(B said X).

3. Explain the intuition behind the nonce veriﬁcation inference rule.
→If A believes X is fresh and A believes B once said X, then A believes B believes X.

4. Explain the intuition behind the jurisdiction inference rule.
→If A believes B has jurisdiction over X and A believes B believes X, then A believes X.

5. What is idealization and why is it needed?
→To get from protocol steps to logical inferences, we have a pr ocess called idealization. This attempts to turn the message sent into its intended semantics. One purpose of idealization and a reason why it is needed is to omit parts of the message th at do not contribute to the beliefs of the recipients.

***** LECTURE 65 *****
1. Why do you think plaintext is omitted in a BAN idealization?
→One purpose of idealization is to omit parts of the message that do not contribute to the beliefs of the recipients. In BAN all plaintext is omitted since it can be forged.

2. Some idealized steps seem to refer to beliefs that will happen later in the protocol. Why would that be?
→Idealization of the protocol is not deﬁned unambiguously. It depends on the interpretation of the meaning of some steps. That is, idealization of steps changes relevant information regarding the longterm system, not just for the current state. 

3. One beneﬁt of a BAN proof is that it exposes assumptions. Explain that.
→You have to postulate some reasonable initial assumptions about the state of knowledge/belief of the principals. Also, using BAN proofs exhibit some assumptions that were not apparent, which is the point. Use of a logic like BAN shows what is provable and also what must be assumed.

***********************
********* END *********
***********************
