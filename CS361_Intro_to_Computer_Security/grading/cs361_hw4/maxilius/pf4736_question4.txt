Week 4 questions

Source: http://www.cs.utexas.edu/~byoung/cs361/questions-week4.pdf

Name: Perry Feng
EID: pf4736
CS Login: maxilius
Email: perry_feng@hotmail.com

Lecture 53:
1. Why is it important for a digital signature to be non reusable?
We don't want that signature to be be used for other purposes/attached to other messages. It's like taking someone's signature and printing it on another check for nefarious purposes.

2. Why is it the hash of the message typically signed, rather than the message itself?
Public key encryption is already expensive to apply and we don't know the length of the message because it's arbitrary long but the hash is finite and short and it was be much more efficient signing the hash of the message. 

3. What assurance does R gain from the interchange on slide 4?
The message is unforgeable because only S has it's own key and can unlock it because it is encrypted with S's public key. It's authentic because a third party can verify the signature with Ks. There is non repudiation because only S has it's own private key and only it can sign with it's own private key. It is also tamper proof because only R can remove the outer layer of encryption. IT is also nonreusable because the signature is tightly bound to the message M so there is no way to separate the signature from the message.

Lecture 54
1. What is the importance of certificate authorities?
Because we need a trusted third party that confirms the accuracy of the binding between a public key and a user's identity together within a certificate.

2. In the example on slide 5, why does X sign the hash of the first message with its private key?
Because x is the third party that both parties trust and by having X sign it, we are assured that someone only someone trustworthy has altered it and was the one who hashed both public key and private key together.

3. Why is it necessary to have a Y and Ky?
It is necessary to also have Y and Ky in the message because in doing so it gives the other person the ability to recompute the hash and check with the hash already precomputed by x, which is signed by x's private key in order to give assurance that it was indeed x, the trusted third party that signed/hashed it.

4. What would happen if Z had a public key for X, but it was not trustworthy?
Then Z could potentially be sending information to an impersonator that has the public key for X which of course is pretty bad. This is why we have protocols that deal with this like Needham Shroeder.

Lecture 55
1. What happens at the root of a chain of trust?
The idea is that a chain of trust has to be rooted in some authority. If the chain of trust too long, things may get complicated.

2. Why does an X.509 certificate include a "validity interval"?
If this certificate was for a certain interval and we are outside the interval, then there is no reason to believe it because it has expired already. 

3. What would it mean if the hash and the received value did not match?
If the hash and the received value did not match it means that it probably was tampered somewhere along the middle of it's route with and that it is not the same thing that the issuer has intended to send.

Lecture 56
1. What are some protocols previously discussed?
Public key encryption and Diffie-Hellman Key Exchange are some protocols previously discussed.

2. What may happen if one step of a protocol is ignored?
If one step of a protocol is ignored, then the protocol as a whole wouldn't work. Every step must be followed in order for a secure transfer of data.

3. Why must the ciphers commute in order to accomplish the task in slide 4?
Because you want to be able reach inside the other person's encryption to undo yours therefore allowing him to open the box since by then only his encryption is on the box. 

4. Describe how an attacker can extract M from the protocol in slide 6.
First you'll need to get ka. Follow step in question 5 to get ka. Then after you get ka, xor with the first message which is (m xor ka) and doing so you'll end up with just m.

5. Describe how an attacker can extract Ka from the protocol in slide 6.
You'd xor ((M xor Ka) xor kb) with (((m xor ka) xor kb) xor ka) and you'd end up with ka.

6. Describe how an attacker can extract Kb from the protocol in slide 6.
To get Kb then you'd xor (M xor Ka) with ((M xor ka) xor kb), doing so you end up with Kb only. 

7. Why are cryptographic protocols difficult to design and easy to get wrong?
Because you have to make sure that in making a protocol, you don't introduce new problems and vulnerabilities like the earlier problem with one time pad where trying to implement a protocols that works with real life locks doesn't really work out right in digital encryption. 

Lecture 57
1. Explain the importance of protocols in the context of the internet.
A protocol is a structured dialogue among two or more parties in a distributed context controlling the syntax, semantics, and syncrhonization of communication, and designed to accomplish a communication-related function. It's important in the context of the internet because we do a lot of communication like FTP or email things like this that need to have a protocol to it so make sure everything is safe and gets to where it gets to and comes from where it should come from.

2. Explain the importance of cryptographic protocols in the context of the internet.
A cryptographic protocol is a protocol using cryptographic mechanisms to accomplish some security-related function and this is important because this is pretty much you can think of between metapolicy and policy. It's a subset of protocol where you use cryptographic means and it allows the protection of data from one person to another in a noisy environment like the internet where data is coming and going every everywhere every second.

3. What are some assumptions of the protocol in slide 6?
That there is a public key infrastructure in place and that each of them have a reliable version of the other's public key. 

4. What are the goals of the protocols in slide 6?
The goal is that both parties know that the other has the key and can use it and know that A is actually talking to B and B is actually talking to A.

5. Are the goals of the protocol in slide 6 satisfied? Explain.
Unicity, Integrity, and Confidentiality have all been broken.

Authenticity, Non-repeduation of origin, non-repudiation of receipt have been maintained.

The informal goal(goals) have not been satisfied. The informal goal is if A shares with B a secret key K, and each party is authenticated to the other. Authenticity is maintained because of course each party know that whoever sent it was indeed who sent it because only they have their own private key. However the first part where A shares with B a secret key K is obviously unicity and that has been broken unfortunately because you since the encryption and decryption are right next to each other if an attacker captures one of the messages and sends it to B for B to encrypt with his private key only to be sent back then B's private and public key cancel, thus revealing K, the secret information violating unicity, integrity, and confidentiality all at once.

6. How is the protocol in slide 6 flawed?
Suppose that the attacker C somehow obtains the message {{K}ka-1}kb and sends this to B. B would then encrypt that message with it's own private key for authentication and then encrypt that with C's public key. However of course doing so would actually cancel b's public and private encryption leaving only {{K}ka-1}Kc. C would then be able to unwrap that with it's own private key and then since A's public key is public it would then is that to decrypt and finally extract K.

Lecture 58
1. Why is it important to know if a protocol includes unnecessary steps or messages?
Because you can potential increase efficiency by taking out unnecessary steps that you don't need.

2. Why is it important to know if a protocol encrypts items that could be sent in the clear?
Once again like the answer above doing so would increase efficiency and you'd be able to send messages much faster if you know certain items don't need to be encrypted.

Lecture 59
1. Why might it be difficult to answer what constitutes an attack on a cryptographic protocol?
It might be difficult because a lot of things could mean an attack. Things like are both authentication and secrecy assured or is it possible to impersonate one or more of the parties can be both considered attack. You have to be specific.

2. Describe potential dangers of a replay attack.
Dangers would be someone posing as someone else to gain entrance into a system. For example suppose B is listening to A's messages and somehow captures a password to a system. Later on when B wants to access the system it sends the system the password and gets in. Ways to prevent this would be using session tokens.

3. Are there attacks where an attacker gains no secret information? Explain.
Some of the protocol attacks mess up the protocol, but don't reveal anything to the attacker. It seems to be that this may be an attack on availiability in that it is preventing the system from being available/doing it's job which is exactly what DDoS is.

4. What restrictions are imposed on the attacker?
There are restrictions based on what the attacker can and cannot do. However as mentioned in the video, it is hard to say exactly what those constraints are if you don't know the vulnerabilities of your system.

5. Why is it important that protocols are asynchronous?
A party to a protocol won't know anything about the current run of the protocl except the messages it has received and sent. Except for the initiator, other parties will not even know that they are participating until they receive their first message.

Lecture 60
1. Would the Needham-Schroeder protocol work without nonces?
No because the sender needs to know that B's message was fresh and needs the nonce, a randomly generated number, to verify that it is indeed fresh and not a replay of a previous message (which can be a replay attack).

2. For each step of the NS protocol, answer the two questions on slide 5.

a. What is the sender trying to say with this message?
The sender is trying basically to say that he wants S to generate a key for both the sender and receiver. S does that. A gets the key that receiver and S share and sends it off to B. B gets it and replies with a new nonce and a replies with nonce - 1 to show that it acknowledges that the receiver received the key.

b. What is the receiver entitled to believe after receiving the message?
The receiver is entitled to believe that it is on step 3 since it seems that S also has the same key so it assumes that step 2 where key generation has already passed and they are on step 3 ready to move onto the confirmation part where B says to A that it has received it and A letting B know that it has received the notice.

Lecture 61
1. As in slide 5, if A's key were later changed, after having Kas 
compromised, how could A still be impersonated?
It seems to me that A's key would need to be compromised again because it has changed if the attacker wants to keep impersonating A. The attacker may bruteforce and impersonate A through that way.

2. Is it fair to ask the question of a key being broken?
Yes and no depending on the strength of the encryption. If the encryption is strong enough where it is not feasible to bruteforce the key in a reasonable amount of time, then I see no need to ask this question. 

3. How might you address these flaws if you were the protocol designer?
Well for the first flaw when A sends the key generated by S after step 2 to B in step 3, I would make make A generate a nonce to B encrypted with a Kab. I would then get B to decrypt that and do nonce - 1 and send it back to A. A would then get that nonce and package that with {Kab,A}kbs AND the nonce - 1. Then the rest is same from step 4 and 5. For the second flaw, Kas is just a key in a symmetric algorithm. The flaw is if it's a weak key, someone might brute force it given enough time. A way to of course to prevent this is to increase the complexity of the key so it would take an infeasible amount of time to brute force/crack it.

Lecture 62
1. What guarantees does Otway-Reese seem to provide to A and B?
S can authenticate both A and B so that it knows it's A and B that it's talking to. 

2 Are there guarantees that Needham-Schroeder provides that Otway-Reese does not or vice versa?
Needham Shroeder provides authentication back to A that B has already received the message whereas in otway reese B doesn't know that A has received the key or not. What Otway-Reese provides that Needham Schroeder doesn't is it's pretty synchronized in that both parties know that the exchange of keys will happen beforehand and pretty much whereas in Needham Schroeder B receives the key out of nowhere since it did not expect it the connectio nin the first place.

3. How could you fix the flawed protocol from slide 4?
The trick is preventing the encryption and decryption steps from bing right next to each other. A good way to do this is before B sends the message to C for example, it would first encrypt it with C's public key. THEN it would encrypt it the result with B's private key. THEN it will encrypt THAT with C's public key again. This I believe, by making it so encryption and decryption are not right next to each other, should fix the problem.

Lecture 63
1. Why is the verification of protocols important?
Protocols can be notoriously difficult to get correct. Flaws have been discovered in protocols published many years before so it would definitely be nice to be able to reason formally about protocl correctness and catch potential flaws before releasing the protocol for mass usage.

2. What is a belief logic?
Belief logic allows reasoning about what principals within the protocol should be able to infer from the messages they see. It allows abstract proofs, but it may miss some important flaws. It is a formal system for reasoning about beliefs. Any logic consists of set of logical operators and rules of inference.

3. A protocol is a program; where do you think beliefs come in?
Reasoning rigorously about protocols is difficult and requires some way of formalizing their behavior and properties. Belief logics is such an approach for this.

Lecture 64
1. What is a modal logic?
It is a type of formal logic that extends classical propositional and predicate logic to include operators expressing modality. You've got a set of primitives for describing formulas and a set of inference rules for infering new facts from facts that you already have in your database.

2. Explain the intuition behind the message meaning inference rule.
If A believes that A and B share a K and A receives a message that is encrypted with that K that is only shared between A and B you can automatically assume that whoever sent that message was B because no one else would be able to send it besides B. A cannot send a message to himself that wouldn't make any sense.

3. Explain the intuition behind the nonce verification inference rule.
If A believes X is fresh and A believes B once said X, then A believes B believes X so essentially saying that if a statement is verified or in other words, most accurate to date, and A believes B once said X, then A believes B believes X. For example, if some outdated scientific fact was not fresh, and A believes B once mentioned this outdated scientific fact, then A cannot believe B believes X. Now if it was the opposite where the fact is most recently true and A believes B once mentioned X, then A can believe that B believes X.

4. Explain the intuition behind the jurisdiction inference rule.
It's essentially saying that if A believes that B is an authority over X or in other words, B is an expert in X and A believes that B believes in X, then A is entitled to believe what B believe because he is an expert and therefore his expert status allows A to believe whatever B believe. 

5. What is idealization and why is it needed?
To go from protocol steps to logical inferences, we have a process called idealization. This attempts to turn the message into its intended semantics. One purpose of idealization is to omit parts of the message that do not contribute to the beliefs of the receipients. It is defined unambiguously as it depends on the interpretation of the meaning of some steps.

Lecture 65
1. Why do you think plaintext is omitted in BAN idealization?
Because plaintext is plaintext. It doesn't involve encryption or any process so there's no point to idealize it because it's already in it's most basic form and nothing else can be conjectured from this besides it's just a plaintext and nothing like an operation or such.

2. Some idealized steps seem to refer to beliefs that will happen later in the protocol. Why would that be?
The point of view of idealization is that the protocol has run now and now you're asking, in hindsight, what was the purpose of each step.

3. One benefit of BAN proof is that it exposes assumptions. Explain that.
It forces you to write down assumptions and allows you to reason through your proof and should give you more insight.
