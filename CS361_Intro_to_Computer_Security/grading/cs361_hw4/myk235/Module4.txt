Name: Matt Kim
EID: myk235
CS Login: myk235
Email: matthewkim4u@gmail.com

Lecture 53
1. So that the signature can't be used for another message
2. Hash is short, finite, whereas message may be very long
3. Message is unforgeable (has ks-1), authentic (sig can be found with Ks), no repudiation, tamperproof (only r can remove outer) and not reusable

Lecture 54
1. Certificates bind pkey to an authority, cert. authority vouches for the binding (in web of trust)
2. So that it is non-replicable
3. The hash acts as the certificate
4. Without a good key, the signature would look incorrect

Lecture 55
1. The root of a chain of trust is attached to an unimpeachable authority
2. It tells viewers how long the certificate is valid for
3. IF the hash and the received value do not match, it means the certificate is invalid

Lecture 56
1. BLP/Military security (protecting confidentiality)
2. If one step of a protocol is ignored it would be very possible for the message to be intercepted/tampered with
3. They have to commute because if you cannot reach your encryption within the encryption of the other user, then you cannot resend a usable message back
4. (2 XOR 3) XOR 1
5. 2 XOR 3
6. 1 XOR 2
7. You have to keep many different potential attacks in mind

Lecture 57
1. Almost everything that happens on the internet is a protocol: a structured dialog between 2 parties
2. cryptographic protocols allow for more secure, secretive interactions on the internet
3. Assumes public key infrastructure in place (reliable keys are present)
4. Each party knows they have the key/can use it
5. The goals are satisfied 
6. If C finds the message then it can run the protocol again and extract K

Lecture 58
1. Unnecessary steps slow down the bandwidth of the message-sending
2. Because the protocol would be unnecessary, and slow

Lecture 59
1. It depends on your assumptions about the system
2. Replay attack - could be danger to confidentiality
3. Spreading misinformation could be an attack where no secret information is obtained
4. Depends on type of message/system the protocol is based on
5. Because of its distributed nature; each sender has to wait around for the other's messages

Lecture 60
1. Without nonces, it is possible for attackers to use replays from earlier exchanges
2a. sending to S that it wants to communicate with B and adds nonce, receiver can know who to send what
2b. S gives key between a and b, a can now communicate with B
2c. A sends to b the latter part of its message, which only B can read with Kbs
2d. B sends back to A a nonce, which A sends back so that both know they can communicate securely 

Lecture 61
1. You can still gather tickets and open confidential info
2. Depends on your assumptions, usually it is assumed that the encryption is strong enough
3. Use better protocols

Lecture 62
1. that A and B know that they are communicating with one another
2. A and B can end up with different keys by an intruder's meddling
3. More authentification

Lecture 63
1. Verification allows you to find out if protocols are working correctly and where (if any) the problems are
2. Belief logic is a formal system for reasoning about beliefs (what each princiapl should see)
3. Beliefs tell us what parts of the program should be doing

Lecture 64
1. Uses primitives and assigns certain qualifications to them
2. If A believes it shares a key with B and it sees an X locked with that key, then it thinks B sent it
3. If A believes X is a new message, and that B once sent this message, then B currently believes it
4. If A thinks B can access X, and A thinks B finds X trustworthy information, then A thinks X is trustworthy
5. it turns the message sent into its intended semantics, it helps omit parts of the message that do not contribute to the beliefs of the recipients

Lecture 65
1. Plaintext is omitted because it can be forged
2. Because those beliefs are assumed to always occur after that point?
3. By dissecting messages into parts with intended uses, you can find out what parts are already necessary