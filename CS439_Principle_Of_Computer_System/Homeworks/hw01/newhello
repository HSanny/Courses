	.section	__TEXT,__text,regular,pure_instructions
	.globl	_main
	.align	4, 0x90
_main:
Leh_func_begin1:
	pushq	%rbp
Ltmp0:
	movq	%rsp, %rbp
Ltmp1:
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
Ltmp2:
	cmpl	$2, %edi
	je	LBB1_3
	leaq	L_.str2(%rip), %rdi
	callq	_puts
	movl	$-1, %eax
LBB1_2:
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
LBB1_3:
	movq	8(%rsi), %rdi
	xorb	%al, %al
	callq	_atoi
	leaq	L_.str(%rip), %rbx
	leaq	L_.str1(%rip), %r14
	movl	%eax, %r15d
	jmp	LBB1_4
	.align	4, 0x90
LBB1_10:
	movq	%r14, %rdi
	callq	_puts
	addl	$-2, %r15d
LBB1_4:
	testl	%r15d, %r15d
	jns	LBB1_6
	xorb	%al, %al
	movq	%rbx, %rdi
	movl	%r15d, %esi
	callq	_printf
LBB1_6:
	testl	%r15d, %r15d
	je	LBB1_11
	leal	-1(%r15), %r12d
	movq	%r14, %rdi
	callq	_puts
	testl	%r12d, %r12d
	jns	LBB1_9
	xorb	%al, %al
	movq	%rbx, %rdi
	movl	%r12d, %esi
	callq	_printf
LBB1_9:
	cmpl	$1, %r15d
	jne	LBB1_10
LBB1_11:
	leaq	L_.str3(%rip), %rdi
	callq	_puts
	xorl	%eax, %eax
	jmp	LBB1_2
Leh_func_end1:

	.globl	_printHelloWorld
	.align	4, 0x90
_printHelloWorld:
Leh_func_begin2:
	pushq	%rbp
Ltmp3:
	movq	%rsp, %rbp
Ltmp4:
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
Ltmp5:
	leaq	L_.str(%rip), %rbx
	leaq	L_.str1(%rip), %r14
	movl	%edi, %r15d
	jmp	LBB2_1
	.align	4, 0x90
LBB2_7:
	movq	%r14, %rdi
	callq	_puts
	addl	$-2, %r15d
LBB2_1:
	testl	%r15d, %r15d
	jns	LBB2_3
	xorb	%al, %al
	movq	%rbx, %rdi
	movl	%r15d, %esi
	callq	_printf
LBB2_3:
	testl	%r15d, %r15d
	je	LBB2_8
	leal	-1(%r15), %r12d
	movq	%r14, %rdi
	callq	_puts
	testl	%r12d, %r12d
	jns	LBB2_6
	xorb	%al, %al
	movq	%rbx, %rdi
	movl	%r12d, %esi
	callq	_printf
LBB2_6:
	cmpl	$1, %r15d
	jne	LBB2_7
LBB2_8:
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
Leh_func_end2:

	.section	__TEXT,__cstring,cstring_literals
	.align	3
L_.str:
	.asciz	 "Exception: The recursive time cannot be negative! %d \n"

L_.str1:
	.asciz	 "Hello, World!"

L_.str2:
	.asciz	 "Requires only one arguments.."

L_.str3:
	.asciz	 "Goodbye"

	.section	__TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support
EH_frame0:
Lsection_eh_frame:
Leh_frame_common:
Lset0 = Leh_frame_common_end-Leh_frame_common_begin
	.long	Lset0
Leh_frame_common_begin:
	.long	0
	.byte	1
	.asciz	 "zR"
	.byte	1
	.byte	120
	.byte	16
	.byte	1
	.byte	16
	.byte	12
	.byte	7
	.byte	8
	.byte	144
	.byte	1
	.align	3
Leh_frame_common_end:
	.globl	_main.eh
_main.eh:
Lset1 = Leh_frame_end1-Leh_frame_begin1
	.long	Lset1
Leh_frame_begin1:
Lset2 = Leh_frame_begin1-Leh_frame_common
	.long	Lset2
Ltmp6:
	.quad	Leh_func_begin1-Ltmp6
Lset3 = Leh_func_end1-Leh_func_begin1
	.quad	Lset3
	.byte	0
	.byte	4
Lset4 = Ltmp0-Leh_func_begin1
	.long	Lset4
	.byte	14
	.byte	16
	.byte	134
	.byte	2
	.byte	4
Lset5 = Ltmp1-Ltmp0
	.long	Lset5
	.byte	13
	.byte	6
	.byte	4
Lset6 = Ltmp2-Ltmp1
	.long	Lset6
	.byte	131
	.byte	6
	.byte	140
	.byte	5
	.byte	142
	.byte	4
	.byte	143
	.byte	3
	.align	3
Leh_frame_end1:

	.globl	_printHelloWorld.eh
_printHelloWorld.eh:
Lset7 = Leh_frame_end2-Leh_frame_begin2
	.long	Lset7
Leh_frame_begin2:
Lset8 = Leh_frame_begin2-Leh_frame_common
	.long	Lset8
Ltmp7:
	.quad	Leh_func_begin2-Ltmp7
Lset9 = Leh_func_end2-Leh_func_begin2
	.quad	Lset9
	.byte	0
	.byte	4
Lset10 = Ltmp3-Leh_func_begin2
	.long	Lset10
	.byte	14
	.byte	16
	.byte	134
	.byte	2
	.byte	4
Lset11 = Ltmp4-Ltmp3
	.long	Lset11
	.byte	13
	.byte	6
	.byte	4
Lset12 = Ltmp5-Ltmp4
	.long	Lset12
	.byte	131
	.byte	6
	.byte	140
	.byte	5
	.byte	142
	.byte	4
	.byte	143
	.byte	3
	.align	3
Leh_frame_end2:


.subsections_via_symbols
