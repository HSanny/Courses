            +---------------------------+
            |           CS 439          |
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	    |
		    +---------------------------+

****EACH student submits a (unique) design document.****

---- Name ----

>> Fill your name, UT EID, CS login, email address, and unique number:

Name: XIN LIN
EID: xl5224
CS login: jimmylin
Email: jimmylin@utexas.edu
Unique Number: 53910

Slip days used on this project: 2 day

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Name1: Sharon Hom
EID1: smh3556
CS login: sharon
Email: hom.sharon@gmail.com
Unique Number: 53915
Ranking (scale below): Excellent

Name2: Meng Yan
EID2: my4574
CS login: veronica
Email: yanmeng911@gmail.com
Unique Number: 53920
Ranking (scale below): Excellent

Name3: Bochao Zhan
EID2: bz2892
CS login: bzhan
Email: bzhan927@gmail.com
Unique Number:53900
Ranking (scale below): Excellent

---- PARTNER EVALUATION SCALE ----

>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.

>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.

>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.

>> Marginal: Sometimes failed to show up, rarely prepared.

>> Deficient: Often failed to show up, rarely prepared.

>> Unsatisfactory: Consistently failed to show up, unprepared.

>> Superficial: Practically no participation.

>> No Show: No participation at all.


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

1. We implement the clock algorithm for the first extra credit section.


			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

   /* macros*/
   #define PGSIZE 4096

   /* data structure for frame table entry*/
   Added to struct FTE:

   bool locked; 
     shows if this frame table entry can be evicted 

   tid_t owner; 
     shows whhich thread process this frame table entry belongs to

   void * paddr; 
     stores the physical address represented in this entry

   void * vaddr; 
     stores the virtual address that is corresponding to this frame table entry

   struct SP * supplementary_page; 
     points to the corresponding supplementary page for this frame table entry
 
   struct hash_elem FTE_helem; 
     stores the hash element for this frame table entry
  
   Global variable:

   struct lock frame_table_lock;
     This is a global lock for frame table access.

   struct hash frame_table; 
     This is the global frame table modeled as a hash table.


   /* Defining data structure representing page in VAS */
   Added to struct SP:

   struct thread * owner; 
     This shows which thread does this supplementary page belong to.

   struct hash_elem SP_helem; 
     stores the hash element for this supplementary page

   void * vaddr;
     stores the virtual address for this supplementary page

   uint32_t * pagedir; 
     stores the pointers to page table in pintos' page directory

   uint8_t * ppage; 
     stores the physical address for this supplementary page

   off_t offset;
     stores the offset position for a file

   int page_read_bytes; 
     stores number of bytes to read

   bool evicted; 
     shows if this page is swapped out in swap area

   bool modified;
     shows if this page is dirty

   bool executable;
     shows if this page is a code segment page
   bool writable;
     shows if this page is modifiable

   /* new memeber for the struct thread */
   Added to struct thread:

   struct hash *spt;
     points to the supplementary page table for this process

   struct lock spt_lock;
     stores the lock for that supplementary page table

   int num_stack_pages;
     saves number of pages allocated for stack

   struct intr_frame *interrupt;
     pointos to the interrupt frame for this process

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

   We modeled the frame table as a hash table. We use physical address as the
   key of that hash table to find the frame (value).

   Our implementation uses demand paging as required. When a page fault
   occurs, we trace the fault address of that page fault. And after that, we
   use the macro function ROUND_DOWN to formalize the address as multiple of
   PGSIZE.  Then, that fault address is employed to look up the supplemental
   page, in which the metadata of the page is restored. Then we put that page
   into the physical memory and insert that frame to the frame (hash) table. 

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

   We avoid this issue by using demand paging mechanism with supplementary page.

   When we load data from disk, we generate a supplementary page for each
   particular page that ought to be residenet in the physical memory. The
   supplementary page, uniquely identified by virtual address, contains page
   directory and offset of the content in the file (file offset). All frame loading
   and removal operation is achieved through the supplementary page. Thus, our
   design avoid the case of having two vitual addresses pointing to the same
   frame.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

   When a user process attempts to get a new frame, it has to call the function
   fget_page(), where there is a lock called frame_table_lock to achieve
   mutual exclusion. At the start of that function, we will grab the lock on
   our global frame table and release it at the end. Thus, two process
   can not create frame table entry at the same time.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

   We use a supplementary page table to store the metadata and represent
   virtual to physical mappings. The metadata includes information about if
   this page is swapped out, whether this page is dirty, whether this page is
   for the executable code and whether this page is modifiable, which swap
   slot this page is placed and which thread does this page belongs to.

   The supplemantary page table achieves a good abstraction for managing
   swapping.  While it is true that we can merge these information into
   pinto's page table, it is clearer to have a page table which has a one to
   one mapping to physical memory and another supplementary page table to
   record the eviction and other metadata information for that virtual
   address.

   Besides, as to frame table entry, we have a member keeping track of the
   supplmentary page such that kernel could refer to metadata of the page
   filling up that frame. To summarize, the supplementary page is the core
   for achieving the functionality of demand paging, swapping, and memory
   mapping. 


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Macros:
   #define BLOCK_SECTOR_SIZE 512
   #define SECTOR_PER_SLOT (PGSIZE/BLOCK_SECTOR_SIZE)

Added to struct SP:

   size_t swap_slot
     stores the location on disk that this page swaps to

Global variable added to swap.c
  
   struct lock swap_lock;
     global lock for swap space

   struct bitmap *swap_map;
     indicate the availability of slots on swap space

 ---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

   We call the function fget_evict() to evict a frame, when there is no more
   free frame in the frame table.

   In this function, we implement the clock algorithm (EXTRA CREDIT).
   We loop through the frame table to see the reference/access bit of each allocated
   frame. If the frame's access bit is set, we will reset it to false. If the
   frame's access bit is not set and the frame is not locked, we will evict
   that frame and in the meanwhile lock that frame, such that other process
   cannot evict that frame when it is being swapped to swap space.

   Since we keep reseting the access bit to not accessed in the loop until we
   find a page to evict, it is guaranteed that there is always one frame to be
   evicted.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

   There are three possibilities for process Q to lose the frame:
   
   1. Process Q exits.
   In this case, the frame table entry occupied by process
   Q will be removed since we invoke the funcion fleanup() in the
   exit() system call, and the palloc_free_page() will be called to free the
   corresponding physical memory. Also, the entire supplemantal page table and
   all its entries are freed. By this means, this frame can be used again
   by any other process such as process P. The pagedir_destroy will be called
   to free all the pages inside the page directory of this process.

   2. Frame get evicted (since full frame table) to swap space. 
   In that case, we will write the content of that frame to swap space, and
   in the meanwhile, update the swap_map (bitmap) by flipping the correponding
   bit. And then we update the corresponding supplemantal page to keep track
   of the position of the swapping slot and set "evicted" control bit. After that,
   the frame table entry is removed from the global frame table and
   corresponding physical memory location is freed by calling
   palloc_free_page();

   3. Frame get evicted (since full frame table), but not to swap space. 
   This is the simplest case, since there is no modification within the
   content of that frame, we directly remove that frame table entry and
   free the corresponding page resident in the physical memory by using
   palloc_free_page().

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

   First of all we need to check if the faulting address is below (lower
   address) the current process's stack bottom. If true, there could be a
   need for stack growh but we should have the following further examination.
   
   Check whether
   1. the faulting address is 4 below the esp (caused by push instruction) 
   or 
   2. the faulting address is 32 below the esp (caused by pusha instruction)
   or
   3. if the faulting address is above the esp but below the process bottom, a
   large object is supposed to be allocated on the stack and push the esp
   down. 
   If one of above three condition is true, we will grow up the stack for that
   virtual address.
   

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

   We use several locks to achieve synchronization for our VM. 
   1. We have a lock for global frame table to avoid simultaneous
   modificaiton to the frame table, which is also defined in global scope.
   By using this lock, no race will occur if two processes are
   asking for the frame allocation at the same time.

   2. We also have a lock for swap space to restrict simultaneous acess
   to swap pool. 
   There could be a race when two processes are swapping out its frame
   respectively at the same time if this lock is not used.
   
   3. Besides, we also have a supplemantary table lock for each process.

   4. We also have a struct locked for each frame table entry to track whether
   this frame table entry is allowed to be evicted. 

   As to deadlock prevention, we need to ensure that no circular waiting is possible. 
   For frame table locks, we generally only acquire locks in frame.c.
   For supplementary table locks, we generally only acquire locks in page.c.
   But there are a few exceptions: 
   Inside ffree_page, we grab locks on frame table first and then we grab locks 
   on supplementary table.
   By grabing the locks in certain order, we avoid the deadlock between frame table locks
   and supplementary table locks.

   To prevent deadlocks between frame table locks and swap space lock, which
   are both global lock and accessible by all processes, we only grab swap
   space lock inside swap.c. One process can attempt to grab the global frame
   table lock when it does not hold a swap lock and vice versa. Thus we
   prevent deadlocks between frame table locks and swap space lock.

   To prevent deadlocks between supplementary table locks and swap space lock,
   we only grab swap space lock inside swap.c. It never try to grab
   supplementary table locks while holding a swap space lock and vice versa.
   Thus we prevent deadlocks between supplementary table locks and swap space
   lock.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

   A function call fget_page_aux() will occur in response to the page fault in
   process P. It will acquire the lock for frame table. Then, the function
   fget_page_aux is getting called.  If the physical memory is full,
   swap_out() function will be invoked. Then this function will grab a lock on
   swap_lock. After that, we will grab a lock spt_lock on supplementarty page
   table of process Q, such that process Q cannot access and modify its page
   during the eviction process.

   Therefore, we locked frame table, supplementary page table and swap area.
   Since the supplemantary page table of process Q is locked, the process Q
   cannot look up its supplementary page table and therefore no corresponding
   page fault would occur.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

   When a page fault occurs, the function supplementary_page_load first tries
   to access the frame table, thus it acquire the lock for that frame table.
   Ans since the frame table is full, swapping out is needed and then the
   swap_lock is acquired by process P. Since the *frame table lock is not
   released yet*, the second process Q are not allowed to access the frame
   table, let alone evicting the frame currently used by process P.
   Therefore, the process Q cannot interfere process P.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

   We use a new mechanism for paged-out pages that occur during system calls. 
   
   Once certain system call references a virtual address whose content is not
   resident in the physical memory, the page loaded on demand will be locked
   until the system call never needs it any more. The way we achieve the 
   mechanism of locking frames into physical memory is through the "locked"
   control bit within struct FTE, which indicates whether one frame is allowed
   to be evicted. 

   We handle attempted accesses to invalid virtual addresses inside
   validate_ptr(). We will check whether the vitual address is within user address
   range and within the allocated user space (exist a supplementary_page
   corresponding to it).  We will also check if there is an entry for the
   vitual address in the supplementary page table.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

   Our design can be regarded as a trade-off between high-degree parallelism
   and safety. 
   On the one hand, the frame table and the swap bitmap are both global, which
   means all threads/processes could access it but only one can apply
   modification on it at one time. (thread safety) Besides, we use reasonable
   order of acquiring locks to avoid the deadlock.
   On the other hand, the parallelism lies in the fact that we have a
   supplmental page table for each individual process, such that each process
   could access its own spt concurrently. 
   
   The reason we choose this design is that it is basically simple to
   implement and its performance is sound.
   
		 MEMORY MAPPED FILES (Extra Credit)
		 ==================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
