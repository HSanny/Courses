################
YOUR INFO
################
Name1: XIN LIN (Jimmy)
EID1: xl5224
CS login: jimmylin
Email: JimmyLin@utexas.edu
Unique Number: 53910

Slip days used: 0 day

****EACH student submits a (unique) design document.****

################
YOUR PARTNER'S INFO
################
Name1: Bochao Zhan
EID1: BZ2892
CS login: bzhan
Email: bzhan927@gmail.com
Unique Number: 53900

Your partner's ranking (scale below): Excellent

################
PARTNER EVALUATION SCALE
################
Excellent: Consistently went above and beyond - tutored others, carried
more than his/her fair share of the load.

Very Good: Consistently did what he/she was supposed to do, very well
prepared and cooperative.

Satisfactory: Usually did what he/she was supposed to do, minimally
prepared and cooperative.

Marginal: Sometimes failed to show up, rarely prepared.

Deficient: Often failed to show up, rarely prepared.

Unsatisfactory: Consistently failed to show up, unprepared.

Superficial: Practically no participation.

No Show: No participation at all.

################
Preliminaries
################
(1) If you have any preliminary comments on your submission, notes for
  the TAs, or extra credit, please give them here.

  During the process of examing trace16.txt, we found that the command
    ./myint 2
will interrupt the "makefile"'s routine and directly exit the examining
program. But such problem do not occur when we type the command in ./msh
environment. We hope the the marking process could be based on behaviors
under the ./msh environment.

(2) Please cite any offline or online sources you consulted while
  preparing your submission, other than the Linux documentation,
  course text, and lecture notes.

  a. The practical usage of nanosleep: 
    http://stackoverflow.com/questions/7684359/using-nanosleep-in-c
  b. The difference between nanosleep, sleep and usleep:
    http://stackoverflow.com/questions/3072912/boostthis-threadsleep-vs-nanosleep
  c. GNU Documentation:  
    http://www.gnu.org/software/libc/manual/html_node/Signal-and-Sigaction.html
  d. Signal v.s. Sigaction
    http://www.alexonlinux.com/signal-handling-in-linux
    
################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() begins with
  an input of 5?  Show the return value for each child process, numbering
  the processes beginning with 0 (the original process) and incrementing for
  each child process.

    14 child processes are created.
    Process 14 has return value: 1.
    Process 13 has return value: 1.
    Process 12 has return value: 1.
    Process 11 has return value: 1.
    Process 10 has return value: 0.
    Process 9 has return value: 0.
    Process 8 has return value: 1.
    Process 7 has return value: 1.
    Process 6 has return value: 0.
    Process 5 has return value: 1.
    Process 4 has return value: 2.
    Process 3 has return value: 1.
    Process 2 has return value: 2.
    Process 1 has return value: 3.
    Process 0 has return value: 5.

(2) In part 0.3, which flavor of exec did you choose to use?  Why?

    The exec function I use is execvp().
    This is because the execvp() function:
        (a) satisfies the our basic execution requirement.
        (b) searches the directories listed in the PATH environment variable,
        such that we do not have to specify the current path in the filename
        once again.

################
Questions regarding Part 1
################
(1) In the provided utility function Signal(), what does the call to
  sigaction() do?  Why was sigaction() used instead of signal()?

    The functionality of system call sigaction() is to associate a 
    signal handler to the specified signal, that is, to install a 
    signal handler.

    Reason that sigaction() is in preference: 
    A successful invocation of sigaction() function specifies more arguments
    than the signal() function, so the return value from signal cannot 
    express the full range of sigaction possibilities. 
    Besides, sigaction() has more options and is more reliable. If use the
    sigaction(), we need not reinstall the handler, because it will never 
    be reset. With SA_RESTART, we can also get some system calls to
    automatically restart.

(2) What is the last assembly language instruction executed by the
  signal handler function that you write?
   
    callq _exit

(3) After the instruction identified in the previous question executes, 
  what is the next assembly language instruction executed?

   No assembly language instruction is to be executed, since the program has
   been terminated after calling the "callq _exit" instruction.


(4) When the signal handler finishes running, it must restore all of
  the registers from the interrupted thread to exactly their values
  before the signal occurred. How is this done?

bit?
    Before the signal handler invocation, the value in the CPU registers
    will be pushed to the stack (or some other data structure for storage).
    And when the environment switch back, the stored value in stack will
    be pop out to the registers.
    

################
Questions regarding Part 2
################
(1) In msh.c, we use three separate signal handlers to catch our signals. 
  You can also use a single signal handler to catch all three signals.  Is
  there a design advantage of one over the other?  Explain your answer.
    
   
    
    It's a trade-off between safety and efficiency of signal handling. 
According to the principle of asynchronous execution of signal handling,
once signal handler is installed, the system will allocate one thread
to receive the signal.

    Advantage of one signal handler: One signal handler only allows 
reception of one signal at one time. That is, when one signal is being 
processed, the others will be blocked (put into pending state).
This would be inherently safe for multi-thread problem, like race condition,
if there are common variables to be accessed by multiple signal handling
routines. 

    Advantage of three separate signal handlers: this is a efficient way of 
handling signals, but sometimes dangerous. Signals are not to be pending for
signals of other type. 
