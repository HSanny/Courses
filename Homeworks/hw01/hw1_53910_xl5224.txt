Homework #: 1
Student Name: XIN LIN
EID: xl5224
CS login: 
Email address: JimmyLin@utexas.edu
Unique Number: 53910

------------------------------------------------------------------------
1. Which of the following components is responsible for loading the initial value in the program counter for an application program before it starts running?
    Compiler
    Linker
    Loader
    Boot module or boot ROM
    
#######################
##  Answer: Loader   ##
#######################

------------------------------------------------------------------------
2. Write a C program that expects an integer command line argument, x, and then uses recursion to print, Hello, World! x times. Paste the code into your homework.

/**##############################################################
## MODULE: HelloWorld.c
## VERSION: 1.0 
## SINCE: 2013-08-31
## AUTHOR: Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
## DESCRIPTION: 
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

// Library inclusion
#include <stdio.h>

// Function signature
void printHelloWorld (int);

// main function to manipulate the command line argument
int main (int argc, char **argv) {
    // Requires only one man-made argument
    // argv[0] is the script name
    // argv[1] is the human-input argument
    if (argc != 2) {
        printf("Requires only one arguments..\n");
        return -1; // return with error indicator -1
    }
    // initialize the variable and interpret the input argument to integer
    int x = atoi(* (argv + 1));
    printHelloWorld(x);
    // indicate the successful execution
    return 0;
}


// subfunction to manipulate the recursion
void printHelloWorld (int x) {
    // exception handling
    if (x < 0) 
        printf("Exception: The recursive time cannot be negative! %d \n", x);
    // base case
    if (x == 0) return ;
    // recursive case
    else {
        printf("Hello, World!\n");
        printHelloWorld(x - 1);
        return ;
    }
}

------------------------------------------------------------------------
3. Compile your program from 1) on the CS Linux machines using gcc. Use command line options to:
    Name the executable file hello.
    Set the optimization to level 0.
    Turn on the debugging information.
You may find the overview of gcc on the course homepage helpful.

What command did you use?

## The command used to achieve the above goals are as follows:
    ## name the executable file as "hello" by "-o hello",
    ## set the optimization to level 0 by "-O0" and
    ## turn on the debugging information by "-g"
    
    gcc HelloWorld.c -o hello -O0 -g

------------------------------------------------------------------------
4. What commands did you use in gdb? What is the line number of your recursive call?

Answer: The line numbers of all my recursive calls are the same, say, 50. The following are the 
codes executed in gdb. (Ignorable comment preceded by ##.)
NOTE that the call from main function is not a recursive call (not invoke itself).

## Run your program from within gdb with an argument of 5.
    gdb ./hello 
    start 5

## Set a break point at the entrance to your recursive function.
    break printHelloWorld
    
## Print the value of the argument to the function. 
    print x

## Step through each line of the function until Hello, World! is printed. 
## (the breakpoint has been set in previous statement)
    continue

## Continue the execution until the next breakpoint is reached. Check the value of the argument, and, if it is not the last recursive call, continue the program.
    if x != 0
        continue
    end

## On the last recursive call, print a backtrace of the call stack. Identify the line number of the call to your recursive function in main().
    if x == 0 
        backtrace
    end


------------------------------------------------------------------------
5. Return to your program and add an if statement in main after the recursive call that reads:
    if(x == x)
        printf("Goodbye\n");
where x is the name of your argument to the recursive call.
Recompile your program with the optimizations set to level 4.

Run your program using gdb, but set a breakpoint in main for after the recursive call but before the print statement. What happens?

The evaluation for "if" statement is ignored, that is, the main function directly executes the "goodbye" printing task without doing the "if" evaluation since the expression "x == x" is always true. The way to detect this is to replace "x == x" with "x == 5" and see the feedback from gdb.
NOTE: all the optimization levels ignores the "if (x == x)" statement and execute "goodbye" printing directly.
