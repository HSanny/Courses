			+--------------------+
			|        CS 439      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

****EACH student submits a (unique) design document.****

---- Name ----

Name: XIN LIN (JIMMY)
EID: xl5224
CS login: jimmylin
Email: JimmyLin@utexas.edu
Unique Number: 53910


Slip days used on this project: 0 day

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Name1: Bochao Zhan
EID1: BZ2892
CS login: bzhan
Email: bzhan927@gmail.com
Unique Number: 53900
Ranking (scale below): Excellent


---- PARTNER EVALUATION SCALE ----

>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.

>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.

>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.

>> Marginal: Sometimes failed to show up, rarely prepared.

>> Deficient: Often failed to show up, rarely prepared.

>> Unsatisfactory: Consistently failed to show up, unprepared.

>> Superficial: Practically no participation.

>> No Show: No participation at all.


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

    Be mercy, thanks :0).

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

    

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

    We add the member remained_sleep to the struct thread in thread.h file.
    
    struct thread {
        ...
        int64_t remained_sleep; 
        ...
    }

    The purpose of introducing remained_sleep is to
    record the remaining time to stay in "blocked" status for that thread.
    (value is 0 if that thread is not blocked.) Here, we choose the variable
    type to be int64_t in order to keep consistent with the OS kernel clock. 

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
    
    First disable the interrupt to satisfy the requirement of thread_block().  

    Secondly, assign the amount of sleeping time to structure member of current
    thread, that is, remained_sleep in our implementation. 
    
    Then block the calling thread, after which the timer interrupt handler
    starts to attempt to awake that thread at each CPU time cycle.  (Put that
    thread back to ready queue when the expected amount of sleeping time
    elapsed.) During this stage, the calling thread will be blocked and never
    be rescheduled by kernel until specified sleeping period elapsed.

    Finally, reset the interrupt level to the original.

>> A3: What steps are taken to minimize the amount of time spent in the timer
>> interrupt handler?
    
    
    

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

    No shared variable for each thread, thus no latent race condition.
    When invoking the timer_sleep simultaneously, each thread modify
    its own remained_sleep value, which is independent to each other. 
    (Different threads access different part of the global variable.)

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

    When timer interrupt occurs, the interrupt handler sequentially update the
    remained_sleep value of each blocked thread. Such a sequential update (no
    temporal overlaps) will in no way cause race condition.

    Besides, we disable the interrupt before execution of thread_foreach()
    function.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

    

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Answer: 
    The global structures we have changed are lock, thread and semaphore_elem.
    We did not change any global variables.

struct lock 
{
    struct thread *holder;      /* Thread holding lock (for debugging). */
    struct semaphore semaphore; /* Binary semaphore controlling access. */
    //########################################################
    int high_priority;          /* priority of the most prior waiter */
    //########################################################
};


struct thread
{
    .......

    // ##################################################
    // NEW MEMBER FOR PRIORITY SCHEDULING: 
    // ##################################################
    int original_priority;  // inherent priority before donation
    struct lock * Lock;  // the lock this thread wants to acquire
    struct thread * waitfor;  // the thread for which this thread is waiting 
};

struct semaphore_elem 
{
    struct list_elem elem;              /* List element. */
    struct semaphore semaphore;         /* This semaphore. */
    // ##################################################
    struct thread * wait_thread;   /* Record the thread invoking
    condvar_wait, such that we can sort the semaphore_elem list based on the
    priority of waiting threads. */
    // ##################################################
};

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

    ASCII diagram:

                                 <----------t3
               t0 <----------- t1 <--------------t2(highest)
                                 <----------t4
    
    Note that t1 donates to t0. Then t2 donates to t1, whereas t3 and t4 are
    waiting for t1. (donation also implies waiting)

    For each thread, we record the one it is waiting for. Since one thread can
    only wait for a single thread, the new member "struct thread * waitfor" is
    enough. (For programming convenience, we just restore the corresponding
    lock as well within the thread structure.) This is how we trace the thread
    that one may donate to. (that is, trace t0 when we have t1.)

    The way we trace what thread donates to itself is to search through the
    alllist, the list storing all threads created until now. That is to trace
    t2 when we have t1, by finding the highest-priority thread whose waitfor is
    t1 through traversing alllist. (we find the one with maximum priority since
    there may be some otheer threads that are not qualified to donate to t1 at
    the moment, like t3 and t4. )

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

For the case of waiting for a lock or a semaphore (discussed together since
semaphore is used to implement lock):
    In sema_up() function, we first sort the waiting threads in the list called
    "waiters" (within the semaphore structure) according to their priority.
    After that, pop the back of "waiters" list to pick up the thread with
    highest priority and then unblock it to let it proceed.
        
For condition variable, 
    In cond_signal() function, we use the same technique as above. (sort
    the list and then allow the highest-priority waiter to proceed). But we
    need to first release the given lock and then reacquire the lock to prevent
    the priority donation. 

>> B4: Describe the sequence of events when a call to lock_acquire() causes a
>> priority donation.  How is nested donation handled?

In our implementation, the events when the current thread call lock_acquire() are:
    1. If the lock already has a holder, we consider the current thread has to
    wait the lock. Thus, we update the lock and waitfor member immediately. 
    2. If the holder's priority is lower than the current thread, we need to
    further achieve priority donation. Set the lock holder the same priority as
    the current thread.  
    3. If the holder is blocked since it is waiting for another lock, and the
    holder of that lock has lower-priority, we donate the priority of the
    current thread to it. 
    4. Repeat the step 3 until there is no further "lock holder".
    5. Decrement the semaphore counter and other relevant data structure.

The nested donation is handled through using a while() loop. We repetitively
detect whether the lock holder is waiting for some other thread (through
another lock). If so, achieve possible chain-like priority donation.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

    The current thread must be donated with priority if it keeps a lock for
    which a higher-priority thread is waiting. There must exist priority
    donation, but the result differs in who is the donor.
    
    Specifically, there are two possible situations as follows: 
    here we refer to the thread calling lock_release() as current thread.
    1. priority of the current thread is altered. This case happens
    when priority of the current thread is donated through the lock to be
    released. Thus, we need to figure out the new priority of the current
    thread, through other threads that are still waiting for it. If there is
    such thread, just set it back to its original priority.

    2. priority of the current thread remains unchanged. This case occurs
    when priority of the current thread is not donated through the lock it is
    going to be released. The donation is achieved through other lock.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

    Potential Race:

    Theoretically, we can use a thread to avoid the race condition by lock,
    since lock is essentially produced for mutual exclusion, from which the
    race condition is produced.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

		  ADVANCED SCHEDULER (Extra Credit)
		  =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the two problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
