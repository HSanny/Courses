/*##############################################################
## MODULE: Bidding.java
## VERSION: 1.0 
## SINCE: 2014-01-14
## AUTHOR: 
##         JIMMY LIN (xl5224) - JimmyLin@utexas.edu  
##
## DESCRIPTION: 
##    Algorithm Assignment #2: BIDDING SYSTEM
##    We incrementally implement the bidding-item stable matching.
## 
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Comparator;

// ****************************************************************
// Item data structure
class Item implements Comparable<Item>{
    // fields characterizing item
    int id;  
    int quality;  
    int price;  // unit: cents

    int highest_bid_id;  
    int highest_bid_price;  

    static int id_count;  // as id assigner

    // constructor for item class
    Item (int quality, int price) {
        this.id = id_count ++;
        this.quality = quality;
        this.price = price;  
        this.highest_bid_price = price;
        this.highest_bid_id = -1;
        this.matchedBySingleItem = false;
    }
    public String toString () {
        String str = "bid: " + this.quality + "," + this.price;
        return str;
    }
    public int compareTo (Item item) {
        return item.quality - this.quality;  // descending order
    }
}

// ****************************************************************
// Bid data structure
class Bid {
    int type;
    int bid_id;

    static int id_count;
    Bid (int type) {
        this.type = type;
        this.bid_id = Bid.id_count++;
    }
    int compareTo (Bid b) {
        if (b.type == 1 && this.type == 1) {
            return b.offer - this.offer;
        } else if (b.type == 2 && this.type ==2) {
            return b.slope - this.slope;
        } else {
            return b.type - this.type;
        }
    }
}

class SingleItemBid extends Bid {
    int item_id;
    int offer;

    SingleItemBid (int offer, int item_id) {
        super(1);
        this.offer = offer;
        this.item_id = item_id;
    }
    int getWeight () {
        // System.out.println(this.offer);
        return this.offer;
    }
}
class LinearBid extends Bid implements Comparable<LinearBid> {
    int intercept;
    int slope;
    LinearBid (int intercept, int slope) {
        super(2);
        this.intercept = intercept;
        this.slope = slope;
    }
    int getWeight (int quality) {
        int weight = quality * this.slope + this.intercept;
        // System.out.println(weight);
        return weight;
    }
}
// ****************************************************************

class Bidding {
    public static void main (String [] args) throws IOException {
        BufferedReader reader = new BufferedReader(new
                InputStreamReader (System.in));

        // parse the number of items
        int nItems = Integer.parseInt(reader.readLine());
        // System.out.println("number of items: " + n);

        // create and parse item array 
        Item [] items = new Item [nItems];
        // use priority queue to sort the items
        PriorityQueue<Item> pqItems = new PriorityQueue<Item> (nItems);
        String line = null;
        for (int i = 0; i < nItems; i ++) {
            line = reader.readLine();
            String [] item_infos = line.split(" ");
            int tmp_quality = Integer.parseInt(item_infos[0]);
            int tmp_price = Integer.parseInt(item_infos[1]);
            Item newitem = new Item (tmp_quality, tmp_price);
            items[i] = newitem;
            pqItems.offer(newitem);
            // System.out.println(items[i].toString());
        }
        // the sorting priority queue
        Item [] orderedItems = new Item [nItems];
        for (int i = 0; i < nItems; i ++) {
            orderedItems[i] = pqItems.poll();
            // System.out.println(items[i].quality);
        }

        // create and parse bidding arraylist
        ArrayList<Bid> bids = new ArrayList<Bid> ();
        ArrayList<Bid> matchedBids = new ArrayList<Bid> ();
        ;
        while ((line = reader.readLine()) != null) {
            String [] bidding_infos = line.split(" ");
            int type = Integer.parseInt(bidding_infos[0]);
            Item newadded = null;
            if (type == 1) { // single-item bid
                int tmp_price = Integer.parseInt(bidding_infos[1]);
                int tmp_id = Integer.parseInt(bidding_infos[2]);
                newadded = new SingleItemBid(tmp_price, tmp_id);
                bids.add (newadded);
                if (newLinearBid.offer <= items[tmp_id].highest_bid_price) {
                    // this single item bid remained unmatched
                    continue;
                }
                // System.out.println("1 " + tmp_id + ", " + tmp_price);
            } else if (type == 2) { // linear bid
                int intercept = Integer.parseInt(bidding_infos[1]);
                int slope = Integer.parseInt(bidding_infos[2]);
                newadded = new LinearBid(intercept, slope);
                bids.add (newadded);
                // System.out.println("2 " + intercept + ", " + slope);
            } else if (type == 3) { // for summary
                int maximum_weight = 0;
                int nBids = bids.size();
                int [] assignment = new int [nItems];
                // assignment
                for (int i = 0; i < nItems; i ++) {
                    assignment[i] = items[i].highest_bid_id;  // retained by seller  
                    maximum_weight += items[i].highest_bid_price;
                }
                // output
                String summary = Integer.toString (maximum_weight);
                for (int i = 0; i < nItems; i ++) {
                    summary += " " + Integer.toString (assignment[i]);
                }
                System.out.println(summary);
            } 
            int [] tmp_assignment = new int []();
            if (type == 1 || type == 2) {
                // update the assignment 
                ArrayList<Item> tmpItems = new ArrayList<Item> (items);
                ArrayList<Bid> tmpBids = new ArrayList<Bid> (matchedBids);
                tmpBids.add (newadded);
                // get rid of single-item bid
                for (int i = 0; i < tmpBids.size(); i ++) {
                    if (tmpBids.get(i).type == 1 && )
                }
            }

        }
    }
}
