/*##############################################################
## MODULE: Bidding.java
## VERSION: 1.0 
## SINCE: 2014-01-14
## AUTHOR: 
##         JIMMY LIN (xl5224) - JimmyLin@utexas.edu  
##
## DESCRIPTION: 
##    Algorithm Assignment #3: BIDDING SYSTEM
##    We incrementally implement the bidding-item stable matching.
## 
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Collections;

// ****************************************************************
// Item data structure
class Item implements Comparable<Item>{
    // fields characterizing item
    int id;  
    int quality;  
    int price;  // unit: cents

    static int id_count;  // as id assigner

    // constructor for item class
    Item (int quality, int price) {
        this.id = id_count ++;
        this.quality = quality;
        this.price = price;  
    }
    public String toString () {
        String str = "Item: " + this.quality + "," + this.price;
        return str;
    }
    public int compareTo (Item item) {
        return item.quality - this.quality;  // descending order
    }
}

// ****************************************************************
// Bid data structure
class Bid {
    int type;
    int id;

    static int id_count;

    Bid (int type) {
        this.type = type;
        this.id = Bid.id_count++;
    }
}

class SingleItemBid extends Bid implements Comparable<SingleItemBid> {
    Item toItem;
    int offer;

    SingleItemBid (int offer, Item toItem) {
        super(1);
        this.offer = offer;
        this.toItem = toItem;
    }
    int getWeight () {
        if (this.offer > this.toItem.price) {
            return this.offer;
        } else {
            return this.toItem.price;
        }
    }

    // compare single-item bid based on the item it offers to
    public int compareTo (SingleItemBid sib) {
        return sib.toItem.quality - this.toItem.quality;
    }
}
class LinearBid extends Bid implements Comparable<LinearBid> {
    int slope;
    int intercept;
    Item toItem;

    LinearBid (int intercept, int slope) {
        super(2);
        this.intercept = intercept;
        this.slope = slope;
        this.toItem = null;
    }
    int getWeight (Item item) {
        int weight = item.quality * this.slope + this.intercept;
        return weight;
    }
    public int compareTo (LinearBid lb) {
        return lb.slope - this.slope;
    }
}

// ****************************************************************
class Bidding {
    public static void insertToArrayList (ArrayList<SingleItemBid> bidlist, SingleItemBid bid) {
        for (int i = 0; i < bidlist.size(); i++) {
            SingleItemBid tmp_bid = bidlist.get(i);
            if (tmp_bid.compareTo(bid) > 0) {
                bidlist.add(i, bid);
                return ;
            }
        }
        bidlist.add(bid);
        return ;       
    }
    public static void insertToArrayList (ArrayList<LinearBid> bidlist, LinearBid bid) {
        for (int i = 0; i < bidlist.size(); i++) {
            LinearBid tmp_bid = bidlist.get(i);
            if (tmp_bid.compareTo(bid) > 0) {
                bidlist.add(i, bid);
                return ;
            }
        }
        bidlist.add(bid);
        return ;
    }
    public static int ComputeInitial (ArrayList<SingleItemBid> siblist,
            ArrayList<LinearBid> lblist, ArrayList<Item> itemlist, int option) {
        int total_weight = 0;
        ArrayList<Item> clonedItemList = new ArrayList<Item> (itemlist);
        if (option == 0) {
            /* by insertion of one single-item bid */
            SingleItemBid tmp_sib = null;
            for (int i = 1; i < siblist.size(); i++) {
                tmp_sib = siblist.get(i);
                clonedItemList.remove(tmp_sib);
                total_weight += tmp_sib.offer;
            }
            LinearBid tmp_lb = null;
            Item tmp_item = null;
            for (int i = 0; i < lblist.size(); i ++) {
                tmp_lb = lblist.get(i);
                tmp_item = itemlist.get(i);
                tmp_lb.toItem = tmp_item;
                total_weight += tmp_lb.getWeight(tmp_item);
            }
        } else {
            /* by insertion of one linear bid */
            SingleItemBid tmp_sib = null;
            for (int i = 0; i < siblist.size(); i++) {
                tmp_sib = siblist.get(i);
                clonedItemList.remove(tmp_sib);
                total_weight += tmp_sib.offer;
            }
            LinearBid tmp_lb = null;
            Item tmp_item = null;
            for (int i = 1; i < lblist.size(); i ++) {
                tmp_lb = lblist.get(i);
                tmp_item = itemlist.get(i);
                tmp_lb.toItem = tmp_item;
                total_weight += tmp_lb.getWeight(tmp_item);
            }
        }
        return total_weight;
    }

    public static void main (String [] args) throws IOException {
        BufferedReader reader = new BufferedReader(new
                InputStreamReader (System.in));
        /* Parse the number of items */
        int nItems = Integer.parseInt(reader.readLine());
        // System.out.println("number of items: " + n);

        /* Use priority queue to sort the items */
        ArrayList<Item> arrayItems = new ArrayList<Item> (nItems);
        /* Use hash map to restore items */
        HashMap<Integer,Item> hashItems = new HashMap<Integer,Item> (nItems);
        String line = null;
        for (int i = 0; i < nItems; i ++) {
            line = reader.readLine();
            String [] item_infos = line.split(" ");
            int tmp_quality = Integer.parseInt(item_infos[0]);
            int tmp_price = Integer.parseInt(item_infos[1]);
            Item newitem = new Item (tmp_quality, tmp_price);
            arrayItems.add(newitem);
            hashItems.put(i, newitem);
            // System.out.println(items[i].toString());
        }
        /* Sorted array list */
        Collections.sort(arrayItems);

        /* Create arraylist and hashmap for single-item bids */
        ArrayList<SingleItemBid> arraySingleBids = new ArrayList<SingleItemBid> ();
        HashMap<Integer,SingleItemBid> hashSingleBids = new HashMap<Integer,SingleItemBid> ();
        /* Create arraylist and hashmap for linear bids */
        ArrayList<LinearBid> arrayLinearBids = new ArrayList<LinearBid> ();
        HashMap<Integer,LinearBid> hashLinearBids = new HashMap<Integer,LinearBid> ();

        /* Construct dummies */
        int dummy_id = -1;
        for (int i = 0; i < nItems; i ++, dummy_id--) {
            Item tmp_item = hashSingleBids.get(i);
            SingleItemBid tmp_dummy = new SingleItemBid(dummy_id, tmp_item.price);
            arraySingleBids.add (tmp_dummy);
            hashSingleBids.put(dummy_id, tmp_dummy);
        }

        /* Initialize the assignment */
        int [] assignment = new int [nItems];
        for (int i = 0; i < nItems; i ++) {
            assignment[i] = -1;  // retained by seller  
            // System.out.println(arrayItems.get(i).quality);
        }
        while ((line = reader.readLine()) != null) {
            String [] bidding_infos = line.split(" ");
            int type = Integer.parseInt(bidding_infos[0]);
            if (type == 1) { 
                /* Single item bid insertion */
                int tmp_price = Integer.parseInt(bidding_infos[1]);
                int tmp_id = Integer.parseInt(bidding_infos[2]);
                SingleItemBid newBid = new SingleItemBid(tmp_price, arrayItems.get(tmp_id));
                hashSingleBids.put(newBid.id, newBid);
                insertToArrayList(arraySingleBids, newBid);
                /* Compute the first matching M_0 */
                int A = arraySingleBids.size();
                int [] wM = new int [A];
                wM[0] = ComputeInitial(arraySingleBids, arrayLinearBids, arrayItems, 0);
                /* Dynamic Programming: Incremental Computation */
                for (int i = 1; i < A; i++) {
                    ;
                }
                // System.out.println("1 " + tmp_id + ", " + tmp_price);
            } else if (type == 2) { 
                /* Linear bid insertion */
                int intercept = Integer.parseInt(bidding_infos[1]);
                int slope = Integer.parseInt(bidding_infos[2]);
                LinearBid newbid = new LinearBid(intercept, slope);
                hashLinearBids.put (newbid.id, newbid);
                insertToArrayList (arrayLinearBids, newbid);
                /* Compute the first matching M'_0 */
                int B = arrayLinearBids.size();
                int [] wM = new int [B];
                wM[0] = ComputeInitial(arraySingleBids, arrayLinearBids, arrayItems, 1);
                /* Dynamic Programming: Incremental Computation */
                for (int i = 1; i < B; i++) { 
                    // the item involves in exchange matching
                    LinearBid tmp_bid = arrayLinearBids.get(i);
                    Item tmp_item = hashItems.get(tmp_bid.toItem.id);
                    wM[i] = wM[i-1] + arrayLinearBids.get(i-1).getWeight(tmp_item) -
                        arrayLinearBids.get(i).getWeight(tmp_item);
                }
                /* Pick up the matching with maximum weight */
                int max_weight = -99999;
                int max_asgn = -1;
                for (int i = 0; i < B; i++) {
                    if (wM[i] > max_weight) {
                        max_weight = wM[i];
                        max_asgn = i;
                    }
                }
                arrayLinearBids.remove(hashLinearBids.get(i));
                hashLinearBids.remove(i);
                /* update the assignment */
                for (int i = 0; i < arraySingleBids.size(); i ++) {
                    SingleItemBid tmp_sib = arraySingleBids.get(i);
                    if (tmp_sib.id < 0)
                        assignment[tmp_sib.toItem.id] = -1;
                    else
                        assignment[tmp_sib.toItem.id] = tmp_sib.id;
                }
                for (int i = 0; i < arrayLinearBids.size(); i ++) {
                    LinearBid tmp_lb = arrayLinearBids.get(i);
                    if (tmp_lb.id < 0) {
                        tmp_lb = ;
                    } else {
                        tmp_lb = ;
                    }
                }
                // System.out.println("2 " + intercept + ", " + slope);
            } else if (type == 3) { 
                /* In summary */
                int maximum_weight = 0;
                // int nBids = bids.size();
                // assignment
                /*
                for (int i = 0; i < nItems; i ++) {
                    if (assignment[i] < 0) {
                        maximum_weight += items[i].price;
                        continue;
                    }
                    Bid assignedBid = bids.get(assignment[i]);
                    if (assignedBid.type == 1) { // single-item bid
                        maximum_weight += ((SingleItemBid) assignedBid).offer;
                    } else { // linear bid
                        maximum_weight += ((LinearBid) assignedBid).slope *
                            items[i].quality + ((LinearBid)assignedBid).intercept;
                    }
                }
                */
                // output
                String summary = Integer.toString (maximum_weight);
                for (int i = 0; i < nItems; i ++) {
                    summary += " " + Integer.toString (assignment[i]);
                }
                System.out.println(summary);
            } 
        }
    }
}
