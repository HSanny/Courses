/*##############################################################
## MODULE: Client.java
## VERSION: 1.0 
## SINCE: 2014-03-30
## AUTHOR: 
##     JIMMY LIN (xl5224) - JimmyLin@utexas.edu  
##     
## DESCRIPTION: 
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.PrintStream;
import java.io.File;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.InetAddress;

public class Client extends Util {

    static int clientID;
    static String logHeader;
    static String logfilename;
    static int leaderIdx;

    public static void main (String [] args) throws IOException {
        // parse the given id
        clientID = Integer.parseInt(args[0]);
        // configure the LOG setting
        logHeader = String.format(CLIENT_LOG_HEADER, clientID);
        logfilename = String.format(CLIENT_LOG_FILENAME, clientID);
        PrintStream log = new PrintStream (new File(logfilename));
        // redirect output to specified file
        System.setOut(log);
        System.setErr(log);

        InetAddress localhost = InetAddress.getLocalHost();
        // construct stable server socket
        ServerSocket listener = new ServerSocket(CLIENT_PORT_BASE+clientID, 0,
                InetAddress.getLocalHost());
        listener.setReuseAddress(true);
        // send acknowledgement to the master
        String setup_ack = String.format(MESSAGE, CLIENT_TYPE, clientID,
                MASTER_TYPE, 0, START_ACK_TITLE, EMPTY_CONTENT);
        send (localhost, MASTER_PORT, setup_ack, logHeader);
        // indicate the listener setup
        System.out.println(logHeader + listener.toString());
        try { while (true) {
            Socket socket = listener.accept();
            try {
                BufferedReader in = new BufferedReader(new
                        InputStreamReader(socket.getInputStream()));
                // channel is established
                String recMessage = in.readLine();
                System.out.println(logHeader + "Message Received: " + recMessage);
                String [] recInfo = recMessage.split(",");

                String sender_type = recInfo[SENDER_TYPE_IDX];
                int sender_idx = Integer.parseInt(recInfo[SENDER_INDEX_IDX]);
                String receiver_type = recInfo[RECEIVER_TYPE_IDX];
                int receiver_idx = Integer.parseInt(recInfo[RECEIVER_INDEX_IDX]);
                String title = recInfo[TITLE_IDX];
                String content = recInfo[CONTENT_IDX];

                if (title.equals(EXIT_TITLE)) {
                    socket.close();
                    listener.close();
                    System.out.println(logHeader + "Exit.");
                    System.exit(0);
                   }
                } finally {
                    socket.close();
                }

            }
        } finally {
            listener.close();
        }
    }
}
