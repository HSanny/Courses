/*##############################################################
## MODULE: Leader.java
## VERSION: 1.0 
## SINCE: 2014-04-02
## AUTHOR: 
##         JIMMY LIN (xl5224) - JimmyLin@utexas.edu  
##
## DESCRIPTION: 
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/
import java.util.concurrent.LinkedBlockingQueue;

class Leader implements Runnable{
        private LinkedBlockingQueue queue = null;
        // ballotNumber: current ballot number
        // active: active or passive?
        // proposals: proposals so far
        
        public Leader(LinkedBlockingQueue queue) {
            this.queue = queue;
        }
        
        public void run() {
            // Spawn a Scout for the current ballot number
            // while true
                // receive messages from queue
                // if message is a propose
                    // if Leader hasn't proposed something for this slot already
                        // add this proposal to list of proposals so far
                        // if the Leader is active
                            // spawn a Commander for this ballot
                // if message is an adopted
                    // update proposals so far with highest ballots for each slot returned by the adopted message
                    // for all proposals so far
                        // spawn a Commander for that proposal
                    // become Active
                // if message is a preempted
                    // if the ballot number in the message is greater than the current ballot number
                        // become Passive
                        // update the ballot number
                        // spawn a scout for the new ballot number

        }

        class Scout implements Runnable { 
            private LinkedBlockingQueue queue = null;
            // waitFor: the acceptors that the scout is still waiting for
            // pValues: the set of pValues received so far

            public Scout (LinkedBlockingQueue queue) {
                this.queue = queue;
            }

            public void run () {
                // for all acceptors
                    // send <p1a, leader, ballot number>
                // while true
                    // receive messages from queue
                    // if message is a p1b for the same ballot number
                        // add pvalues to pValues
                        // remove acceptor from waitFor
                        // if waiting for fewer than half of all acceptors
                            // send adopted, ballot number, pValues to leader
                            // exit
                    // else send preempted and the higher ballot number to leader
                    // exit
            }
        }

        class Commander implements Runnable {
            private LinkedBlockingQueue queue = null;
            // waitFor: the acceptors that the commander is still waiting for
            
            public Commander(LinkedBlockingQueue queue) {
                this.queue = queue;
            }

            public void run() {
               // for all acceptors
                   // send <p2a, leader, ballot>
               // while true
                   // receive messages from queue   
                   // if message is a p2b for the same ballot number
                       // remove acceptor from waitFor
                       // if waiting for fewer than half of all acceptors
                           // send decision to ALL servers
                   // else send preempted and the higher ballot number to leader
            }
        }
}
