/*##############################################################
## MODULE: Master.java
## VERSION: 1.0 
## SINCE: 2014-03-31
## AUTHOR: 
##         JIMMY LIN (xl5224) - JimmyLin@utexas.edu  
##
## DESCRIPTION: 
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

import java.util.Scanner;
import java.util.ArrayList;

public class Master {
    /* Protocol configuration */
    final static int CLIENT_PORT_BASE = 8000;
    final static int SERVER_PORT_BASE = 8200; 

    final static String RUN_SERVER_CMD = "java Server";
    final static String RUN_CLIENT_CMD = "java Client";

  public static void main(String [] args) {
    Scanner scan = new Scanner(System.in);
    int numNodes, numClients;

    while (scan.hasNextLine()) {
      String [] inputLine = scan.nextLine().split(" ");
      int clientIndex, nodeIndex;
      switch (inputLine[0]) {
        case "start":
            numNodes = Integer.parseInt(inputLine[1]);
            numClients = Integer.parseInt(inputLine[2]);
            /*
             * start up the right number of nodes and clients, and store the 
             *  connections to them for sending further commands
             */
            // ============================================================
            // DRIVEN BY JIMMY LIN STARTS
            System.out.println("start..");

            Process [] serverProcesses = new Process [numNodes];
            Process [] clientProcesses = new Process [numClients];

            Runtime r = Runtime.getRuntime();

            for (clientIndex = 0; clientIndex < numClients; clientIndex ++) {
                Integer clientID = new Integer(clientIndex);
                String [] args = new String [2];
                args[0] = "Client";
                args[1] = clientID.toString();
                Process pclient = r.exec(RUN_CLIENT_CMD, args);
                clientProcesses[clientIndex] = pclient;
            }

            for (serverIndex = 0; serverIndex < numNodes; serverIndex ++) {
                Integer serverID = new Integer(serverIndex);
                String [] args = new String [2];
                args[0] = "Server";
                args[1] = serverID.toString();
                Process pserver = r.exec(RUN_CLIENT_CMD, args); 
                serverProcesses[serverIndex] = pserver;
            }
            // ============================================================
            break;
        case "sendMessage":
            clientIndex = Integer.parseInt(inputLine[1]);
            String message = "";
            for (int i = 2; i < inputLine.length; i++) {
              message += inputLine[i];
              if (i != inputLine.length - 1) {
                message += " ";
              }
            }
            /*
             * Instruct the client specified by clientIndex to send the message
             * to the proper paxos node
             */
            System.out.println("sendMessage..");
            break;
        case "printChatLog":
            clientIndex = Integer.parseInt(inputLine[1]);
            /*
             * Print out the client specified by clientIndex's chat history
             * in the format described on the handout.	     
             */
            break;
        case "allClear":
            /*
             * Ensure that this blocks until all messages that are going to 
             * come to consensus in PAXOS do, and that all clients have heard
             * of them 
             */
            break;
        case "crashServer":
            nodeIndex = Integer.parseInt(inputLine[1]);
            /*
             * Immediately crash the server specified by nodeIndex
             */
            break;
        case "restartServer":
            nodeIndex = Integer.parseInt(inputLine[1]);
            /*
             * Restart the server specified by nodeIndex
             */
            break;
        case "skipSlots":
            int amountToSkip = Integer.parseInt(inputLine[1]);
            /*
             * Instruct the leader to skip slots in the chat message sequence  
             */ 
            break;
        case "timeBombLeader":
            int numMessages = Integer.parseInt(inputLine[1]);
            /*
             * Instruct the leader to crash after sending the number of paxos
             * related messages specified by numMessages
             */ 
            break;
      }
    }
  }
}
