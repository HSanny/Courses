/*##############################################################
## MODULE: Server.java
## VERSION: 1.0 
## SINCE: 2014-03-30
## AUTHOR: 
##     JIMMY LIN (xl5224) - JimmyLin@utexas.edu  
##
## DESCRIPTION: 
##     Server Class of PAXOS consensus algorithm
## 
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.File;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.InetAddress;

class Server extends Util implements Protocol {
    static int serverID;
    static String logHeader;
    static String logfilename;

    public static void main (String [] args) throws IOException {
        // parse the server id assigned by master
        serverID = Integer.parseInt(args[0]);
        // configure the LOG setting
        logHeader = String.format(SERVER_LOG_HEADER, serverID);
        logfilename = String.format(SERVER_LOG_FILENAME, serverID);
        PrintStream log = new PrintStream (new File(logfilename));
        // redirect output to specified file
        System.setOut(log);
        System.setErr(log);

        // construct stable server socket
        ServerSocket listener = new ServerSocket(SERVER_PORT_BASE+serverID, 0,
                InetAddress.getLocalHost());
        listener.setReuseAddress(true);
        // indicate the socket listener setup
        System.out.println(logHeader + "listener setup: " + listener.toString());
        // 
        try {
            while (true) {
                Socket socket = listener.accept();
                try {
                   BufferedReader in = new BufferedReader(new
                           InputStreamReader(socket.getInputStream()));
                   // channel is established
                   // TODO: process received message
                   String cmd = in.readLine();
                   System.out.println(cmd);
                   if (cmd.equals("exit")) {
                        listener.close();
                   }

                } finally {
                    socket.close();
                }
            }
        } finally {
            listener.close();
        }
    }
}
