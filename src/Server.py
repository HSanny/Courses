############################################################
##    FILENAME:   Server.py    
##    VERSION:    1.0
##    SINCE:      2014-04-15
##    AUTHOR: 
##        Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
##
############################################################
##    Edited by MacVim
##    Documentation auto-generated by Snippet 
############################################################

import sys, socket
from Protocol import *
from Logging import *
from Util import *

## TODO: static variable here
logHeader = None
localhost = socket.gethostname() 

def main(argv):
    '''
    Main function of server
    '''
    ## TODO: initialize static variables
    assert len(argv) >= 1, "SERVER: too less arguments"
    serverID = int(argv[0])
    logHeader = SERVER_LOG_HEADER % serverID
    pause = False

    ## construct server socket
    s = socket.socket()         
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    port = SERVER_PORT_BASE + serverID
    s.bind((localhost, port))        
    ## send back acknowledgement
    ackMsg = encode (SERVER_TYPE, serverID, MASTER_TYPE, 0,\
                      JOIN_SERVER_ACK_TITLE, EMPTY_CONTENT)
    send (localhost, MASTER_PORT, ackMsg, logHeader)

    s.listen(5)
    while True:
        conn, addr = s.accept()     
        recvMsg = conn.recv(BUFFER_SIZE)

        '''Incoming message preprocessing'''
        st, si, rt, ri, title, content = decode(recvMsg)
        printRecvMessage(recvMsg, logHeader)

        '''Processing incoming messages'''
        if title == PAUSE_TITLE:
            ## switch the pause indicator
            pause = True
            ## send pause acknowledgement to master
            pausAckMsg = encode(SERVER_TYPE, serverID, MASTER_TYPE, 0, \
                                 PAUSE_ACK_TITLE, EMPTY_CONTENT)
            send (localhost, MASTER_PORT, pausAckMsg, logHeader)
            ## TODO: other mechanism to pause the system
            #  - cache the following incoming messages
            #  - cache the following anti-entroy messages

        elif title == RESTART_TITLE:
            ## switch the pause indicator
            pause = False
            ## send restart acknowledgement to master
            restartAckMsg = encode(SERVER_TYPE, serverID, MASTER_TYPE, 0 ,\
                                  RESTART_ACK_TITLE, EMPTY_CONTENT)
            send(localhost, MASTER_PORT, restartAckMsg, logHeader)
            ## TODO: other mechanism to restart the system
            #  - cache the following incoming messages
            #  - cache the following anti-entroy messages

        elif title == JOIN_CLIENT_ACK_TITLE:
            deliverAckMsg = encode (SERVER_TYPE, serverID, \
               MASTER_TYPE, 0, JOIN_CLIENT_ACK_TITLE, EMPTY_CONTENT)
            port = getPortByMsg(deliverAckMsg)
            send (localhost, port, deliverAckMsg, logHeader)
        elif title == EXIT_TITLE:
            conn.close() 
            s.close()
            print "Exit."
            return
        else:
            pass
        conn.close() 

if __name__ == '__main__':
    ## TODO: process cmd arguments and give it to main
    serverID = int(sys.argv[1])
    origin_out = sys.stdout
    origin_err = sys.stderr
    logFile = open (SERVER_LOG_FILENAME % serverID, 'w+')
    sys.stdout = logFile
    sys.stderr = logFile
    main(sys.argv[1:])
    print "END OF ROUTINE"
    logFile.close()
    sys.stdout = origin_out 
    sys.stderr = origin_err
